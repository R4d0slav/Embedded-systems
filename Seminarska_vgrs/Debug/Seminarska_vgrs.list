
Seminarska_vgrs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad00  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f34  0800af00  0800af00  0001af00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce34  0800ce34  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce34  0800ce34  0001ce34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce3c  0800ce3c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce3c  0800ce3c  0001ce3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce40  0800ce40  0001ce40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800ce44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cd0  20000088  0800cecc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d58  0800cecc  00024d58  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027eb4  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c30  00000000  00000000  00047f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  0004cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a00  00000000  00000000  0004e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008d09  00000000  00000000  000501a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025747  00000000  00000000  00058eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016b171  00000000  00000000  0007e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e9769  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080e4  00000000  00000000  001e97bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000088 	.word	0x20000088
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aee8 	.word	0x0800aee8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000008c 	.word	0x2000008c
 800023c:	0800aee8 	.word	0x0800aee8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay(uint16_t time)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <delay+0x30>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 80005ea:	bf00      	nop
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <delay+0x30>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d3f9      	bcc.n	80005ec <delay+0x14>
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20004b6c 	.word	0x20004b6c

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f002 f861 	bl	80026d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f885 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f943 	bl	80008a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800061e:	f000 f8ed 	bl	80007fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000622:	4830      	ldr	r0, [pc, #192]	; (80006e4 <main+0xd8>)
 8000624:	f005 f996 	bl	8005954 <HAL_TIM_Base_Start>

  lcd_status = BSP_LCD_Init();
 8000628:	f001 f8e7 	bl	80017fa <BSP_LCD_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <main+0xdc>)
 8000632:	701a      	strb	r2, [r3, #0]
  while(lcd_status != LCD_OK);
 8000634:	bf00      	nop
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <main+0xdc>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1fb      	bne.n	8000636 <main+0x2a>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800063e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000642:	2000      	movs	r0, #0
 8000644:	f001 fa76 	bl	8001b34 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800064c:	f001 fb34 	bl	8001cb8 <BSP_LCD_Clear>

  BSP_LCD_SetFont(&Font24);
 8000650:	4826      	ldr	r0, [pc, #152]	; (80006ec <main+0xe0>)
 8000652:	f001 fb01 	bl	8001c58 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8000656:	4826      	ldr	r0, [pc, #152]	; (80006f0 <main+0xe4>)
 8000658:	f001 facc 	bl	8001bf4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800065c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000660:	f001 fae0 	bl	8001c24 <BSP_LCD_SetBackColor>

  uint8_t str[] = "Press the button to start !!";
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <main+0xe8>)
 8000666:	463c      	mov	r4, r7
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000672:	c407      	stmia	r4!, {r0, r1, r2}
 8000674:	7023      	strb	r3, [r4, #0]
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, str, CENTER_MODE);
 8000676:	f001 fa51 	bl	8001b1c <BSP_LCD_GetYSize>
 800067a:	4603      	mov	r3, r0
 800067c:	085b      	lsrs	r3, r3, #1
 800067e:	b299      	uxth	r1, r3
 8000680:	463a      	mov	r2, r7
 8000682:	2301      	movs	r3, #1
 8000684:	2000      	movs	r0, #0
 8000686:	f001 fb83 	bl	8001d90 <BSP_LCD_DisplayStringAt>

  queue = osMessageQueueNew(1, sizeof(Distance), NULL);
 800068a:	2200      	movs	r2, #0
 800068c:	2104      	movs	r1, #4
 800068e:	2001      	movs	r0, #1
 8000690:	f005 ffde 	bl	8006650 <osMessageQueueNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <main+0xec>)
 8000698:	6013      	str	r3, [r2, #0]
  semaphore = osSemaphoreNew(1U, 0U, NULL);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2001      	movs	r0, #1
 80006a0:	f005 fe7c 	bl	800639c <osSemaphoreNew>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <main+0xf0>)
 80006a8:	6013      	str	r3, [r2, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006aa:	f005 fd39 	bl	8006120 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  buttonTaskHandle = osThreadNew(StartButtonTask, NULL, &buttonTask_attributes);
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <main+0xf4>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4814      	ldr	r0, [pc, #80]	; (8000704 <main+0xf8>)
 80006b4:	f005 fd9e 	bl	80061f4 <osThreadNew>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <main+0xfc>)
 80006bc:	6013      	str	r3, [r2, #0]
  readDistanceTaskHandle = osThreadNew(StartReadDistanceTask, NULL, &readDistanceTask_attributes);
 80006be:	4a13      	ldr	r2, [pc, #76]	; (800070c <main+0x100>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <main+0x104>)
 80006c4:	f005 fd96 	bl	80061f4 <osThreadNew>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <main+0x108>)
 80006cc:	6013      	str	r3, [r2, #0]
  displayDistanceTaskHandle = osThreadNew(StartDisplayDistanceTask, NULL, &displayDistanceTask_attributes);
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <main+0x10c>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4812      	ldr	r0, [pc, #72]	; (800071c <main+0x110>)
 80006d4:	f005 fd8e 	bl	80061f4 <osThreadNew>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <main+0x114>)
 80006dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006de:	f005 fd53 	bl	8006188 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <main+0xd6>
 80006e4:	20004b6c 	.word	0x20004b6c
 80006e8:	200000a4 	.word	0x200000a4
 80006ec:	20000004 	.word	0x20000004
 80006f0:	ff000080 	.word	0xff000080
 80006f4:	0800af2c 	.word	0x0800af2c
 80006f8:	20004b64 	.word	0x20004b64
 80006fc:	20004b60 	.word	0x20004b60
 8000700:	0800af98 	.word	0x0800af98
 8000704:	08000f0d 	.word	0x08000f0d
 8000708:	20004bac 	.word	0x20004bac
 800070c:	0800afbc 	.word	0x0800afbc
 8000710:	080009c9 	.word	0x080009c9
 8000714:	20004bb0 	.word	0x20004bb0
 8000718:	0800afe0 	.word	0x0800afe0
 800071c:	08000ae5 	.word	0x08000ae5
 8000720:	20004b68 	.word	0x20004b68

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b096      	sub	sp, #88	; 0x58
 8000728:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef  ret = HAL_OK;
 800072a:	2300      	movs	r3, #0
 800072c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <SystemClock_Config+0xd0>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <SystemClock_Config+0xd0>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <SystemClock_Config+0xd0>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <SystemClock_Config+0xd4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <SystemClock_Config+0xd4>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <SystemClock_Config+0xd4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000768:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000774:	2319      	movs	r3, #25
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000778:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800077c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000782:	2309      	movs	r3, #9
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000786:	2307      	movs	r3, #7
 8000788:	63fb      	str	r3, [r7, #60]	; 0x3c

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4618      	mov	r0, r3
 8000790:	f003 ffb6 	bl	8004700 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 800079a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d000      	beq.n	80007a4 <SystemClock_Config+0x80>
  {
	while(1) { ; }
 80007a2:	e7fe      	b.n	80007a2 <SystemClock_Config+0x7e>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 80007a4:	f003 ff5c 	bl	8004660 <HAL_PWREx_EnableOverDrive>
 80007a8:	4603      	mov	r3, r0
 80007aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 80007ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d000      	beq.n	80007b8 <SystemClock_Config+0x94>
  {
	while(1) { ; }
 80007b6:	e7fe      	b.n	80007b6 <SystemClock_Config+0x92>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80007b8:	230f      	movs	r3, #15
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	653b      	str	r3, [r7, #80]	; 0x50

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80007d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d4:	2107      	movs	r1, #7
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 fa40 	bl	8004c5c <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 80007e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d000      	beq.n	80007ec <SystemClock_Config+0xc8>
  {
	while(1) { ; }
 80007ea:	e7fe      	b.n	80007ea <SystemClock_Config+0xc6>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3758      	adds	r7, #88	; 0x58
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_TIM1_Init+0xa0>)
 800081c:	4a20      	ldr	r2, [pc, #128]	; (80008a0 <MX_TIM1_Init+0xa4>)
 800081e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_TIM1_Init+0xa0>)
 8000822:	22d7      	movs	r2, #215	; 0xd7
 8000824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_TIM1_Init+0xa0>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_TIM1_Init+0xa0>)
 800082e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_TIM1_Init+0xa0>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_TIM1_Init+0xa0>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_TIM1_Init+0xa0>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000846:	4815      	ldr	r0, [pc, #84]	; (800089c <MX_TIM1_Init+0xa0>)
 8000848:	f005 f859 	bl	80058fe <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000852:	f000 fbfd 	bl	8001050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <MX_TIM1_Init+0xa0>)
 8000864:	f005 f8a0 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800086e:	f000 fbef 	bl	8001050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <MX_TIM1_Init+0xa0>)
 8000884:	f005 fa90 	bl	8005da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800088e:	f000 fbdf 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20004b6c 	.word	0x20004b6c
 80008a0:	40010000 	.word	0x40010000

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <MX_GPIO_Init+0x110>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a3d      	ldr	r2, [pc, #244]	; (80009b4 <MX_GPIO_Init+0x110>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b3b      	ldr	r3, [pc, #236]	; (80009b4 <MX_GPIO_Init+0x110>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <MX_GPIO_Init+0x110>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a37      	ldr	r2, [pc, #220]	; (80009b4 <MX_GPIO_Init+0x110>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <MX_GPIO_Init+0x110>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <MX_GPIO_Init+0x110>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a31      	ldr	r2, [pc, #196]	; (80009b4 <MX_GPIO_Init+0x110>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <MX_GPIO_Init+0x110>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000902:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <MX_GPIO_Init+0x110>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2b      	ldr	r2, [pc, #172]	; (80009b4 <MX_GPIO_Init+0x110>)
 8000908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_GPIO_Init+0x110>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000920:	4825      	ldr	r0, [pc, #148]	; (80009b8 <MX_GPIO_Init+0x114>)
 8000922:	f003 fb81 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4820      	ldr	r0, [pc, #128]	; (80009bc <MX_GPIO_Init+0x118>)
 800093c:	f003 f9b0 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4817      	ldr	r0, [pc, #92]	; (80009b8 <MX_GPIO_Init+0x114>)
 800095a:	f003 f9a1 	bl	8003ca0 <HAL_GPIO_Init>

  // Button
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095e:	2301      	movs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <MX_GPIO_Init+0x118>)
 8000972:	f003 f995 	bl	8003ca0 <HAL_GPIO_Init>

  // Green/Red light
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_13;
 8000976:	f242 0320 	movw	r3, #8224	; 0x2020
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_GPIO_Init+0x11c>)
 8000990:	f003 f986 	bl	8003ca0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2120      	movs	r1, #32
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <MX_GPIO_Init+0x11c>)
 800099a:	f003 fb45 	bl	8004028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_GPIO_Init+0x11c>)
 80009a6:	f003 fb3f 	bl	8004028 <HAL_GPIO_WritePin>

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400
 80009bc:	40020000 	.word	0x40020000
 80009c0:	40022400 	.word	0x40022400
 80009c4:	00000000 	.word	0x00000000

080009c8 <StartReadDistanceTask>:

/* USER CODE BEGIN 4 */
void StartReadDistanceTask(void *argument)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	uint32_t start_time;
	uint32_t end_time;
	uint32_t tick;

	Distance d;
	d.saved_distance = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	817b      	strh	r3, [r7, #10]

	for (;;)
	{
		if (osSemaphoreAcquire(semaphore, osWaitForever) == osOK) {
 80009d4:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <StartReadDistanceTask+0x108>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009dc:	4618      	mov	r0, r3
 80009de:	f005 fd79 	bl	80064d4 <osSemaphoreAcquire>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d169      	bne.n	8000abc <StartReadDistanceTask+0xf4>

			HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ee:	4839      	ldr	r0, [pc, #228]	; (8000ad4 <StartReadDistanceTask+0x10c>)
 80009f0:	f003 fb1a 	bl	8004028 <HAL_GPIO_WritePin>
			delay(2); // wait 2 us
 80009f4:	2002      	movs	r0, #2
 80009f6:	f7ff fdef 	bl	80005d8 <delay>
			HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a00:	4834      	ldr	r0, [pc, #208]	; (8000ad4 <StartReadDistanceTask+0x10c>)
 8000a02:	f003 fb11 	bl	8004028 <HAL_GPIO_WritePin>
			delay(10); // wait 10 us
 8000a06:	200a      	movs	r0, #10
 8000a08:	f7ff fde6 	bl	80005d8 <delay>
			HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a12:	4830      	ldr	r0, [pc, #192]	; (8000ad4 <StartReadDistanceTask+0x10c>)
 8000a14:	f003 fb08 	bl	8004028 <HAL_GPIO_WritePin>

			tick = HAL_GetTick();
 8000a18:	f001 feb0 	bl	800277c <HAL_GetTick>
 8000a1c:	6178      	str	r0, [r7, #20]
			while(!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && tick+10 > 0); // wait for echo to go to high state
 8000a1e:	bf00      	nop
 8000a20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a24:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <StartReadDistanceTask+0x110>)
 8000a26:	f003 fae7 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d103      	bne.n	8000a38 <StartReadDistanceTask+0x70>
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f113 0f0a 	cmn.w	r3, #10
 8000a36:	d1f3      	bne.n	8000a20 <StartReadDistanceTask+0x58>
			start_time = __HAL_TIM_GET_COUNTER(&htim1);
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <StartReadDistanceTask+0x114>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3e:	613b      	str	r3, [r7, #16]

			tick = HAL_GetTick();
 8000a40:	f001 fe9c 	bl	800277c <HAL_GetTick>
 8000a44:	6178      	str	r0, [r7, #20]
			while((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && tick+50 > 0); // wait for echo to go to low state
 8000a46:	bf00      	nop
 8000a48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a4c:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <StartReadDistanceTask+0x110>)
 8000a4e:	f003 fad3 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <StartReadDistanceTask+0x98>
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8000a5e:	d1f3      	bne.n	8000a48 <StartReadDistanceTask+0x80>
			end_time = __HAL_TIM_GET_COUNTER(&htim1);
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <StartReadDistanceTask+0x114>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a66:	60fb      	str	r3, [r7, #12]

			// Update the distance structure because of the saved distance
			osMessageQueueGet(queue, &d, NULL, 10);
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <StartReadDistanceTask+0x118>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	f107 0108 	add.w	r1, r7, #8
 8000a70:	230a      	movs	r3, #10
 8000a72:	2200      	movs	r2, #0
 8000a74:	f005 fee6 	bl	8006844 <osMessageQueueGet>

			d.distance = (end_time-start_time)*0.034/2;
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	ee07 3a90 	vmov	s15, r3
 8000a82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000a86:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000ac8 <StartReadDistanceTask+0x100>
 8000a8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000a92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a96:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a9a:	ee17 3a90 	vmov	r3, s15
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	813b      	strh	r3, [r7, #8]

			osMessageQueuePut(queue, &d, 0, 10);
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <StartReadDistanceTask+0x118>)
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	f107 0108 	add.w	r1, r7, #8
 8000aaa:	230a      	movs	r3, #10
 8000aac:	2200      	movs	r2, #0
 8000aae:	f005 fe55 	bl	800675c <osMessageQueuePut>
			osSemaphoreRelease(semaphore);
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <StartReadDistanceTask+0x108>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f005 fd72 	bl	80065a0 <osSemaphoreRelease>
		}
		HAL_Delay(150);
 8000abc:	2096      	movs	r0, #150	; 0x96
 8000abe:	f001 fe69 	bl	8002794 <HAL_Delay>
		if (osSemaphoreAcquire(semaphore, osWaitForever) == osOK) {
 8000ac2:	e787      	b.n	80009d4 <StartReadDistanceTask+0xc>
 8000ac4:	f3af 8000 	nop.w
 8000ac8:	b020c49c 	.word	0xb020c49c
 8000acc:	3fa16872 	.word	0x3fa16872
 8000ad0:	20004b60 	.word	0x20004b60
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	20004b6c 	.word	0x20004b6c
 8000ae0:	20004b64 	.word	0x20004b64

08000ae4 <StartDisplayDistanceTask>:
	}
}

void StartDisplayDistanceTask(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	Distance d;
	d.saved_distance = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	83fb      	strh	r3, [r7, #30]
	unsigned char str[20];
	for (;;)
	{
		osMessageQueueGet(queue, &d, NULL, osWaitForever);
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <StartDisplayDistanceTask+0xc0>)
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	f107 011c 	add.w	r1, r7, #28
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000afc:	2200      	movs	r2, #0
 8000afe:	f005 fea1 	bl	8006844 <osMessageQueueGet>
		if (osSemaphoreAcquire(semaphore, osWaitForever) == osOK) {
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <StartDisplayDistanceTask+0xc4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f005 fce2 	bl	80064d4 <osSemaphoreAcquire>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d142      	bne.n	8000b9c <StartDisplayDistanceTask+0xb8>

		osMessageQueuePut(queue, &d, NULL, 10);
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <StartDisplayDistanceTask+0xc0>)
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	f107 011c 	add.w	r1, r7, #28
 8000b1e:	230a      	movs	r3, #10
 8000b20:	2200      	movs	r2, #0
 8000b22:	f005 fe1b 	bl	800675c <osMessageQueuePut>
		osSemaphoreRelease(semaphore);
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <StartDisplayDistanceTask+0xc4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f005 fd38 	bl	80065a0 <osSemaphoreRelease>

		sprintf(&str, "    %d    ", d.distance);
 8000b30:	8bbb      	ldrh	r3, [r7, #28]
 8000b32:	461a      	mov	r2, r3
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	491c      	ldr	r1, [pc, #112]	; (8000bac <StartDisplayDistanceTask+0xc8>)
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f009 f84e 	bl	8009bdc <siprintf>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2+20, str, CENTER_MODE);
 8000b40:	f000 ffec 	bl	8001b1c <BSP_LCD_GetYSize>
 8000b44:	4603      	mov	r3, r0
 8000b46:	085b      	lsrs	r3, r3, #1
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	3314      	adds	r3, #20
 8000b4c:	b299      	uxth	r1, r3
 8000b4e:	f107 0208 	add.w	r2, r7, #8
 8000b52:	2301      	movs	r3, #1
 8000b54:	2000      	movs	r0, #0
 8000b56:	f001 f91b 	bl	8001d90 <BSP_LCD_DisplayStringAt>

		if (d.saved_distance && d.distance < d.saved_distance) {
 8000b5a:	8bfb      	ldrh	r3, [r7, #30]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00f      	beq.n	8000b80 <StartDisplayDistanceTask+0x9c>
 8000b60:	8bba      	ldrh	r2, [r7, #28]
 8000b62:	8bfb      	ldrh	r3, [r7, #30]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d20b      	bcs.n	8000b80 <StartDisplayDistanceTask+0x9c>
			HAL_GPIO_WritePin(LED_PORT, RED_PIN, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6e:	4810      	ldr	r0, [pc, #64]	; (8000bb0 <StartDisplayDistanceTask+0xcc>)
 8000b70:	f003 fa5a 	bl	8004028 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_PORT, GREEN_PIN, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2120      	movs	r1, #32
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <StartDisplayDistanceTask+0xcc>)
 8000b7a:	f003 fa55 	bl	8004028 <HAL_GPIO_WritePin>
 8000b7e:	e00d      	b.n	8000b9c <StartDisplayDistanceTask+0xb8>
		} else if (d.saved_distance) {
 8000b80:	8bfb      	ldrh	r3, [r7, #30]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00a      	beq.n	8000b9c <StartDisplayDistanceTask+0xb8>
			HAL_GPIO_WritePin(LED_PORT, RED_PIN, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <StartDisplayDistanceTask+0xcc>)
 8000b8e:	f003 fa4b 	bl	8004028 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_PORT, GREEN_PIN, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2120      	movs	r1, #32
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <StartDisplayDistanceTask+0xcc>)
 8000b98:	f003 fa46 	bl	8004028 <HAL_GPIO_WritePin>
		}
	}
		osDelay(150);
 8000b9c:	2096      	movs	r0, #150	; 0x96
 8000b9e:	f005 fbcf 	bl	8006340 <osDelay>
		osMessageQueueGet(queue, &d, NULL, osWaitForever);
 8000ba2:	e7a5      	b.n	8000af0 <StartDisplayDistanceTask+0xc>
 8000ba4:	20004b64 	.word	0x20004b64
 8000ba8:	20004b60 	.word	0x20004b60
 8000bac:	0800af4c 	.word	0x0800af4c
 8000bb0:	40022400 	.word	0x40022400

08000bb4 <getRndRect>:
	}
}

Rectangle getRndRect() {
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	uint32_t x = rand()%BSP_LCD_GetXSize();
 8000bbc:	f008 ffce 	bl	8009b5c <rand>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461c      	mov	r4, r3
 8000bc4:	f000 ff9e 	bl	8001b04 <BSP_LCD_GetXSize>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	fbb4 f2f3 	udiv	r2, r4, r3
 8000bce:	fb03 f302 	mul.w	r3, r3, r2
 8000bd2:	1ae3      	subs	r3, r4, r3
 8000bd4:	61fb      	str	r3, [r7, #28]
	uint32_t y = rand()%BSP_LCD_GetYSize()/3;
 8000bd6:	f008 ffc1 	bl	8009b5c <rand>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461c      	mov	r4, r3
 8000bde:	f000 ff9d 	bl	8001b1c <BSP_LCD_GetYSize>
 8000be2:	4603      	mov	r3, r0
 8000be4:	fbb4 f2f3 	udiv	r2, r4, r3
 8000be8:	fb03 f302 	mul.w	r3, r3, r2
 8000bec:	1ae3      	subs	r3, r4, r3
 8000bee:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <getRndRect+0xf8>)
 8000bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf4:	085b      	lsrs	r3, r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
	uint8_t width = 3+rand()%5;
 8000bf8:	f008 ffb0 	bl	8009b5c <rand>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <getRndRect+0xfc>)
 8000c00:	fb83 1302 	smull	r1, r3, r3, r2
 8000c04:	1059      	asrs	r1, r3, #1
 8000c06:	17d3      	asrs	r3, r2, #31
 8000c08:	1ac9      	subs	r1, r1, r3
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	440b      	add	r3, r1
 8000c10:	1ad1      	subs	r1, r2, r3
 8000c12:	b2cb      	uxtb	r3, r1
 8000c14:	3303      	adds	r3, #3
 8000c16:	75fb      	strb	r3, [r7, #23]
	uint8_t height = 7*width+rand()%30;
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	b2dc      	uxtb	r4, r3
 8000c22:	f008 ff9b 	bl	8009b5c <rand>
 8000c26:	4602      	mov	r2, r0
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <getRndRect+0x100>)
 8000c2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c2e:	4413      	add	r3, r2
 8000c30:	1119      	asrs	r1, r3, #4
 8000c32:	17d3      	asrs	r3, r2, #31
 8000c34:	1ac9      	subs	r1, r1, r3
 8000c36:	460b      	mov	r3, r1
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	1a5b      	subs	r3, r3, r1
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	1ad1      	subs	r1, r2, r3
 8000c40:	b2cb      	uxtb	r3, r1
 8000c42:	4423      	add	r3, r4
 8000c44:	75bb      	strb	r3, [r7, #22]
	uint8_t speed = height/3+rand()%20;
 8000c46:	7dbb      	ldrb	r3, [r7, #22]
 8000c48:	4a18      	ldr	r2, [pc, #96]	; (8000cac <getRndRect+0xf8>)
 8000c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4e:	085b      	lsrs	r3, r3, #1
 8000c50:	b2dc      	uxtb	r4, r3
 8000c52:	f008 ff83 	bl	8009b5c <rand>
 8000c56:	4602      	mov	r2, r0
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <getRndRect+0xfc>)
 8000c5a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c5e:	10d9      	asrs	r1, r3, #3
 8000c60:	17d3      	asrs	r3, r2, #31
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	460b      	mov	r3, r1
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	1ad1      	subs	r1, r2, r3
 8000c6e:	b2cb      	uxtb	r3, r1
 8000c70:	4423      	add	r3, r4
 8000c72:	757b      	strb	r3, [r7, #21]

	Rectangle rect = {x, y, width, height, speed};
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	813b      	strh	r3, [r7, #8]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	817b      	strh	r3, [r7, #10]
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	81bb      	strh	r3, [r7, #12]
 8000c86:	7dbb      	ldrb	r3, [r7, #22]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	81fb      	strh	r3, [r7, #14]
 8000c8c:	7d7b      	ldrb	r3, [r7, #21]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	823b      	strh	r3, [r7, #16]
	return rect;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	461a      	mov	r2, r3
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	cb03      	ldmia	r3!, {r0, r1}
 8000c9c:	6010      	str	r0, [r2, #0]
 8000c9e:	6051      	str	r1, [r2, #4]
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	8113      	strh	r3, [r2, #8]

}
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	3724      	adds	r7, #36	; 0x24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	aaaaaaab 	.word	0xaaaaaaab
 8000cb0:	66666667 	.word	0x66666667
 8000cb4:	88888889 	.word	0x88888889

08000cb8 <displayRain>:

void displayRain(void)
{
 8000cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cbc:	b08c      	sub	sp, #48	; 0x30
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	466b      	mov	r3, sp
 8000cc2:	4698      	mov	r8, r3
	uint8_t N_RECTS = 20;
 8000cc4:	2314      	movs	r3, #20
 8000cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Rectangle rects[N_RECTS];
 8000cca:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8000cce:	4633      	mov	r3, r6
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	623b      	str	r3, [r7, #32]
 8000cd4:	b2f4      	uxtb	r4, r6
 8000cd6:	f04f 0500 	mov.w	r5, #0
 8000cda:	4622      	mov	r2, r4
 8000cdc:	462b      	mov	r3, r5
 8000cde:	f04f 0000 	mov.w	r0, #0
 8000ce2:	f04f 0100 	mov.w	r1, #0
 8000ce6:	0099      	lsls	r1, r3, #2
 8000ce8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000cec:	0090      	lsls	r0, r2, #2
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	1912      	adds	r2, r2, r4
 8000cf4:	eb45 0303 	adc.w	r3, r5, r3
 8000cf8:	f04f 0000 	mov.w	r0, #0
 8000cfc:	f04f 0100 	mov.w	r1, #0
 8000d00:	0119      	lsls	r1, r3, #4
 8000d02:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8000d06:	0110      	lsls	r0, r2, #4
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4632      	mov	r2, r6
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	b2f4      	uxtb	r4, r6
 8000d18:	f04f 0500 	mov.w	r5, #0
 8000d1c:	4622      	mov	r2, r4
 8000d1e:	462b      	mov	r3, r5
 8000d20:	f04f 0000 	mov.w	r0, #0
 8000d24:	f04f 0100 	mov.w	r1, #0
 8000d28:	0099      	lsls	r1, r3, #2
 8000d2a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000d2e:	0090      	lsls	r0, r2, #2
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	1912      	adds	r2, r2, r4
 8000d36:	eb45 0303 	adc.w	r3, r5, r3
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	f04f 0100 	mov.w	r1, #0
 8000d42:	0119      	lsls	r1, r3, #4
 8000d44:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8000d48:	0110      	lsls	r0, r2, #4
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	4632      	mov	r2, r6
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	3307      	adds	r3, #7
 8000d5a:	08db      	lsrs	r3, r3, #3
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d62:	466b      	mov	r3, sp
 8000d64:	3301      	adds	r3, #1
 8000d66:	085b      	lsrs	r3, r3, #1
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	61fb      	str	r3, [r7, #28]
	Rectangle rect;

	for (int k=0; k<N_RECTS; k++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d70:	e016      	b.n	8000da0 <displayRain+0xe8>
		rect = getRndRect();
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff1c 	bl	8000bb4 <getRndRect>
		rects[k] = rect;
 8000d7c:	69f9      	ldr	r1, [r7, #28]
 8000d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	440b      	add	r3, r1
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	cb03      	ldmia	r3!, {r0, r1}
 8000d92:	6010      	str	r0, [r2, #0]
 8000d94:	6051      	str	r1, [r2, #4]
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	8113      	strh	r3, [r2, #8]
	for (int k=0; k<N_RECTS; k++) {
 8000d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dbe3      	blt.n	8000d72 <displayRain+0xba>
	}

	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000daa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000dae:	f000 ff83 	bl	8001cb8 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8000db2:	4854      	ldr	r0, [pc, #336]	; (8000f04 <displayRain+0x24c>)
 8000db4:	f000 ff1e 	bl	8001bf4 <BSP_LCD_SetTextColor>
	while(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN));
 8000db8:	bf00      	nop
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4852      	ldr	r0, [pc, #328]	; (8000f08 <displayRain+0x250>)
 8000dbe:	f003 f91b 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f8      	bne.n	8000dba <displayRain+0x102>

	for (;;)
	{
		if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)) {
 8000dc8:	2101      	movs	r1, #1
 8000dca:	484f      	ldr	r0, [pc, #316]	; (8000f08 <displayRain+0x250>)
 8000dcc:	f003 f914 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <displayRain+0x122>
 8000dd6:	46c5      	mov	sp, r8
			return;
 8000dd8:	e090      	b.n	8000efc <displayRain+0x244>
		}
		BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000dda:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000dde:	f000 ff6b 	bl	8001cb8 <BSP_LCD_Clear>

		for (int i=0; i<N_RECTS; i++){
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000de6:	e07f      	b.n	8000ee8 <displayRain+0x230>

			BSP_LCD_FillRect(rects[i].x, rects[i].y, rects[i].width, rects[i].height);
 8000de8:	69f9      	ldr	r1, [r7, #28]
 8000dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	440b      	add	r3, r1
 8000df6:	8818      	ldrh	r0, [r3, #0]
 8000df8:	69f9      	ldr	r1, [r7, #28]
 8000dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	440b      	add	r3, r1
 8000e06:	3302      	adds	r3, #2
 8000e08:	881c      	ldrh	r4, [r3, #0]
 8000e0a:	69f9      	ldr	r1, [r7, #28]
 8000e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	440b      	add	r3, r1
 8000e18:	3304      	adds	r3, #4
 8000e1a:	881d      	ldrh	r5, [r3, #0]
 8000e1c:	69f9      	ldr	r1, [r7, #28]
 8000e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	440b      	add	r3, r1
 8000e2a:	3306      	adds	r3, #6
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	462a      	mov	r2, r5
 8000e30:	4621      	mov	r1, r4
 8000e32:	f001 f88d 	bl	8001f50 <BSP_LCD_FillRect>
			rects[i].y+=rects[i].speed;
 8000e36:	69f9      	ldr	r1, [r7, #28]
 8000e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	440b      	add	r3, r1
 8000e44:	3302      	adds	r3, #2
 8000e46:	8819      	ldrh	r1, [r3, #0]
 8000e48:	69f8      	ldr	r0, [r7, #28]
 8000e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4403      	add	r3, r0
 8000e56:	3308      	adds	r3, #8
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	440b      	add	r3, r1
 8000e5c:	b298      	uxth	r0, r3
 8000e5e:	69f9      	ldr	r1, [r7, #28]
 8000e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	440b      	add	r3, r1
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	4602      	mov	r2, r0
 8000e70:	801a      	strh	r2, [r3, #0]
			if (rects[i].y+rects[i].height >= BSP_LCD_GetYSize()) {
 8000e72:	69f9      	ldr	r1, [r7, #28]
 8000e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	440b      	add	r3, r1
 8000e80:	3302      	adds	r3, #2
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	69f9      	ldr	r1, [r7, #28]
 8000e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	440b      	add	r3, r1
 8000e94:	3306      	adds	r3, #6
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	4403      	add	r3, r0
 8000e9a:	461c      	mov	r4, r3
 8000e9c:	f000 fe3e 	bl	8001b1c <BSP_LCD_GetYSize>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	429c      	cmp	r4, r3
 8000ea4:	d31a      	bcc.n	8000edc <displayRain+0x224>
				rect = getRndRect();
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe83 	bl	8000bb4 <getRndRect>
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	463a      	mov	r2, r7
 8000eb4:	6810      	ldr	r0, [r2, #0]
 8000eb6:	6851      	ldr	r1, [r2, #4]
 8000eb8:	c303      	stmia	r3!, {r0, r1}
 8000eba:	8912      	ldrh	r2, [r2, #8]
 8000ebc:	801a      	strh	r2, [r3, #0]
				rects[i] = rect;
 8000ebe:	69f9      	ldr	r1, [r7, #28]
 8000ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	cb03      	ldmia	r3!, {r0, r1}
 8000ed4:	6010      	str	r0, [r2, #0]
 8000ed6:	6051      	str	r1, [r2, #4]
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	8113      	strh	r3, [r2, #8]
			}
			osDelay(1);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f005 fa2f 	bl	8006340 <osDelay>
		for (int i=0; i<N_RECTS; i++){
 8000ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	f6ff af7a 	blt.w	8000de8 <displayRain+0x130>
		}
		osDelay(10);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f005 fa23 	bl	8006340 <osDelay>
		if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)) {
 8000efa:	e765      	b.n	8000dc8 <displayRain+0x110>
	}
}
 8000efc:	3730      	adds	r7, #48	; 0x30
 8000efe:	46bd      	mov	sp, r7
 8000f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f04:	ff000080 	.word	0xff000080
 8000f08:	40020000 	.word	0x40020000

08000f0c <StartButtonTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartButtonTask(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	unsigned char str[20];
	Distance d;
	uint8_t started = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//	uint32_t start_time;
//	uint32_t end_time;
	uint32_t time;
	for(;;)
    {
		if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)) {
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4847      	ldr	r0, [pc, #284]	; (800103c <StartButtonTask+0x130>)
 8000f1e:	f003 f86b 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 8085 	beq.w	8001034 <StartButtonTask+0x128>
			time=0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
			while(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)){
 8000f2e:	e02b      	b.n	8000f88 <StartButtonTask+0x7c>
				time++;
 8000f30:	6a3b      	ldr	r3, [r7, #32]
 8000f32:	3301      	adds	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
				osDelay(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f005 fa02 	bl	8006340 <osDelay>
				if (time > 2000) {
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f42:	d921      	bls.n	8000f88 <StartButtonTask+0x7c>
					//while(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN));
					if (osSemaphoreAcquire(semaphore, osWaitForever) == osOK) {
 8000f44:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <StartButtonTask+0x134>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 fac1 	bl	80064d4 <osSemaphoreAcquire>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d11f      	bne.n	8000f98 <StartButtonTask+0x8c>
						displayRain();
 8000f58:	f7ff feae 	bl	8000cb8 <displayRain>
						osSemaphoreRelease(semaphore);
 8000f5c:	4b38      	ldr	r3, [pc, #224]	; (8001040 <StartButtonTask+0x134>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 fb1d 	bl	80065a0 <osSemaphoreRelease>
						BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6a:	f000 fea5 	bl	8001cb8 <BSP_LCD_Clear>
						BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2-20, (uint8_t *) "Distance (cm):", CENTER_MODE);
 8000f6e:	f000 fdd5 	bl	8001b1c <BSP_LCD_GetYSize>
 8000f72:	4603      	mov	r3, r0
 8000f74:	085b      	lsrs	r3, r3, #1
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	3b14      	subs	r3, #20
 8000f7a:	b299      	uxth	r1, r3
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	4a31      	ldr	r2, [pc, #196]	; (8001044 <StartButtonTask+0x138>)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 ff05 	bl	8001d90 <BSP_LCD_DisplayStringAt>
//						started = 0;
					}
					break;
 8000f86:	e007      	b.n	8000f98 <StartButtonTask+0x8c>
			while(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)){
 8000f88:	2101      	movs	r1, #1
 8000f8a:	482c      	ldr	r0, [pc, #176]	; (800103c <StartButtonTask+0x130>)
 8000f8c:	f003 f834 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1cc      	bne.n	8000f30 <StartButtonTask+0x24>
 8000f96:	e000      	b.n	8000f9a <StartButtonTask+0x8e>
					break;
 8000f98:	bf00      	nop
				}

			} // Wait to release the button

			if (started) {
 8000f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d030      	beq.n	8001004 <StartButtonTask+0xf8>
				osMessageQueueGet(queue, &d, NULL, osWaitForever);
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <StartButtonTask+0x13c>)
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	f107 0108 	add.w	r1, r7, #8
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f005 fc48 	bl	8006844 <osMessageQueueGet>
				if (osSemaphoreAcquire(semaphore, osWaitForever) == osOK) {
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <StartButtonTask+0x134>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 fa89 	bl	80064d4 <osSemaphoreAcquire>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10e      	bne.n	8000fe6 <StartButtonTask+0xda>
					d.saved_distance = d.distance;
 8000fc8:	893b      	ldrh	r3, [r7, #8]
 8000fca:	817b      	strh	r3, [r7, #10]
					osMessageQueuePut(queue, &d, NULL, 10U);
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <StartButtonTask+0x13c>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	f107 0108 	add.w	r1, r7, #8
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f005 fbc0 	bl	800675c <osMessageQueuePut>
					osSemaphoreRelease(semaphore);
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <StartButtonTask+0x134>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f005 fadd 	bl	80065a0 <osSemaphoreRelease>
				}
				sprintf(&str,"Saved distance: %d    ", d.saved_distance);
 8000fe6:	897b      	ldrh	r3, [r7, #10]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4917      	ldr	r1, [pc, #92]	; (800104c <StartButtonTask+0x140>)
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f008 fdf3 	bl	8009bdc <siprintf>
				BSP_LCD_DisplayStringAtLine(19, str);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2013      	movs	r0, #19
 8000ffe:	f000 ff8f 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
 8001002:	e017      	b.n	8001034 <StartButtonTask+0x128>
	    	} else {
	    		started = 1;
 8001004:	2301      	movs	r3, #1
 8001006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 800100a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800100e:	f000 fe53 	bl	8001cb8 <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2-20, (uint8_t *) "Distance (cm):", CENTER_MODE);
 8001012:	f000 fd83 	bl	8001b1c <BSP_LCD_GetYSize>
 8001016:	4603      	mov	r3, r0
 8001018:	085b      	lsrs	r3, r3, #1
 800101a:	b29b      	uxth	r3, r3
 800101c:	3b14      	subs	r3, #20
 800101e:	b299      	uxth	r1, r3
 8001020:	2301      	movs	r3, #1
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <StartButtonTask+0x138>)
 8001024:	2000      	movs	r0, #0
 8001026:	f000 feb3 	bl	8001d90 <BSP_LCD_DisplayStringAt>
			    osSemaphoreRelease(semaphore);
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <StartButtonTask+0x134>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f005 fab6 	bl	80065a0 <osSemaphoreRelease>
	    	}
	    }
	    osDelay(150);
 8001034:	2096      	movs	r0, #150	; 0x96
 8001036:	f005 f983 	bl	8006340 <osDelay>
		if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)) {
 800103a:	e76e      	b.n	8000f1a <StartButtonTask+0xe>
 800103c:	40020000 	.word	0x40020000
 8001040:	20004b60 	.word	0x20004b60
 8001044:	0800af58 	.word	0x0800af58
 8001048:	20004b64 	.word	0x20004b64
 800104c:	0800af68 	.word	0x0800af68

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001058:	e7fe      	b.n	8001058 <Error_Handler+0x8>
	...

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <HAL_MspInit+0x4c>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	6413      	str	r3, [r2, #64]	; 0x40
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_MspInit+0x4c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_MspInit+0x4c>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	210f      	movs	r1, #15
 8001096:	f06f 0001 	mvn.w	r0, #1
 800109a:	f001 fc7a 	bl	8002992 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_TIM_Base_MspInit+0x38>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d10b      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_TIM_Base_MspInit+0x3c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <HAL_TIM_Base_MspInit+0x3c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_TIM_Base_MspInit+0x3c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40010000 	.word	0x40010000
 80010e8:	40023800 	.word	0x40023800

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <NMI_Handler+0x4>

080010f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <MemManage_Handler+0x4>

080010fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <UsageFault_Handler+0x4>

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f001 fb1a 	bl	8002754 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001120:	f007 fb7e 	bl	8008820 <xTaskGetSchedulerState>
 8001124:	4603      	mov	r3, r0
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800112a:	f008 fa5d 	bl	80095e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}

08001132 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
	return 1;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_kill>:

int _kill(int pid, int sig)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800114c:	f008 fcc6 	bl	8009adc <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	2216      	movs	r2, #22
 8001154:	601a      	str	r2, [r3, #0]
	return -1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_exit>:

void _exit (int status)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800116a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffe7 	bl	8001142 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001174:	e7fe      	b.n	8001174 <_exit+0x12>

08001176 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	e00a      	b.n	800119e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001188:	f3af 8000 	nop.w
 800118c:	4601      	mov	r1, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	60ba      	str	r2, [r7, #8]
 8001194:	b2ca      	uxtb	r2, r1
 8001196:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	dbf0      	blt.n	8001188 <_read+0x12>
	}

return len;
 80011a6:	687b      	ldr	r3, [r7, #4]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	e009      	b.n	80011d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	60ba      	str	r2, [r7, #8]
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dbf1      	blt.n	80011c2 <_write+0x12>
	}
	return len;
 80011de:	687b      	ldr	r3, [r7, #4]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_close>:

int _close(int file)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	return -1;
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001210:	605a      	str	r2, [r3, #4]
	return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_isatty>:

int _isatty(int file)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	return 1;
 8001228:	2301      	movs	r3, #1
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
	return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001258:	4a14      	ldr	r2, [pc, #80]	; (80012ac <_sbrk+0x5c>)
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <_sbrk+0x60>)
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <_sbrk+0x64>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <_sbrk+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	d207      	bcs.n	8001290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001280:	f008 fc2c 	bl	8009adc <__errno>
 8001284:	4603      	mov	r3, r0
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800128e:	e009      	b.n	80012a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <_sbrk+0x64>)
 80012a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a2:	68fb      	ldr	r3, [r7, #12]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20080000 	.word	0x20080000
 80012b0:	00000400 	.word	0x00000400
 80012b4:	200000a8 	.word	0x200000a8
 80012b8:	20004d58 	.word	0x20004d58

080012bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <SystemInit+0x20>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <SystemInit+0x20>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001318 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e4:	480d      	ldr	r0, [pc, #52]	; (800131c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012e6:	490e      	ldr	r1, [pc, #56]	; (8001320 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012fc:	4c0b      	ldr	r4, [pc, #44]	; (800132c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800130a:	f7ff ffd7 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130e:	f008 fbeb 	bl	8009ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001312:	f7ff f97b 	bl	800060c <main>
  bx  lr    
 8001316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001318:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001324:	0800ce44 	.word	0x0800ce44
  ldr r2, =_sbss
 8001328:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800132c:	20004d58 	.word	0x20004d58

08001330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC_IRQHandler>
	...

08001334 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800133e:	49c1      	ldr	r1, [pc, #772]	; (8001644 <OTM8009A_Init+0x310>)
 8001340:	2000      	movs	r0, #0
 8001342:	f000 fe5f 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001346:	49c0      	ldr	r1, [pc, #768]	; (8001648 <OTM8009A_Init+0x314>)
 8001348:	2003      	movs	r0, #3
 800134a:	f000 fe5b 	bl	8002004 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800134e:	49bf      	ldr	r1, [pc, #764]	; (800164c <OTM8009A_Init+0x318>)
 8001350:	2000      	movs	r0, #0
 8001352:	f000 fe57 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001356:	49be      	ldr	r1, [pc, #760]	; (8001650 <OTM8009A_Init+0x31c>)
 8001358:	2002      	movs	r0, #2
 800135a:	f000 fe53 	bl	8002004 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800135e:	49bb      	ldr	r1, [pc, #748]	; (800164c <OTM8009A_Init+0x318>)
 8001360:	2000      	movs	r0, #0
 8001362:	f000 fe4f 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001366:	49bb      	ldr	r1, [pc, #748]	; (8001654 <OTM8009A_Init+0x320>)
 8001368:	2000      	movs	r0, #0
 800136a:	f000 fe4b 	bl	8002004 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800136e:	200a      	movs	r0, #10
 8001370:	f000 fa38 	bl	80017e4 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001374:	49b8      	ldr	r1, [pc, #736]	; (8001658 <OTM8009A_Init+0x324>)
 8001376:	2000      	movs	r0, #0
 8001378:	f000 fe44 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 800137c:	49b7      	ldr	r1, [pc, #732]	; (800165c <OTM8009A_Init+0x328>)
 800137e:	2000      	movs	r0, #0
 8001380:	f000 fe40 	bl	8002004 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8001384:	200a      	movs	r0, #10
 8001386:	f000 fa2d 	bl	80017e4 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800138a:	49b5      	ldr	r1, [pc, #724]	; (8001660 <OTM8009A_Init+0x32c>)
 800138c:	2000      	movs	r0, #0
 800138e:	f000 fe39 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001392:	49b4      	ldr	r1, [pc, #720]	; (8001664 <OTM8009A_Init+0x330>)
 8001394:	2000      	movs	r0, #0
 8001396:	f000 fe35 	bl	8002004 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800139a:	49b3      	ldr	r1, [pc, #716]	; (8001668 <OTM8009A_Init+0x334>)
 800139c:	2000      	movs	r0, #0
 800139e:	f000 fe31 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80013a2:	49b2      	ldr	r1, [pc, #712]	; (800166c <OTM8009A_Init+0x338>)
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 fe2d 	bl	8002004 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80013aa:	49b1      	ldr	r1, [pc, #708]	; (8001670 <OTM8009A_Init+0x33c>)
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 fe29 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80013b2:	49b0      	ldr	r1, [pc, #704]	; (8001674 <OTM8009A_Init+0x340>)
 80013b4:	2000      	movs	r0, #0
 80013b6:	f000 fe25 	bl	8002004 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80013ba:	49a2      	ldr	r1, [pc, #648]	; (8001644 <OTM8009A_Init+0x310>)
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 fe21 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80013c2:	49ad      	ldr	r1, [pc, #692]	; (8001678 <OTM8009A_Init+0x344>)
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 fe1d 	bl	8002004 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80013ca:	49ac      	ldr	r1, [pc, #688]	; (800167c <OTM8009A_Init+0x348>)
 80013cc:	2000      	movs	r0, #0
 80013ce:	f000 fe19 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80013d2:	49ab      	ldr	r1, [pc, #684]	; (8001680 <OTM8009A_Init+0x34c>)
 80013d4:	2000      	movs	r0, #0
 80013d6:	f000 fe15 	bl	8002004 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80013da:	49aa      	ldr	r1, [pc, #680]	; (8001684 <OTM8009A_Init+0x350>)
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 fe11 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80013e2:	49a9      	ldr	r1, [pc, #676]	; (8001688 <OTM8009A_Init+0x354>)
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 fe0d 	bl	8002004 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80013ea:	49a8      	ldr	r1, [pc, #672]	; (800168c <OTM8009A_Init+0x358>)
 80013ec:	2000      	movs	r0, #0
 80013ee:	f000 fe09 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80013f2:	49a7      	ldr	r1, [pc, #668]	; (8001690 <OTM8009A_Init+0x35c>)
 80013f4:	2000      	movs	r0, #0
 80013f6:	f000 fe05 	bl	8002004 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80013fa:	49a6      	ldr	r1, [pc, #664]	; (8001694 <OTM8009A_Init+0x360>)
 80013fc:	2000      	movs	r0, #0
 80013fe:	f000 fe01 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001402:	499a      	ldr	r1, [pc, #616]	; (800166c <OTM8009A_Init+0x338>)
 8001404:	2000      	movs	r0, #0
 8001406:	f000 fdfd 	bl	8002004 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800140a:	498e      	ldr	r1, [pc, #568]	; (8001644 <OTM8009A_Init+0x310>)
 800140c:	2000      	movs	r0, #0
 800140e:	f000 fdf9 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001412:	49a1      	ldr	r1, [pc, #644]	; (8001698 <OTM8009A_Init+0x364>)
 8001414:	2002      	movs	r0, #2
 8001416:	f000 fdf5 	bl	8002004 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800141a:	49a0      	ldr	r1, [pc, #640]	; (800169c <OTM8009A_Init+0x368>)
 800141c:	2000      	movs	r0, #0
 800141e:	f000 fdf1 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001422:	499f      	ldr	r1, [pc, #636]	; (80016a0 <OTM8009A_Init+0x36c>)
 8001424:	2000      	movs	r0, #0
 8001426:	f000 fded 	bl	8002004 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800142a:	499e      	ldr	r1, [pc, #632]	; (80016a4 <OTM8009A_Init+0x370>)
 800142c:	2000      	movs	r0, #0
 800142e:	f000 fde9 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001432:	499d      	ldr	r1, [pc, #628]	; (80016a8 <OTM8009A_Init+0x374>)
 8001434:	2000      	movs	r0, #0
 8001436:	f000 fde5 	bl	8002004 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800143a:	499c      	ldr	r1, [pc, #624]	; (80016ac <OTM8009A_Init+0x378>)
 800143c:	2000      	movs	r0, #0
 800143e:	f000 fde1 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001442:	499b      	ldr	r1, [pc, #620]	; (80016b0 <OTM8009A_Init+0x37c>)
 8001444:	2000      	movs	r0, #0
 8001446:	f000 fddd 	bl	8002004 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800144a:	498c      	ldr	r1, [pc, #560]	; (800167c <OTM8009A_Init+0x348>)
 800144c:	2000      	movs	r0, #0
 800144e:	f000 fdd9 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001452:	4998      	ldr	r1, [pc, #608]	; (80016b4 <OTM8009A_Init+0x380>)
 8001454:	2000      	movs	r0, #0
 8001456:	f000 fdd5 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800145a:	498a      	ldr	r1, [pc, #552]	; (8001684 <OTM8009A_Init+0x350>)
 800145c:	2000      	movs	r0, #0
 800145e:	f000 fdd1 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001462:	4995      	ldr	r1, [pc, #596]	; (80016b8 <OTM8009A_Init+0x384>)
 8001464:	2000      	movs	r0, #0
 8001466:	f000 fdcd 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800146a:	4994      	ldr	r1, [pc, #592]	; (80016bc <OTM8009A_Init+0x388>)
 800146c:	2000      	movs	r0, #0
 800146e:	f000 fdc9 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001472:	4993      	ldr	r1, [pc, #588]	; (80016c0 <OTM8009A_Init+0x38c>)
 8001474:	2002      	movs	r0, #2
 8001476:	f000 fdc5 	bl	8002004 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800147a:	4974      	ldr	r1, [pc, #464]	; (800164c <OTM8009A_Init+0x318>)
 800147c:	2000      	movs	r0, #0
 800147e:	f000 fdc1 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001482:	4990      	ldr	r1, [pc, #576]	; (80016c4 <OTM8009A_Init+0x390>)
 8001484:	2006      	movs	r0, #6
 8001486:	f000 fdbd 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800148a:	498f      	ldr	r1, [pc, #572]	; (80016c8 <OTM8009A_Init+0x394>)
 800148c:	2000      	movs	r0, #0
 800148e:	f000 fdb9 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001492:	498e      	ldr	r1, [pc, #568]	; (80016cc <OTM8009A_Init+0x398>)
 8001494:	200e      	movs	r0, #14
 8001496:	f000 fdb5 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800149a:	498d      	ldr	r1, [pc, #564]	; (80016d0 <OTM8009A_Init+0x39c>)
 800149c:	2000      	movs	r0, #0
 800149e:	f000 fdb1 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80014a2:	498c      	ldr	r1, [pc, #560]	; (80016d4 <OTM8009A_Init+0x3a0>)
 80014a4:	200e      	movs	r0, #14
 80014a6:	f000 fdad 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80014aa:	498b      	ldr	r1, [pc, #556]	; (80016d8 <OTM8009A_Init+0x3a4>)
 80014ac:	2000      	movs	r0, #0
 80014ae:	f000 fda9 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80014b2:	498a      	ldr	r1, [pc, #552]	; (80016dc <OTM8009A_Init+0x3a8>)
 80014b4:	200a      	movs	r0, #10
 80014b6:	f000 fda5 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80014ba:	4989      	ldr	r1, [pc, #548]	; (80016e0 <OTM8009A_Init+0x3ac>)
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 fda1 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80014c2:	4988      	ldr	r1, [pc, #544]	; (80016e4 <OTM8009A_Init+0x3b0>)
 80014c4:	2000      	movs	r0, #0
 80014c6:	f000 fd9d 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80014ca:	4960      	ldr	r1, [pc, #384]	; (800164c <OTM8009A_Init+0x318>)
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 fd99 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80014d2:	4985      	ldr	r1, [pc, #532]	; (80016e8 <OTM8009A_Init+0x3b4>)
 80014d4:	200a      	movs	r0, #10
 80014d6:	f000 fd95 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80014da:	4984      	ldr	r1, [pc, #528]	; (80016ec <OTM8009A_Init+0x3b8>)
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 fd91 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80014e2:	4983      	ldr	r1, [pc, #524]	; (80016f0 <OTM8009A_Init+0x3bc>)
 80014e4:	200f      	movs	r0, #15
 80014e6:	f000 fd8d 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80014ea:	4977      	ldr	r1, [pc, #476]	; (80016c8 <OTM8009A_Init+0x394>)
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 fd89 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80014f2:	4980      	ldr	r1, [pc, #512]	; (80016f4 <OTM8009A_Init+0x3c0>)
 80014f4:	200f      	movs	r0, #15
 80014f6:	f000 fd85 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80014fa:	4975      	ldr	r1, [pc, #468]	; (80016d0 <OTM8009A_Init+0x39c>)
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 fd81 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001502:	497d      	ldr	r1, [pc, #500]	; (80016f8 <OTM8009A_Init+0x3c4>)
 8001504:	200a      	movs	r0, #10
 8001506:	f000 fd7d 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800150a:	4973      	ldr	r1, [pc, #460]	; (80016d8 <OTM8009A_Init+0x3a4>)
 800150c:	2000      	movs	r0, #0
 800150e:	f000 fd79 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001512:	497a      	ldr	r1, [pc, #488]	; (80016fc <OTM8009A_Init+0x3c8>)
 8001514:	200f      	movs	r0, #15
 8001516:	f000 fd75 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800151a:	4971      	ldr	r1, [pc, #452]	; (80016e0 <OTM8009A_Init+0x3ac>)
 800151c:	2000      	movs	r0, #0
 800151e:	f000 fd71 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001522:	4977      	ldr	r1, [pc, #476]	; (8001700 <OTM8009A_Init+0x3cc>)
 8001524:	200f      	movs	r0, #15
 8001526:	f000 fd6d 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800152a:	4976      	ldr	r1, [pc, #472]	; (8001704 <OTM8009A_Init+0x3d0>)
 800152c:	2000      	movs	r0, #0
 800152e:	f000 fd69 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001532:	4975      	ldr	r1, [pc, #468]	; (8001708 <OTM8009A_Init+0x3d4>)
 8001534:	200a      	movs	r0, #10
 8001536:	f000 fd65 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800153a:	4974      	ldr	r1, [pc, #464]	; (800170c <OTM8009A_Init+0x3d8>)
 800153c:	2000      	movs	r0, #0
 800153e:	f000 fd61 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001542:	4973      	ldr	r1, [pc, #460]	; (8001710 <OTM8009A_Init+0x3dc>)
 8001544:	200a      	movs	r0, #10
 8001546:	f000 fd5d 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800154a:	4940      	ldr	r1, [pc, #256]	; (800164c <OTM8009A_Init+0x318>)
 800154c:	2000      	movs	r0, #0
 800154e:	f000 fd59 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001552:	4970      	ldr	r1, [pc, #448]	; (8001714 <OTM8009A_Init+0x3e0>)
 8001554:	200a      	movs	r0, #10
 8001556:	f000 fd55 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800155a:	4964      	ldr	r1, [pc, #400]	; (80016ec <OTM8009A_Init+0x3b8>)
 800155c:	2000      	movs	r0, #0
 800155e:	f000 fd51 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001562:	496d      	ldr	r1, [pc, #436]	; (8001718 <OTM8009A_Init+0x3e4>)
 8001564:	200f      	movs	r0, #15
 8001566:	f000 fd4d 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800156a:	4957      	ldr	r1, [pc, #348]	; (80016c8 <OTM8009A_Init+0x394>)
 800156c:	2000      	movs	r0, #0
 800156e:	f000 fd49 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001572:	496a      	ldr	r1, [pc, #424]	; (800171c <OTM8009A_Init+0x3e8>)
 8001574:	200f      	movs	r0, #15
 8001576:	f000 fd45 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800157a:	4955      	ldr	r1, [pc, #340]	; (80016d0 <OTM8009A_Init+0x39c>)
 800157c:	2000      	movs	r0, #0
 800157e:	f000 fd41 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001582:	4967      	ldr	r1, [pc, #412]	; (8001720 <OTM8009A_Init+0x3ec>)
 8001584:	200a      	movs	r0, #10
 8001586:	f000 fd3d 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800158a:	4953      	ldr	r1, [pc, #332]	; (80016d8 <OTM8009A_Init+0x3a4>)
 800158c:	2000      	movs	r0, #0
 800158e:	f000 fd39 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001592:	4964      	ldr	r1, [pc, #400]	; (8001724 <OTM8009A_Init+0x3f0>)
 8001594:	200f      	movs	r0, #15
 8001596:	f000 fd35 	bl	8002004 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800159a:	4951      	ldr	r1, [pc, #324]	; (80016e0 <OTM8009A_Init+0x3ac>)
 800159c:	2000      	movs	r0, #0
 800159e:	f000 fd31 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80015a2:	4961      	ldr	r1, [pc, #388]	; (8001728 <OTM8009A_Init+0x3f4>)
 80015a4:	200f      	movs	r0, #15
 80015a6:	f000 fd2d 	bl	8002004 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80015aa:	4934      	ldr	r1, [pc, #208]	; (800167c <OTM8009A_Init+0x348>)
 80015ac:	2000      	movs	r0, #0
 80015ae:	f000 fd29 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80015b2:	495e      	ldr	r1, [pc, #376]	; (800172c <OTM8009A_Init+0x3f8>)
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 fd25 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80015ba:	495d      	ldr	r1, [pc, #372]	; (8001730 <OTM8009A_Init+0x3fc>)
 80015bc:	2000      	movs	r0, #0
 80015be:	f000 fd21 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80015c2:	495c      	ldr	r1, [pc, #368]	; (8001734 <OTM8009A_Init+0x400>)
 80015c4:	2000      	movs	r0, #0
 80015c6:	f000 fd1d 	bl	8002004 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80015ca:	495b      	ldr	r1, [pc, #364]	; (8001738 <OTM8009A_Init+0x404>)
 80015cc:	2000      	movs	r0, #0
 80015ce:	f000 fd19 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80015d2:	495a      	ldr	r1, [pc, #360]	; (800173c <OTM8009A_Init+0x408>)
 80015d4:	2000      	movs	r0, #0
 80015d6:	f000 fd15 	bl	8002004 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80015da:	491a      	ldr	r1, [pc, #104]	; (8001644 <OTM8009A_Init+0x310>)
 80015dc:	2000      	movs	r0, #0
 80015de:	f000 fd11 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80015e2:	4957      	ldr	r1, [pc, #348]	; (8001740 <OTM8009A_Init+0x40c>)
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 fd0d 	bl	8002004 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80015ea:	4916      	ldr	r1, [pc, #88]	; (8001644 <OTM8009A_Init+0x310>)
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 fd09 	bl	8002004 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80015f2:	4914      	ldr	r1, [pc, #80]	; (8001644 <OTM8009A_Init+0x310>)
 80015f4:	2000      	movs	r0, #0
 80015f6:	f000 fd05 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80015fa:	4952      	ldr	r1, [pc, #328]	; (8001744 <OTM8009A_Init+0x410>)
 80015fc:	2010      	movs	r0, #16
 80015fe:	f000 fd01 	bl	8002004 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001602:	4910      	ldr	r1, [pc, #64]	; (8001644 <OTM8009A_Init+0x310>)
 8001604:	2000      	movs	r0, #0
 8001606:	f000 fcfd 	bl	8002004 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 800160a:	494f      	ldr	r1, [pc, #316]	; (8001748 <OTM8009A_Init+0x414>)
 800160c:	2010      	movs	r0, #16
 800160e:	f000 fcf9 	bl	8002004 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001612:	494e      	ldr	r1, [pc, #312]	; (800174c <OTM8009A_Init+0x418>)
 8001614:	2000      	movs	r0, #0
 8001616:	f000 fcf5 	bl	8002004 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 800161a:	2078      	movs	r0, #120	; 0x78
 800161c:	f000 f8e2 	bl	80017e4 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d008      	beq.n	8001638 <OTM8009A_Init+0x304>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b02      	cmp	r3, #2
 800162a:	f040 8095 	bne.w	8001758 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800162e:	4948      	ldr	r1, [pc, #288]	; (8001750 <OTM8009A_Init+0x41c>)
 8001630:	2000      	movs	r0, #0
 8001632:	f000 fce7 	bl	8002004 <DSI_IO_WriteCmd>
    break;
 8001636:	e090      	b.n	800175a <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001638:	4946      	ldr	r1, [pc, #280]	; (8001754 <OTM8009A_Init+0x420>)
 800163a:	2000      	movs	r0, #0
 800163c:	f000 fce2 	bl	8002004 <DSI_IO_WriteCmd>
    break;
 8001640:	e08b      	b.n	800175a <OTM8009A_Init+0x426>
 8001642:	bf00      	nop
 8001644:	0800b15c 	.word	0x0800b15c
 8001648:	0800b014 	.word	0x0800b014
 800164c:	0800b160 	.word	0x0800b160
 8001650:	0800b018 	.word	0x0800b018
 8001654:	0800b164 	.word	0x0800b164
 8001658:	0800b168 	.word	0x0800b168
 800165c:	0800b16c 	.word	0x0800b16c
 8001660:	0800b170 	.word	0x0800b170
 8001664:	0800b174 	.word	0x0800b174
 8001668:	0800b178 	.word	0x0800b178
 800166c:	0800b17c 	.word	0x0800b17c
 8001670:	0800b180 	.word	0x0800b180
 8001674:	0800b184 	.word	0x0800b184
 8001678:	0800b188 	.word	0x0800b188
 800167c:	0800b18c 	.word	0x0800b18c
 8001680:	0800b190 	.word	0x0800b190
 8001684:	0800b194 	.word	0x0800b194
 8001688:	0800b198 	.word	0x0800b198
 800168c:	0800b19c 	.word	0x0800b19c
 8001690:	0800b1a0 	.word	0x0800b1a0
 8001694:	0800b1a4 	.word	0x0800b1a4
 8001698:	0800b044 	.word	0x0800b044
 800169c:	0800b1a8 	.word	0x0800b1a8
 80016a0:	0800b1ac 	.word	0x0800b1ac
 80016a4:	0800b1b0 	.word	0x0800b1b0
 80016a8:	0800b1b4 	.word	0x0800b1b4
 80016ac:	0800b1b8 	.word	0x0800b1b8
 80016b0:	0800b1bc 	.word	0x0800b1bc
 80016b4:	0800b1c0 	.word	0x0800b1c0
 80016b8:	0800b1c4 	.word	0x0800b1c4
 80016bc:	0800b1c8 	.word	0x0800b1c8
 80016c0:	0800b048 	.word	0x0800b048
 80016c4:	0800b04c 	.word	0x0800b04c
 80016c8:	0800b1cc 	.word	0x0800b1cc
 80016cc:	0800b054 	.word	0x0800b054
 80016d0:	0800b1d0 	.word	0x0800b1d0
 80016d4:	0800b064 	.word	0x0800b064
 80016d8:	0800b1d4 	.word	0x0800b1d4
 80016dc:	0800b074 	.word	0x0800b074
 80016e0:	0800b1d8 	.word	0x0800b1d8
 80016e4:	0800b210 	.word	0x0800b210
 80016e8:	0800b080 	.word	0x0800b080
 80016ec:	0800b1dc 	.word	0x0800b1dc
 80016f0:	0800b08c 	.word	0x0800b08c
 80016f4:	0800b09c 	.word	0x0800b09c
 80016f8:	0800b0ac 	.word	0x0800b0ac
 80016fc:	0800b0b8 	.word	0x0800b0b8
 8001700:	0800b0c8 	.word	0x0800b0c8
 8001704:	0800b1e0 	.word	0x0800b1e0
 8001708:	0800b0d8 	.word	0x0800b0d8
 800170c:	0800b1e4 	.word	0x0800b1e4
 8001710:	0800b0e4 	.word	0x0800b0e4
 8001714:	0800b0f0 	.word	0x0800b0f0
 8001718:	0800b0fc 	.word	0x0800b0fc
 800171c:	0800b10c 	.word	0x0800b10c
 8001720:	0800b11c 	.word	0x0800b11c
 8001724:	0800b128 	.word	0x0800b128
 8001728:	0800b138 	.word	0x0800b138
 800172c:	0800b214 	.word	0x0800b214
 8001730:	0800b218 	.word	0x0800b218
 8001734:	0800b21c 	.word	0x0800b21c
 8001738:	0800b220 	.word	0x0800b220
 800173c:	0800b224 	.word	0x0800b224
 8001740:	0800b148 	.word	0x0800b148
 8001744:	0800b01c 	.word	0x0800b01c
 8001748:	0800b030 	.word	0x0800b030
 800174c:	0800b1e8 	.word	0x0800b1e8
 8001750:	0800b1ec 	.word	0x0800b1ec
 8001754:	0800b1f0 	.word	0x0800b1f0
  default :
    break;
 8001758:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d10b      	bne.n	8001778 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001760:	4916      	ldr	r1, [pc, #88]	; (80017bc <OTM8009A_Init+0x488>)
 8001762:	2000      	movs	r0, #0
 8001764:	f000 fc4e 	bl	8002004 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8001768:	4915      	ldr	r1, [pc, #84]	; (80017c0 <OTM8009A_Init+0x48c>)
 800176a:	2004      	movs	r0, #4
 800176c:	f000 fc4a 	bl	8002004 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001770:	4914      	ldr	r1, [pc, #80]	; (80017c4 <OTM8009A_Init+0x490>)
 8001772:	2004      	movs	r0, #4
 8001774:	f000 fc46 	bl	8002004 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8001778:	4913      	ldr	r1, [pc, #76]	; (80017c8 <OTM8009A_Init+0x494>)
 800177a:	2000      	movs	r0, #0
 800177c:	f000 fc42 	bl	8002004 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001780:	4912      	ldr	r1, [pc, #72]	; (80017cc <OTM8009A_Init+0x498>)
 8001782:	2000      	movs	r0, #0
 8001784:	f000 fc3e 	bl	8002004 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8001788:	4911      	ldr	r1, [pc, #68]	; (80017d0 <OTM8009A_Init+0x49c>)
 800178a:	2000      	movs	r0, #0
 800178c:	f000 fc3a 	bl	8002004 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001790:	4910      	ldr	r1, [pc, #64]	; (80017d4 <OTM8009A_Init+0x4a0>)
 8001792:	2000      	movs	r0, #0
 8001794:	f000 fc36 	bl	8002004 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8001798:	490f      	ldr	r1, [pc, #60]	; (80017d8 <OTM8009A_Init+0x4a4>)
 800179a:	2000      	movs	r0, #0
 800179c:	f000 fc32 	bl	8002004 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80017a0:	490e      	ldr	r1, [pc, #56]	; (80017dc <OTM8009A_Init+0x4a8>)
 80017a2:	2000      	movs	r0, #0
 80017a4:	f000 fc2e 	bl	8002004 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80017a8:	490d      	ldr	r1, [pc, #52]	; (80017e0 <OTM8009A_Init+0x4ac>)
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 fc2a 	bl	8002004 <DSI_IO_WriteCmd>

  return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	0800b1f4 	.word	0x0800b1f4
 80017c0:	0800b14c 	.word	0x0800b14c
 80017c4:	0800b154 	.word	0x0800b154
 80017c8:	0800b1f8 	.word	0x0800b1f8
 80017cc:	0800b1fc 	.word	0x0800b1fc
 80017d0:	0800b200 	.word	0x0800b200
 80017d4:	0800b204 	.word	0x0800b204
 80017d8:	0800b208 	.word	0x0800b208
 80017dc:	0800b15c 	.word	0x0800b15c
 80017e0:	0800b20c 	.word	0x0800b20c

080017e4 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 ffd1 	bl	8002794 <HAL_Delay>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 f804 	bl	800180c <BSP_LCD_InitEx>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b090      	sub	sp, #64	; 0x40
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8001816:	f646 3325 	movw	r3, #27429	; 0x6b25
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8001824:	f000 f936 	bl	8001a94 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8001828:	f000 fc16 	bl	8002058 <LCD_IO_GetID>
 800182c:	4603      	mov	r3, r0
 800182e:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8001830:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001832:	2b11      	cmp	r3, #17
 8001834:	d001      	beq.n	800183a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8001836:	2301      	movs	r3, #1
 8001838:	e113      	b.n	8001a62 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800183a:	f000 fc15 	bl	8002068 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800183e:	4b8b      	ldr	r3, [pc, #556]	; (8001a6c <BSP_LCD_InitEx+0x260>)
 8001840:	4a8b      	ldr	r2, [pc, #556]	; (8001a70 <BSP_LCD_InitEx+0x264>)
 8001842:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8001844:	4889      	ldr	r0, [pc, #548]	; (8001a6c <BSP_LCD_InitEx+0x260>)
 8001846:	f001 fead 	bl	80035a4 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800184a:	2364      	movs	r3, #100	; 0x64
 800184c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800184e:	2305      	movs	r3, #5
 8001850:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8001856:	f24f 4324 	movw	r3, #62500	; 0xf424
 800185a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800185c:	4b83      	ldr	r3, [pc, #524]	; (8001a6c <BSP_LCD_InitEx+0x260>)
 800185e:	2201      	movs	r2, #1
 8001860:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	4a83      	ldr	r2, [pc, #524]	; (8001a74 <BSP_LCD_InitEx+0x268>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	0a9b      	lsrs	r3, r3, #10
 800186e:	4a7f      	ldr	r2, [pc, #508]	; (8001a6c <BSP_LCD_InitEx+0x260>)
 8001870:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4619      	mov	r1, r3
 8001878:	487c      	ldr	r0, [pc, #496]	; (8001a6c <BSP_LCD_InitEx+0x260>)
 800187a:	f001 fd79 	bl	8003370 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d108      	bne.n	8001896 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001884:	4b7c      	ldr	r3, [pc, #496]	; (8001a78 <BSP_LCD_InitEx+0x26c>)
 8001886:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800188a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800188c:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <BSP_LCD_InitEx+0x270>)
 800188e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e007      	b.n	80018a6 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001896:	4b78      	ldr	r3, [pc, #480]	; (8001a78 <BSP_LCD_InitEx+0x26c>)
 8001898:	f44f 7248 	mov.w	r2, #800	; 0x320
 800189c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800189e:	4b77      	ldr	r3, [pc, #476]	; (8001a7c <BSP_LCD_InitEx+0x270>)
 80018a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018a4:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 80018a6:	4b74      	ldr	r3, [pc, #464]	; (8001a78 <BSP_LCD_InitEx+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80018ac:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <BSP_LCD_InitEx+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80018b2:	2301      	movs	r3, #1
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80018b6:	230f      	movs	r3, #15
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80018ba:	2310      	movs	r3, #16
 80018bc:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 80018be:	2302      	movs	r3, #2
 80018c0:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80018c2:	2322      	movs	r3, #34	; 0x22
 80018c4:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80018c6:	2322      	movs	r3, #34	; 0x22
 80018c8:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80018ca:	4b6d      	ldr	r3, [pc, #436]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80018d0:	4b6b      	ldr	r3, [pc, #428]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 80018d2:	2205      	movs	r2, #5
 80018d4:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80018d6:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80018dc:	4b68      	ldr	r3, [pc, #416]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80018e2:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80018e8:	4b65      	ldr	r3, [pc, #404]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 80018ea:	2202      	movs	r2, #2
 80018ec:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80018ee:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 80018f0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80018f4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80018f6:	4b62      	ldr	r3, [pc, #392]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80018fc:	4a60      	ldr	r2, [pc, #384]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 80018fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001900:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001906:	fb02 f203 	mul.w	r2, r2, r3
 800190a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001910:	4a5b      	ldr	r2, [pc, #364]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 8001912:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001918:	fb02 f203 	mul.w	r2, r2, r3
 800191c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4a57      	ldr	r2, [pc, #348]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 8001924:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8001926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	441a      	add	r2, r3
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	441a      	add	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	4413      	add	r3, r2
 8001934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001936:	fb02 f203 	mul.w	r2, r2, r3
 800193a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	4a4f      	ldr	r2, [pc, #316]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 8001942:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001944:	4a4e      	ldr	r2, [pc, #312]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800194a:	4a4d      	ldr	r2, [pc, #308]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001950:	4a4b      	ldr	r2, [pc, #300]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001956:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800195c:	4b48      	ldr	r3, [pc, #288]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 800195e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001962:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001964:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 8001966:	2210      	movs	r2, #16
 8001968:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800196a:	4b45      	ldr	r3, [pc, #276]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 800196c:	2200      	movs	r2, #0
 800196e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001970:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 8001972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001976:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001978:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 800197a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800197e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001980:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 8001982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001986:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001988:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 800198a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001990:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 8001992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001996:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001998:	4b39      	ldr	r3, [pc, #228]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 800199a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80019a0:	4937      	ldr	r1, [pc, #220]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 80019a2:	4832      	ldr	r0, [pc, #200]	; (8001a6c <BSP_LCD_InitEx+0x260>)
 80019a4:	f001 fe86 	bl	80036b4 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	4a35      	ldr	r2, [pc, #212]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 80019ae:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4413      	add	r3, r2
 80019b6:	3b01      	subs	r3, #1
 80019b8:	4a32      	ldr	r2, [pc, #200]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 80019ba:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <BSP_LCD_InitEx+0x26c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	441a      	add	r2, r3
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	4413      	add	r3, r2
 80019c8:	3b01      	subs	r3, #1
 80019ca:	4a2e      	ldr	r2, [pc, #184]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 80019cc:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <BSP_LCD_InitEx+0x26c>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	441a      	add	r2, r3
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	441a      	add	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	4413      	add	r3, r2
 80019de:	3b01      	subs	r3, #1
 80019e0:	4a28      	ldr	r2, [pc, #160]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 80019e2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <BSP_LCD_InitEx+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 80019ea:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <BSP_LCD_InitEx+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a24      	ldr	r2, [pc, #144]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 80019f2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <BSP_LCD_InitEx+0x27c>)
 80019f6:	2208      	movs	r2, #8
 80019f8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <BSP_LCD_InitEx+0x27c>)
 80019fc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a00:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <BSP_LCD_InitEx+0x27c>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <BSP_LCD_InitEx+0x27c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001a0e:	481e      	ldr	r0, [pc, #120]	; (8001a88 <BSP_LCD_InitEx+0x27c>)
 8001a10:	f003 fac6 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 8001a34:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <BSP_LCD_InitEx+0x280>)
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001a38:	4911      	ldr	r1, [pc, #68]	; (8001a80 <BSP_LCD_InitEx+0x274>)
 8001a3a:	4812      	ldr	r0, [pc, #72]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 8001a3c:	f002 fdc0 	bl	80045c0 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001a40:	4810      	ldr	r0, [pc, #64]	; (8001a84 <BSP_LCD_InitEx+0x278>)
 8001a42:	f002 fb0b 	bl	800405c <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8001a46:	4809      	ldr	r0, [pc, #36]	; (8001a6c <BSP_LCD_InitEx+0x260>)
 8001a48:	f002 f834 	bl	8003ab4 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001a4c:	f000 fc8c 	bl	8002368 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001a50:	480f      	ldr	r0, [pc, #60]	; (8001a90 <BSP_LCD_InitEx+0x284>)
 8001a52:	f000 f901 	bl	8001c58 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff fc6a 	bl	8001334 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3740      	adds	r7, #64	; 0x40
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20004cb4 	.word	0x20004cb4
 8001a70:	40016c00 	.word	0x40016c00
 8001a74:	43215e57 	.word	0x43215e57
 8001a78:	2000000c 	.word	0x2000000c
 8001a7c:	20000010 	.word	0x20000010
 8001a80:	200000ac 	.word	0x200000ac
 8001a84:	20004c0c 	.word	0x20004c0c
 8001a88:	20000134 	.word	0x20000134
 8001a8c:	40016800 	.word	0x40016800
 8001a90:	20000004 	.word	0x20000004

08001a94 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <BSP_LCD_Reset+0x68>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <BSP_LCD_Reset+0x68>)
 8001aa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <BSP_LCD_Reset+0x68>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ab6:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <BSP_LCD_Reset+0x6c>)
 8001aca:	f002 f8e9 	bl	8003ca0 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ad4:	480a      	ldr	r0, [pc, #40]	; (8001b00 <BSP_LCD_Reset+0x6c>)
 8001ad6:	f002 faa7 	bl	8004028 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8001ada:	2014      	movs	r0, #20
 8001adc:	f000 fe5a 	bl	8002794 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <BSP_LCD_Reset+0x6c>)
 8001ae8:	f002 fa9e 	bl	8004028 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8001aec:	200a      	movs	r0, #10
 8001aee:	f000 fe51 	bl	8002794 <HAL_Delay>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40022400 	.word	0x40022400

08001b04 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <BSP_LCD_GetXSize+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	2000000c 	.word	0x2000000c

08001b1c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <BSP_LCD_GetYSize+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000010 	.word	0x20000010

08001b34 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b090      	sub	sp, #64	; 0x40
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001b44:	f7ff ffde 	bl	8001b04 <BSP_LCD_GetXSize>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001b50:	f7ff ffe4 	bl	8001b1c <BSP_LCD_GetYSize>
 8001b54:	4603      	mov	r3, r0
 8001b56:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001b60:	23ff      	movs	r3, #255	; 0xff
 8001b62:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b80:	2307      	movs	r3, #7
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001b84:	f7ff ffbe 	bl	8001b04 <BSP_LCD_GetXSize>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001b8c:	f7ff ffc6 	bl	8001b1c <BSP_LCD_GetYSize>
 8001b90:	4603      	mov	r3, r0
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4812      	ldr	r0, [pc, #72]	; (8001be8 <BSP_LCD_LayerDefaultInit+0xb4>)
 8001b9e:	f002 fb37 	bl	8004210 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	4911      	ldr	r1, [pc, #68]	; (8001bec <BSP_LCD_LayerDefaultInit+0xb8>)
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	490c      	ldr	r1, [pc, #48]	; (8001bec <BSP_LCD_LayerDefaultInit+0xb8>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001bca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	4907      	ldr	r1, [pc, #28]	; (8001bec <BSP_LCD_LayerDefaultInit+0xb8>)
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001bde:	601a      	str	r2, [r3, #0]
}
 8001be0:	bf00      	nop
 8001be2:	3740      	adds	r7, #64	; 0x40
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20004c0c 	.word	0x20004c0c
 8001bec:	2000011c 	.word	0x2000011c
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <BSP_LCD_SetTextColor+0x28>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <BSP_LCD_SetTextColor+0x2c>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	20000118 	.word	0x20000118
 8001c20:	2000011c 	.word	0x2000011c

08001c24 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <BSP_LCD_SetBackColor+0x2c>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4908      	ldr	r1, [pc, #32]	; (8001c54 <BSP_LCD_SetBackColor+0x30>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	601a      	str	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000118 	.word	0x20000118
 8001c54:	2000011c 	.word	0x2000011c

08001c58 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <BSP_LCD_SetFont+0x2c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4908      	ldr	r1, [pc, #32]	; (8001c88 <BSP_LCD_SetFont+0x30>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	3308      	adds	r3, #8
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000118 	.word	0x20000118
 8001c88:	2000011c 	.word	0x2000011c

08001c8c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <BSP_LCD_GetFont+0x24>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <BSP_LCD_GetFont+0x28>)
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3308      	adds	r3, #8
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000118 	.word	0x20000118
 8001cb4:	2000011c 	.word	0x2000011c

08001cb8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <BSP_LCD_Clear+0x48>)
 8001cc2:	681c      	ldr	r4, [r3, #0]
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <BSP_LCD_Clear+0x48>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <BSP_LCD_Clear+0x4c>)
 8001cca:	2134      	movs	r1, #52	; 0x34
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	335c      	adds	r3, #92	; 0x5c
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	461e      	mov	r6, r3
 8001cd8:	f7ff ff14 	bl	8001b04 <BSP_LCD_GetXSize>
 8001cdc:	4605      	mov	r5, r0
 8001cde:	f7ff ff1d 	bl	8001b1c <BSP_LCD_GetYSize>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	462a      	mov	r2, r5
 8001cf0:	4631      	mov	r1, r6
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f000 fb00 	bl	80022f8 <LL_FillBuffer>
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d00:	20000118 	.word	0x20000118
 8001d04:	20004c0c 	.word	0x20004c0c

08001d08 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
 8001d12:	460b      	mov	r3, r1
 8001d14:	80bb      	strh	r3, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <BSP_LCD_DisplayChar+0x80>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	491b      	ldr	r1, [pc, #108]	; (8001d8c <BSP_LCD_DisplayChar+0x84>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	3308      	adds	r3, #8
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <BSP_LCD_DisplayChar+0x80>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4c14      	ldr	r4, [pc, #80]	; (8001d8c <BSP_LCD_DisplayChar+0x84>)
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4423      	add	r3, r4
 8001d46:	3308      	adds	r3, #8
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d4c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001d50:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <BSP_LCD_DisplayChar+0x80>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4c0d      	ldr	r4, [pc, #52]	; (8001d8c <BSP_LCD_DisplayChar+0x84>)
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4423      	add	r3, r4
 8001d60:	3308      	adds	r3, #8
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	889b      	ldrh	r3, [r3, #4]
 8001d66:	3307      	adds	r3, #7
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	da00      	bge.n	8001d6e <BSP_LCD_DisplayChar+0x66>
 8001d6c:	3307      	adds	r3, #7
 8001d6e:	10db      	asrs	r3, r3, #3
 8001d70:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d74:	18ca      	adds	r2, r1, r3
 8001d76:	88b9      	ldrh	r1, [r7, #4]
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fa04 	bl	8002188 <DrawChar>
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	20000118 	.word	0x20000118
 8001d8c:	2000011c 	.word	0x2000011c

08001d90 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001d90:	b5b0      	push	{r4, r5, r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60ba      	str	r2, [r7, #8]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	81fb      	strh	r3, [r7, #14]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	81bb      	strh	r3, [r7, #12]
 8001da2:	4613      	mov	r3, r2
 8001da4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001da6:	2301      	movs	r3, #1
 8001da8:	83fb      	strh	r3, [r7, #30]
 8001daa:	2300      	movs	r3, #0
 8001dac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001dba:	e002      	b.n	8001dc2 <BSP_LCD_DisplayStringAt+0x32>
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	617a      	str	r2, [r7, #20]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f6      	bne.n	8001dbc <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001dce:	f7ff fe99 	bl	8001b04 <BSP_LCD_GetXSize>
 8001dd2:	4601      	mov	r1, r0
 8001dd4:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <BSP_LCD_DisplayStringAt+0x188>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4850      	ldr	r0, [pc, #320]	; (8001f1c <BSP_LCD_DisplayStringAt+0x18c>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4403      	add	r3, r0
 8001de4:	3308      	adds	r3, #8
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	889b      	ldrh	r3, [r3, #4]
 8001dea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dee:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d01c      	beq.n	8001e30 <BSP_LCD_DisplayStringAt+0xa0>
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	dc33      	bgt.n	8001e62 <BSP_LCD_DisplayStringAt+0xd2>
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d002      	beq.n	8001e04 <BSP_LCD_DisplayStringAt+0x74>
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d019      	beq.n	8001e36 <BSP_LCD_DisplayStringAt+0xa6>
 8001e02:	e02e      	b.n	8001e62 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	1ad1      	subs	r1, r2, r3
 8001e0a:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <BSP_LCD_DisplayStringAt+0x188>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4843      	ldr	r0, [pc, #268]	; (8001f1c <BSP_LCD_DisplayStringAt+0x18c>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4403      	add	r3, r0
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	889b      	ldrh	r3, [r3, #4]
 8001e20:	fb03 f301 	mul.w	r3, r3, r1
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	89fb      	ldrh	r3, [r7, #14]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	83fb      	strh	r3, [r7, #30]
      break;
 8001e2e:	e01b      	b.n	8001e68 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001e30:	89fb      	ldrh	r3, [r7, #14]
 8001e32:	83fb      	strh	r3, [r7, #30]
      break;
 8001e34:	e018      	b.n	8001e68 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	b299      	uxth	r1, r3
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <BSP_LCD_DisplayStringAt+0x188>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4836      	ldr	r0, [pc, #216]	; (8001f1c <BSP_LCD_DisplayStringAt+0x18c>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4403      	add	r3, r0
 8001e4e:	3308      	adds	r3, #8
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	889b      	ldrh	r3, [r3, #4]
 8001e54:	fb11 f303 	smulbb	r3, r1, r3
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	83fb      	strh	r3, [r7, #30]
      break;
 8001e60:	e002      	b.n	8001e68 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	83fb      	strh	r3, [r7, #30]
      break;
 8001e66:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001e68:	8bfb      	ldrh	r3, [r7, #30]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <BSP_LCD_DisplayStringAt+0xe6>
 8001e6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da1d      	bge.n	8001eb2 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001e7a:	e01a      	b.n	8001eb2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	89b9      	ldrh	r1, [r7, #12]
 8001e82:	8bfb      	ldrh	r3, [r7, #30]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff3f 	bl	8001d08 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001e8a:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <BSP_LCD_DisplayStringAt+0x188>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4923      	ldr	r1, [pc, #140]	; (8001f1c <BSP_LCD_DisplayStringAt+0x18c>)
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	889a      	ldrh	r2, [r3, #4]
 8001ea0:	8bfb      	ldrh	r3, [r7, #30]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
    i++;
 8001eac:	8bbb      	ldrh	r3, [r7, #28]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2dc      	uxtb	r4, r3
 8001ec0:	f7ff fe20 	bl	8001b04 <BSP_LCD_GetXSize>
 8001ec4:	8bb9      	ldrh	r1, [r7, #28]
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <BSP_LCD_DisplayStringAt+0x188>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4d14      	ldr	r5, [pc, #80]	; (8001f1c <BSP_LCD_DisplayStringAt+0x18c>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	442b      	add	r3, r5
 8001ed6:	3308      	adds	r3, #8
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	889b      	ldrh	r3, [r3, #4]
 8001edc:	fb03 f301 	mul.w	r3, r3, r1
 8001ee0:	1ac3      	subs	r3, r0, r3
 8001ee2:	b299      	uxth	r1, r3
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <BSP_LCD_DisplayStringAt+0x188>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <BSP_LCD_DisplayStringAt+0x18c>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4403      	add	r3, r0
 8001ef4:	3308      	adds	r3, #8
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	4299      	cmp	r1, r3
 8001efc:	bf2c      	ite	cs
 8001efe:	2301      	movcs	r3, #1
 8001f00:	2300      	movcc	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4023      	ands	r3, r4
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1b7      	bne.n	8001e7c <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bdb0      	pop	{r4, r5, r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000118 	.word	0x20000118
 8001f1c:	2000011c 	.word	0x2000011c

08001f20 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001f2c:	f7ff feae 	bl	8001c8c <BSP_LCD_GetFont>
 8001f30:	4603      	mov	r3, r0
 8001f32:	88db      	ldrh	r3, [r3, #6]
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	fb12 f303 	smulbb	r3, r2, r3
 8001f3a:	b299      	uxth	r1, r3
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff ff25 	bl	8001d90 <BSP_LCD_DisplayStringAt>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af02      	add	r7, sp, #8
 8001f58:	4604      	mov	r4, r0
 8001f5a:	4608      	mov	r0, r1
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4623      	mov	r3, r4
 8001f62:	80fb      	strh	r3, [r7, #6]
 8001f64:	4603      	mov	r3, r0
 8001f66:	80bb      	strh	r3, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <BSP_LCD_FillRect+0xa8>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4920      	ldr	r1, [pc, #128]	; (8001ffc <BSP_LCD_FillRect+0xac>)
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fe34 	bl	8001bf4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <BSP_LCD_FillRect+0xa8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <BSP_LCD_FillRect+0xb0>)
 8001f92:	2134      	movs	r1, #52	; 0x34
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	335c      	adds	r3, #92	; 0x5c
 8001f9c:	681c      	ldr	r4, [r3, #0]
 8001f9e:	f7ff fdb1 	bl	8001b04 <BSP_LCD_GetXSize>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	88bb      	ldrh	r3, [r7, #4]
 8001fa6:	fb03 f202 	mul.w	r2, r3, r2
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4423      	add	r3, r4
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <BSP_LCD_FillRect+0xa8>)
 8001fb6:	681c      	ldr	r4, [r3, #0]
 8001fb8:	68fd      	ldr	r5, [r7, #12]
 8001fba:	887e      	ldrh	r6, [r7, #2]
 8001fbc:	f8b7 8000 	ldrh.w	r8, [r7]
 8001fc0:	f7ff fda0 	bl	8001b04 <BSP_LCD_GetXSize>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	1ad1      	subs	r1, r2, r3
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <BSP_LCD_FillRect+0xa8>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	480b      	ldr	r0, [pc, #44]	; (8001ffc <BSP_LCD_FillRect+0xac>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4403      	add	r3, r0
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	9100      	str	r1, [sp, #0]
 8001fe0:	4643      	mov	r3, r8
 8001fe2:	4632      	mov	r2, r6
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f000 f986 	bl	80022f8 <LL_FillBuffer>
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000118 	.word	0x20000118
 8001ffc:	2000011c 	.word	0x2000011c
 8002000:	20004c0c 	.word	0x20004c0c

08002004 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af02      	add	r7, sp, #8
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d80d      	bhi.n	8002030 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	2215      	movs	r2, #21
 8002026:	2100      	movs	r1, #0
 8002028:	480a      	ldr	r0, [pc, #40]	; (8002054 <DSI_IO_WriteCmd+0x50>)
 800202a:	f001 fd7f 	bl	8003b2c <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 800202e:	e00d      	b.n	800204c <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	9200      	str	r2, [sp, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2239      	movs	r2, #57	; 0x39
 8002044:	2100      	movs	r1, #0
 8002046:	4803      	ldr	r0, [pc, #12]	; (8002054 <DSI_IO_WriteCmd+0x50>)
 8002048:	f001 fd92 	bl	8003b70 <HAL_DSI_LongWrite>
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20004cb4 	.word	0x20004cb4

08002058 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 800205c:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800206e:	4b32      	ldr	r3, [pc, #200]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4a31      	ldr	r2, [pc, #196]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 8002074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002078:	6453      	str	r3, [r2, #68]	; 0x44
 800207a:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8002086:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	4a2b      	ldr	r2, [pc, #172]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 800208c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002090:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	4a28      	ldr	r2, [pc, #160]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 8002098:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800209c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a25      	ldr	r2, [pc, #148]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020c0:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020cc:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a19      	ldr	r2, [pc, #100]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	4a13      	ldr	r2, [pc, #76]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020f0:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <BSP_LCD_MspInit+0xd0>)
 80020f8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80020fc:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2103      	movs	r1, #3
 8002102:	2058      	movs	r0, #88	; 0x58
 8002104:	f000 fc45 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002108:	2058      	movs	r0, #88	; 0x58
 800210a:	f000 fc5e 	bl	80029ca <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2103      	movs	r1, #3
 8002112:	205a      	movs	r0, #90	; 0x5a
 8002114:	f000 fc3d 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002118:	205a      	movs	r0, #90	; 0x5a
 800211a:	f000 fc56 	bl	80029ca <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2103      	movs	r1, #3
 8002122:	2062      	movs	r0, #98	; 0x62
 8002124:	f000 fc35 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002128:	2062      	movs	r0, #98	; 0x62
 800212a:	f000 fc4e 	bl	80029ca <HAL_NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800

0800213c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	603a      	str	r2, [r7, #0]
 8002146:	80fb      	strh	r3, [r7, #6]
 8002148:	460b      	mov	r3, r1
 800214a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <BSP_LCD_DrawPixel+0x44>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <BSP_LCD_DrawPixel+0x48>)
 8002152:	2134      	movs	r1, #52	; 0x34
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	335c      	adds	r3, #92	; 0x5c
 800215c:	681c      	ldr	r4, [r3, #0]
 800215e:	88bd      	ldrh	r5, [r7, #4]
 8002160:	f7ff fcd0 	bl	8001b04 <BSP_LCD_GetXSize>
 8002164:	4603      	mov	r3, r0
 8002166:	fb03 f205 	mul.w	r2, r3, r5
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4423      	add	r3, r4
 8002172:	461a      	mov	r2, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bdb0      	pop	{r4, r5, r7, pc}
 8002180:	20000118 	.word	0x20000118
 8002184:	20004c0c 	.word	0x20004c0c

08002188 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	603a      	str	r2, [r7, #0]
 8002192:	80fb      	strh	r3, [r7, #6]
 8002194:	460b      	mov	r3, r1
 8002196:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <DrawChar+0x168>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4953      	ldr	r1, [pc, #332]	; (80022f4 <DrawChar+0x16c>)
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	3308      	adds	r3, #8
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	88db      	ldrh	r3, [r3, #6]
 80021b6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80021b8:	4b4d      	ldr	r3, [pc, #308]	; (80022f0 <DrawChar+0x168>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	494d      	ldr	r1, [pc, #308]	; (80022f4 <DrawChar+0x16c>)
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	3308      	adds	r3, #8
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	889b      	ldrh	r3, [r3, #4]
 80021ce:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 80021d0:	8a3b      	ldrh	r3, [r7, #16]
 80021d2:	3307      	adds	r3, #7
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	da00      	bge.n	80021da <DrawChar+0x52>
 80021d8:	3307      	adds	r3, #7
 80021da:	10db      	asrs	r3, r3, #3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	8a3b      	ldrh	r3, [r7, #16]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e076      	b.n	80022de <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80021f0:	8a3b      	ldrh	r3, [r7, #16]
 80021f2:	3307      	adds	r3, #7
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da00      	bge.n	80021fa <DrawChar+0x72>
 80021f8:	3307      	adds	r3, #7
 80021fa:	10db      	asrs	r3, r3, #3
 80021fc:	461a      	mov	r2, r3
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fb03 f302 	mul.w	r3, r3, r2
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	4413      	add	r3, r2
 8002208:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800220a:	8a3b      	ldrh	r3, [r7, #16]
 800220c:	3307      	adds	r3, #7
 800220e:	2b00      	cmp	r3, #0
 8002210:	da00      	bge.n	8002214 <DrawChar+0x8c>
 8002212:	3307      	adds	r3, #7
 8002214:	10db      	asrs	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d002      	beq.n	8002220 <DrawChar+0x98>
 800221a:	2b02      	cmp	r3, #2
 800221c:	d004      	beq.n	8002228 <DrawChar+0xa0>
 800221e:	e00c      	b.n	800223a <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	617b      	str	r3, [r7, #20]
      break;
 8002226:	e016      	b.n	8002256 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	3201      	adds	r2, #1
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
      break;
 8002238:	e00d      	b.n	8002256 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	041a      	lsls	r2, r3, #16
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	3301      	adds	r3, #1
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	4313      	orrs	r3, r2
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	3202      	adds	r2, #2
 800224e:	7812      	ldrb	r2, [r2, #0]
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
      break;
 8002254:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	e036      	b.n	80022ca <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 800225c:	8a3a      	ldrh	r2, [r7, #16]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	1ad2      	subs	r2, r2, r3
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	4413      	add	r3, r2
 8002266:	3b01      	subs	r3, #1
 8002268:	2201      	movs	r2, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	461a      	mov	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d012      	beq.n	800229e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	b29a      	uxth	r2, r3
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	4413      	add	r3, r2
 8002280:	b298      	uxth	r0, r3
 8002282:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <DrawChar+0x168>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	491b      	ldr	r1, [pc, #108]	; (80022f4 <DrawChar+0x16c>)
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	88bb      	ldrh	r3, [r7, #4]
 8002296:	4619      	mov	r1, r3
 8002298:	f7ff ff50 	bl	800213c <BSP_LCD_DrawPixel>
 800229c:	e012      	b.n	80022c4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	4413      	add	r3, r2
 80022a6:	b298      	uxth	r0, r3
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <DrawChar+0x168>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4911      	ldr	r1, [pc, #68]	; (80022f4 <DrawChar+0x16c>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3304      	adds	r3, #4
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	88bb      	ldrh	r3, [r7, #4]
 80022be:	4619      	mov	r1, r3
 80022c0:	f7ff ff3c 	bl	800213c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	3301      	adds	r3, #1
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	8a3b      	ldrh	r3, [r7, #16]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d3c4      	bcc.n	800225c <DrawChar+0xd4>
      }
    }
    Ypos++;
 80022d2:	88bb      	ldrh	r3, [r7, #4]
 80022d4:	3301      	adds	r3, #1
 80022d6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	8a7b      	ldrh	r3, [r7, #18]
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d384      	bcc.n	80021f0 <DrawChar+0x68>
  }
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000118 	.word	0x20000118
 80022f4:	2000011c 	.word	0x2000011c

080022f8 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <LL_FillBuffer+0x68>)
 8002308:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800230c:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <LL_FillBuffer+0x68>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8002314:	4a12      	ldr	r2, [pc, #72]	; (8002360 <LL_FillBuffer+0x68>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <LL_FillBuffer+0x68>)
 800231c:	4a11      	ldr	r2, [pc, #68]	; (8002364 <LL_FillBuffer+0x6c>)
 800231e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8002320:	480f      	ldr	r0, [pc, #60]	; (8002360 <LL_FillBuffer+0x68>)
 8002322:	f000 fd2b 	bl	8002d7c <HAL_DMA2D_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d115      	bne.n	8002358 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 800232c:	68f9      	ldr	r1, [r7, #12]
 800232e:	480c      	ldr	r0, [pc, #48]	; (8002360 <LL_FillBuffer+0x68>)
 8002330:	f000 fe9c 	bl	800306c <HAL_DMA2D_ConfigLayer>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10e      	bne.n	8002358 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69f9      	ldr	r1, [r7, #28]
 8002344:	4806      	ldr	r0, [pc, #24]	; (8002360 <LL_FillBuffer+0x68>)
 8002346:	f000 fd7d 	bl	8002e44 <HAL_DMA2D_Start>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8002350:	210a      	movs	r1, #10
 8002352:	4803      	ldr	r0, [pc, #12]	; (8002360 <LL_FillBuffer+0x68>)
 8002354:	f000 fda1 	bl	8002e9a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20004bb4 	.word	0x20004bb4
 8002364:	4002b000 	.word	0x4002b000

08002368 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800236c:	4b29      	ldr	r3, [pc, #164]	; (8002414 <BSP_SDRAM_Init+0xac>)
 800236e:	4a2a      	ldr	r2, [pc, #168]	; (8002418 <BSP_SDRAM_Init+0xb0>)
 8002370:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <BSP_SDRAM_Init+0xb4>)
 8002374:	2202      	movs	r2, #2
 8002376:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <BSP_SDRAM_Init+0xb4>)
 800237a:	2207      	movs	r2, #7
 800237c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800237e:	4b27      	ldr	r3, [pc, #156]	; (800241c <BSP_SDRAM_Init+0xb4>)
 8002380:	2204      	movs	r2, #4
 8002382:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <BSP_SDRAM_Init+0xb4>)
 8002386:	2207      	movs	r2, #7
 8002388:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <BSP_SDRAM_Init+0xb4>)
 800238c:	2202      	movs	r2, #2
 800238e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <BSP_SDRAM_Init+0xb4>)
 8002392:	2202      	movs	r2, #2
 8002394:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <BSP_SDRAM_Init+0xb4>)
 8002398:	2202      	movs	r2, #2
 800239a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <BSP_SDRAM_Init+0xac>)
 800239e:	2200      	movs	r2, #0
 80023a0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <BSP_SDRAM_Init+0xac>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <BSP_SDRAM_Init+0xac>)
 80023aa:	2204      	movs	r2, #4
 80023ac:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <BSP_SDRAM_Init+0xac>)
 80023b0:	2220      	movs	r2, #32
 80023b2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <BSP_SDRAM_Init+0xac>)
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <BSP_SDRAM_Init+0xac>)
 80023bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80023c0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <BSP_SDRAM_Init+0xac>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <BSP_SDRAM_Init+0xac>)
 80023ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ce:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <BSP_SDRAM_Init+0xac>)
 80023d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <BSP_SDRAM_Init+0xac>)
 80023da:	2200      	movs	r2, #0
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80023de:	2100      	movs	r1, #0
 80023e0:	480c      	ldr	r0, [pc, #48]	; (8002414 <BSP_SDRAM_Init+0xac>)
 80023e2:	f000 f87f 	bl	80024e4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80023e6:	490d      	ldr	r1, [pc, #52]	; (800241c <BSP_SDRAM_Init+0xb4>)
 80023e8:	480a      	ldr	r0, [pc, #40]	; (8002414 <BSP_SDRAM_Init+0xac>)
 80023ea:	f003 f9ff 	bl	80057ec <HAL_SDRAM_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <BSP_SDRAM_Init+0xb8>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	e002      	b.n	8002402 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <BSP_SDRAM_Init+0xb8>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002402:	f240 6003 	movw	r0, #1539	; 0x603
 8002406:	f000 f80d 	bl	8002424 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <BSP_SDRAM_Init+0xb8>)
 800240c:	781b      	ldrb	r3, [r3, #0]
}
 800240e:	4618      	mov	r0, r3
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20004cd0 	.word	0x20004cd0
 8002418:	a0000140 	.word	0xa0000140
 800241c:	200001c4 	.word	0x200001c4
 8002420:	20000014 	.word	0x20000014

08002424 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002438:	2210      	movs	r2, #16
 800243a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800243e:	2201      	movs	r2, #1
 8002440:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002442:	4b26      	ldr	r3, [pc, #152]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800244c:	4923      	ldr	r1, [pc, #140]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800244e:	4824      	ldr	r0, [pc, #144]	; (80024e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002450:	f003 fa0a 	bl	8005868 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002454:	2001      	movs	r0, #1
 8002456:	f000 f99d 	bl	8002794 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800245c:	2202      	movs	r2, #2
 800245e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002462:	2210      	movs	r2, #16
 8002464:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002468:	2201      	movs	r2, #1
 800246a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002476:	4919      	ldr	r1, [pc, #100]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002478:	4819      	ldr	r0, [pc, #100]	; (80024e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800247a:	f003 f9f5 	bl	8005868 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800247e:	4b17      	ldr	r3, [pc, #92]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002480:	2203      	movs	r2, #3
 8002482:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002486:	2210      	movs	r2, #16
 8002488:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800248c:	2208      	movs	r2, #8
 800248e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800249a:	4910      	ldr	r1, [pc, #64]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800249c:	4810      	ldr	r0, [pc, #64]	; (80024e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800249e:	f003 f9e3 	bl	8005868 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80024a2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80024a6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024aa:	2204      	movs	r2, #4
 80024ac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024b0:	2210      	movs	r2, #16
 80024b2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4a07      	ldr	r2, [pc, #28]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024be:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80024c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c4:	4905      	ldr	r1, [pc, #20]	; (80024dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024c6:	4806      	ldr	r0, [pc, #24]	; (80024e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80024c8:	f003 f9ce 	bl	8005868 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4804      	ldr	r0, [pc, #16]	; (80024e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80024d0:	f003 f9f5 	bl	80058be <HAL_SDRAM_ProgramRefreshRate>
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200001e0 	.word	0x200001e0
 80024e0:	20004cd0 	.word	0x20004cd0

080024e4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b090      	sub	sp, #64	; 0x40
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80024ee:	4b71      	ldr	r3, [pc, #452]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	4a70      	ldr	r2, [pc, #448]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6393      	str	r3, [r2, #56]	; 0x38
 80024fa:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002506:	4b6b      	ldr	r3, [pc, #428]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 800250c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800251e:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a64      	ldr	r2, [pc, #400]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002524:	f043 0308 	orr.w	r3, r3, #8
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b62      	ldr	r3, [pc, #392]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	623b      	str	r3, [r7, #32]
 8002534:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002536:	4b5f      	ldr	r3, [pc, #380]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a5e      	ldr	r2, [pc, #376]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 800253c:	f043 0310 	orr.w	r3, r3, #16
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b5c      	ldr	r3, [pc, #368]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800254e:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002554:	f043 0320 	orr.w	r3, r3, #32
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002566:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a52      	ldr	r2, [pc, #328]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 800256c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800257e:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a4c      	ldr	r2, [pc, #304]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a46      	ldr	r2, [pc, #280]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <BSP_SDRAM_MspInit+0x1d0>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80025ba:	230c      	movs	r3, #12
 80025bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80025be:	f24c 7303 	movw	r3, #50947	; 0xc703
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80025c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c8:	4619      	mov	r1, r3
 80025ca:	483b      	ldr	r0, [pc, #236]	; (80026b8 <BSP_SDRAM_MspInit+0x1d4>)
 80025cc:	f001 fb68 	bl	8003ca0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80025d0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80025d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025da:	4619      	mov	r1, r3
 80025dc:	4837      	ldr	r0, [pc, #220]	; (80026bc <BSP_SDRAM_MspInit+0x1d8>)
 80025de:	f001 fb5f 	bl	8003ca0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80025e2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80025e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ec:	4619      	mov	r1, r3
 80025ee:	4834      	ldr	r0, [pc, #208]	; (80026c0 <BSP_SDRAM_MspInit+0x1dc>)
 80025f0:	f001 fb56 	bl	8003ca0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80025f4:	f248 1337 	movw	r3, #33079	; 0x8137
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80025fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025fe:	4619      	mov	r1, r3
 8002600:	4830      	ldr	r0, [pc, #192]	; (80026c4 <BSP_SDRAM_MspInit+0x1e0>)
 8002602:	f001 fb4d 	bl	8003ca0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002606:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800260c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002610:	4619      	mov	r1, r3
 8002612:	482d      	ldr	r0, [pc, #180]	; (80026c8 <BSP_SDRAM_MspInit+0x1e4>)
 8002614:	f001 fb44 	bl	8003ca0 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002618:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 800261e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002622:	4619      	mov	r1, r3
 8002624:	4829      	ldr	r0, [pc, #164]	; (80026cc <BSP_SDRAM_MspInit+0x1e8>)
 8002626:	f001 fb3b 	bl	8003ca0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800262a:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 800262c:	2200      	movs	r2, #0
 800262e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002632:	2280      	movs	r2, #128	; 0x80
 8002634:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800263e:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002644:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002648:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800264c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002650:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002654:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800265c:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 800265e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002662:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002666:	2200      	movs	r2, #0
 8002668:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 800266c:	2203      	movs	r2, #3
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002672:	2200      	movs	r2, #0
 8002674:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 800267e:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <BSP_SDRAM_MspInit+0x1f0>)
 8002680:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
 8002688:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800268e:	4810      	ldr	r0, [pc, #64]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002690:	f000 fa64 	bl	8002b5c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002694:	480e      	ldr	r0, [pc, #56]	; (80026d0 <BSP_SDRAM_MspInit+0x1ec>)
 8002696:	f000 f9b3 	bl	8002a00 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	210f      	movs	r1, #15
 800269e:	2038      	movs	r0, #56	; 0x38
 80026a0:	f000 f977 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80026a4:	2038      	movs	r0, #56	; 0x38
 80026a6:	f000 f990 	bl	80029ca <HAL_NVIC_EnableIRQ>
}
 80026aa:	bf00      	nop
 80026ac:	3740      	adds	r7, #64	; 0x40
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40021400 	.word	0x40021400
 80026c4:	40021800 	.word	0x40021800
 80026c8:	40021c00 	.word	0x40021c00
 80026cc:	40022000 	.word	0x40022000
 80026d0:	200001f0 	.word	0x200001f0
 80026d4:	40026410 	.word	0x40026410

080026d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026dc:	2003      	movs	r0, #3
 80026de:	f000 f94d 	bl	800297c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e2:	200f      	movs	r0, #15
 80026e4:	f000 f806 	bl	80026f4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80026e8:	f7fe fcb8 	bl	800105c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_InitTick+0x54>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_InitTick+0x58>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270a:	fbb3 f3f1 	udiv	r3, r3, r1
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f967 	bl	80029e6 <HAL_SYSTICK_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e00e      	b.n	8002740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b0f      	cmp	r3, #15
 8002726:	d80a      	bhi.n	800273e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002728:	2200      	movs	r2, #0
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002730:	f000 f92f 	bl	8002992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002734:	4a06      	ldr	r2, [pc, #24]	; (8002750 <HAL_InitTick+0x5c>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000000 	.word	0x20000000
 800274c:	2000001c 	.word	0x2000001c
 8002750:	20000018 	.word	0x20000018

08002754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_IncTick+0x20>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_IncTick+0x24>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4413      	add	r3, r2
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <HAL_IncTick+0x24>)
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	2000001c 	.word	0x2000001c
 8002778:	20004d04 	.word	0x20004d04

0800277c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return uwTick;
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_GetTick+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20004d04 	.word	0x20004d04

08002794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff ffee 	bl	800277c <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ac:	d005      	beq.n	80027ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_Delay+0x44>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ba:	bf00      	nop
 80027bc:	f7ff ffde 	bl	800277c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d8f7      	bhi.n	80027bc <HAL_Delay+0x28>
  {
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000001c 	.word	0x2000001c

080027dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <__NVIC_SetPriorityGrouping+0x40>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002806:	4313      	orrs	r3, r2
 8002808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280a:	4a04      	ldr	r2, [pc, #16]	; (800281c <__NVIC_SetPriorityGrouping+0x40>)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	60d3      	str	r3, [r2, #12]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000ed00 	.word	0xe000ed00
 8002820:	05fa0000 	.word	0x05fa0000

08002824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <__NVIC_EnableIRQ+0x38>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db0a      	blt.n	80028a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	490c      	ldr	r1, [pc, #48]	; (80028c8 <__NVIC_SetPriority+0x4c>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	440b      	add	r3, r1
 80028a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a4:	e00a      	b.n	80028bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4908      	ldr	r1, [pc, #32]	; (80028cc <__NVIC_SetPriority+0x50>)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3b04      	subs	r3, #4
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	440b      	add	r3, r1
 80028ba:	761a      	strb	r2, [r3, #24]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f1c3 0307 	rsb	r3, r3, #7
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	bf28      	it	cs
 80028ee:	2304      	movcs	r3, #4
 80028f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d902      	bls.n	8002900 <NVIC_EncodePriority+0x30>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3b03      	subs	r3, #3
 80028fe:	e000      	b.n	8002902 <NVIC_EncodePriority+0x32>
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	401a      	ands	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	43d9      	mvns	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	4313      	orrs	r3, r2
         );
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002948:	d301      	bcc.n	800294e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294a:	2301      	movs	r3, #1
 800294c:	e00f      	b.n	800296e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <SysTick_Config+0x40>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002956:	210f      	movs	r1, #15
 8002958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800295c:	f7ff ff8e 	bl	800287c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <SysTick_Config+0x40>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <SysTick_Config+0x40>)
 8002968:	2207      	movs	r2, #7
 800296a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000e010 	.word	0xe000e010

0800297c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff29 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a4:	f7ff ff3e 	bl	8002824 <__NVIC_GetPriorityGrouping>
 80029a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	6978      	ldr	r0, [r7, #20]
 80029b0:	f7ff ff8e 	bl	80028d0 <NVIC_EncodePriority>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff5d 	bl	800287c <__NVIC_SetPriority>
}
 80029c2:	bf00      	nop
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff31 	bl	8002840 <__NVIC_EnableIRQ>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff ffa2 	bl	8002938 <SysTick_Config>
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff feb6 	bl	800277c <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e099      	b.n	8002b50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a3c:	e00f      	b.n	8002a5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a3e:	f7ff fe9d 	bl	800277c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d908      	bls.n	8002a5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2203      	movs	r2, #3
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e078      	b.n	8002b50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1e8      	bne.n	8002a3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4b38      	ldr	r3, [pc, #224]	; (8002b58 <HAL_DMA_Init+0x158>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d107      	bne.n	8002ac8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f023 0307 	bic.w	r3, r3, #7
 8002ade:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d117      	bne.n	8002b22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00e      	beq.n	8002b22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f8bd 	bl	8002c84 <DMA_CheckFifoParam>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2240      	movs	r2, #64	; 0x40
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e016      	b.n	8002b50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f874 	bl	8002c18 <DMA_CalcBaseAndBitshift>
 8002b30:	4603      	mov	r3, r0
 8002b32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	223f      	movs	r2, #63	; 0x3f
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	e010803f 	.word	0xe010803f

08002b5c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e050      	b.n	8002c10 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d101      	bne.n	8002b7e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e048      	b.n	8002c10 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2221      	movs	r2, #33	; 0x21
 8002bbc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f82a 	bl	8002c18 <DMA_CalcBaseAndBitshift>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	223f      	movs	r2, #63	; 0x3f
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3b10      	subs	r3, #16
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <DMA_CalcBaseAndBitshift+0x60>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <DMA_CalcBaseAndBitshift+0x64>)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d908      	bls.n	8002c58 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <DMA_CalcBaseAndBitshift+0x68>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	1d1a      	adds	r2, r3, #4
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	659a      	str	r2, [r3, #88]	; 0x58
 8002c56:	e006      	b.n	8002c66 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <DMA_CalcBaseAndBitshift+0x68>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	aaaaaaab 	.word	0xaaaaaaab
 8002c7c:	0800cce0 	.word	0x0800cce0
 8002c80:	fffffc00 	.word	0xfffffc00

08002c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11f      	bne.n	8002cde <DMA_CheckFifoParam+0x5a>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d856      	bhi.n	8002d52 <DMA_CheckFifoParam+0xce>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <DMA_CheckFifoParam+0x28>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002ccf 	.word	0x08002ccf
 8002cb4:	08002cbd 	.word	0x08002cbd
 8002cb8:	08002d53 	.word	0x08002d53
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d046      	beq.n	8002d56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ccc:	e043      	b.n	8002d56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd6:	d140      	bne.n	8002d5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cdc:	e03d      	b.n	8002d5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	d121      	bne.n	8002d2c <DMA_CheckFifoParam+0xa8>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d837      	bhi.n	8002d5e <DMA_CheckFifoParam+0xda>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <DMA_CheckFifoParam+0x70>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d05 	.word	0x08002d05
 8002cf8:	08002d0b 	.word	0x08002d0b
 8002cfc:	08002d05 	.word	0x08002d05
 8002d00:	08002d1d 	.word	0x08002d1d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e030      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d025      	beq.n	8002d62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1a:	e022      	b.n	8002d62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d24:	d11f      	bne.n	8002d66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d2a:	e01c      	b.n	8002d66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d903      	bls.n	8002d3a <DMA_CheckFifoParam+0xb6>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d003      	beq.n	8002d40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d38:	e018      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3e:	e015      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00e      	beq.n	8002d6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d50:	e00b      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      break;
 8002d52:	bf00      	nop
 8002d54:	e00a      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
 8002d58:	e008      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e006      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e004      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop

08002d7c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e049      	b.n	8002e22 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f844 	bl	8002e30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dcc:	f023 0107 	bic.w	r1, r3, #7
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_DMA2D_Init+0xb0>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68d1      	ldr	r1, [r2, #12]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	430b      	orrs	r3, r1
 8002df0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	051a      	lsls	r2, r3, #20
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	055b      	lsls	r3, r3, #21
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	ffffc000 	.word	0xffffc000

08002e30 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_DMA2D_Start+0x1c>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e018      	b.n	8002e92 <HAL_DMA2D_Start+0x4e>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f994 	bl	80031a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d056      	beq.n	8002f64 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002eb6:	f7ff fc61 	bl	800277c <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002ebc:	e04b      	b.n	8002f56 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d023      	beq.n	8002f18 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f043 0202 	orr.w	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2221      	movs	r2, #33	; 0x21
 8002f02:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2204      	movs	r2, #4
 8002f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0a5      	b.n	8003064 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f1e:	d01a      	beq.n	8002f56 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002f20:	f7ff fc2c 	bl	800277c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d302      	bcc.n	8002f36 <HAL_DMA2D_PollForTransfer+0x9c>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e086      	b.n	8003064 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ac      	beq.n	8002ebe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d061      	beq.n	800304a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f86:	f7ff fbf9 	bl	800277c <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f8c:	e056      	b.n	800303c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d02e      	beq.n	8002ffe <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	f043 0204 	orr.w	r2, r3, #4
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc4:	f043 0202 	orr.w	r2, r3, #2
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2229      	movs	r2, #41	; 0x29
 8002fe8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2204      	movs	r2, #4
 8002fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e032      	b.n	8003064 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003004:	d01a      	beq.n	800303c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003006:	f7ff fbb9 	bl	800277c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <HAL_DMA2D_PollForTransfer+0x182>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10f      	bne.n	800303c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2203      	movs	r2, #3
 800302c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e013      	b.n	8003064 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0a1      	beq.n	8002f8e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2212      	movs	r2, #18
 8003050:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_DMA2D_ConfigLayer+0x20>
 8003088:	2302      	movs	r3, #2
 800308a:	e084      	b.n	8003196 <HAL_DMA2D_ConfigLayer+0x12a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	3320      	adds	r3, #32
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4413      	add	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80030c0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80030cc:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <HAL_DMA2D_ConfigLayer+0x138>)
 80030ce:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b0a      	cmp	r3, #10
 80030d6:	d003      	beq.n	80030e0 <HAL_DMA2D_ConfigLayer+0x74>
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b09      	cmp	r3, #9
 80030de:	d107      	bne.n	80030f0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e005      	b.n	80030fc <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d120      	bne.n	8003144 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	43db      	mvns	r3, r3
 800310c:	ea02 0103 	and.w	r1, r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	430a      	orrs	r2, r1
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b0a      	cmp	r3, #10
 800312a:	d003      	beq.n	8003134 <HAL_DMA2D_ConfigLayer+0xc8>
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b09      	cmp	r3, #9
 8003132:	d127      	bne.n	8003184 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
 8003142:	e01f      	b.n	8003184 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43db      	mvns	r3, r3
 800314e:	ea02 0103 	and.w	r1, r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	430a      	orrs	r2, r1
 800315a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b0a      	cmp	r3, #10
 800316c:	d003      	beq.n	8003176 <HAL_DMA2D_ConfigLayer+0x10a>
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b09      	cmp	r3, #9
 8003174:	d106      	bne.n	8003184 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003182:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	ff33000f 	.word	0xff33000f

080031a8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b08b      	sub	sp, #44	; 0x2c
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	041a      	lsls	r2, r3, #16
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	431a      	orrs	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031e0:	d174      	bne.n	80032cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80031e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80031f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d108      	bne.n	800321a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	431a      	orrs	r2, r3
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	4313      	orrs	r3, r2
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
 8003218:	e053      	b.n	80032c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d106      	bne.n	8003230 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	4313      	orrs	r3, r2
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	e048      	b.n	80032c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d111      	bne.n	800325c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	0cdb      	lsrs	r3, r3, #19
 800323c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	0a9b      	lsrs	r3, r3, #10
 8003242:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	08db      	lsrs	r3, r3, #3
 8003248:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	02db      	lsls	r3, r3, #11
 8003252:	4313      	orrs	r3, r2
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
 800325a:	e032      	b.n	80032c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d117      	bne.n	8003294 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	0fdb      	lsrs	r3, r3, #31
 8003268:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	0cdb      	lsrs	r3, r3, #19
 800326e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	0adb      	lsrs	r3, r3, #11
 8003274:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	08db      	lsrs	r3, r3, #3
 800327a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	029b      	lsls	r3, r3, #10
 8003284:	431a      	orrs	r2, r3
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	03db      	lsls	r3, r3, #15
 800328a:	4313      	orrs	r3, r2
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	e016      	b.n	80032c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	0f1b      	lsrs	r3, r3, #28
 8003298:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	0d1b      	lsrs	r3, r3, #20
 800329e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	0b1b      	lsrs	r3, r3, #12
 80032a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	011a      	lsls	r2, r3, #4
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	431a      	orrs	r2, r3
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	031b      	lsls	r3, r3, #12
 80032ba:	4313      	orrs	r3, r2
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80032ca:	e003      	b.n	80032d4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	60da      	str	r2, [r3, #12]
}
 80032d4:	bf00      	nop
 80032d6:	372c      	adds	r7, #44	; 0x2c
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	019a      	lsls	r2, r3, #6
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	431a      	orrs	r2, r3
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b086      	sub	sp, #24
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003320:	f7ff fa2c 	bl	800277c <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003326:	e009      	b.n	800333c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003328:	f7ff fa28 	bl	800277c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003336:	d901      	bls.n	800333c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e015      	b.n	8003368 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ee      	beq.n	8003328 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	019a      	lsls	r2, r3, #6
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	431a      	orrs	r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	ea42 0103 	orr.w	r1, r2, r3
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	041a      	lsls	r2, r3, #16
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e106      	b.n	8003592 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	7c5b      	ldrb	r3, [r3, #17]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f97c 	bl	800368c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2203      	movs	r2, #3
 8003398:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80033ae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80033ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c2:	f7ff f9db 	bl	800277c <HAL_GetTick>
 80033c6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80033c8:	e009      	b.n	80033de <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80033ca:	f7ff f9d7 	bl	800277c <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033d8:	d901      	bls.n	80033de <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e0d9      	b.n	8003592 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80033e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ed      	beq.n	80033ca <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b68      	ldr	r3, [pc, #416]	; (800359c <HAL_DSI_Init+0x22c>)
 80033fc:	400b      	ands	r3, r1
 80033fe:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	009a      	lsls	r2, r3, #2
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	02db      	lsls	r3, r3, #11
 8003416:	431a      	orrs	r2, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003452:	f7ff f993 	bl	800277c <HAL_GetTick>
 8003456:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003458:	e009      	b.n	800346e <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800345a:	f7ff f98f 	bl	800277c <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003468:	d901      	bls.n	800346e <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e091      	b.n	8003592 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0ed      	beq.n	800345a <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0206 	orr.w	r2, r2, #6
 800348e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0203 	bic.w	r2, r2, #3
 80034a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0203 	bic.w	r2, r2, #3
 80034d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034f8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HAL_DSI_Init+0x1aa>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	e000      	b.n	800351c <HAL_DSI_Init+0x1ac>
 800351a:	2301      	movs	r3, #1
 800351c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <HAL_DSI_Init+0x230>)
 8003522:	fb02 f203 	mul.w	r2, r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	409a      	lsls	r2, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003552:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	430a      	orrs	r2, r1
 8003566:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2200      	movs	r2, #0
 800357a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	fffc8603 	.word	0xfffc8603
 80035a0:	003d0900 	.word	0x003d0900

080035a4 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e066      	b.n	8003684 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2203      	movs	r2, #3
 80035ba:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0208 	bic.w	r2, r2, #8
 80035d0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0206 	bic.w	r2, r2, #6
 8003616:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003656:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f818 	bl	80036a0 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	7c1b      	ldrb	r3, [r3, #16]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_DSI_ConfigVideoMode+0x16>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e1ee      	b.n	8003aa8 <HAL_DSI_ConfigVideoMode+0x3f4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0203 	bic.w	r2, r2, #3
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b8b      	ldr	r3, [pc, #556]	; (8003950 <HAL_DSI_ConfigVideoMode+0x29c>)
 8003722:	400b      	ands	r3, r1
 8003724:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b84      	ldr	r3, [pc, #528]	; (8003954 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003744:	400b      	ands	r3, r1
 8003746:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b7b      	ldr	r3, [pc, #492]	; (8003954 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003766:	400b      	ands	r3, r1
 8003768:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0203 	bic.w	r2, r2, #3
 800378a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68d9      	ldr	r1, [r3, #12]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0207 	bic.w	r2, r2, #7
 80037ac:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6959      	ldr	r1, [r3, #20]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	431a      	orrs	r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 020f 	bic.w	r2, r2, #15
 80037da:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6919      	ldr	r1, [r3, #16]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 020e 	bic.w	r2, r2, #14
 80037fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	005a      	lsls	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d110      	bne.n	8003844 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003830:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6919      	ldr	r1, [r3, #16]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b42      	ldr	r3, [pc, #264]	; (8003958 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003850:	400b      	ands	r3, r1
 8003852:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b39      	ldr	r3, [pc, #228]	; (8003958 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003872:	400b      	ands	r3, r1
 8003874:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4b32      	ldr	r3, [pc, #200]	; (800395c <HAL_DSI_ConfigVideoMode+0x2a8>)
 8003894:	400b      	ands	r3, r1
 8003896:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80038b6:	400b      	ands	r3, r1
 80038b8:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b22      	ldr	r3, [pc, #136]	; (8003960 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80038d8:	400b      	ands	r3, r1
 80038da:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80038fa:	400b      	ands	r3, r1
 80038fc:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_DSI_ConfigVideoMode+0x29c>)
 800391c:	400b      	ands	r3, r1
 800391e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394c:	e00a      	b.n	8003964 <HAL_DSI_ConfigVideoMode+0x2b0>
 800394e:	bf00      	nop
 8003950:	ffffc000 	.word	0xffffc000
 8003954:	ffffe000 	.word	0xffffe000
 8003958:	fffff000 	.word	0xfffff000
 800395c:	ffff8000 	.word	0xffff8000
 8003960:	fffffc00 	.word	0xfffffc00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800397a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6999      	ldr	r1, [r3, #24]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003986:	041a      	lsls	r2, r3, #16
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800399e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6999      	ldr	r1, [r3, #24]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7c1b      	ldrb	r3, [r3, #16]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DSI_Start+0x14>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e02b      	b.n	8003b20 <HAL_DSI_Start+0x6c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0208 	orr.w	r2, r2, #8
 8003b04:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	7c1b      	ldrb	r3, [r3, #16]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_DSI_ShortWrite+0x1a>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e010      	b.n	8003b68 <HAL_DSI_ShortWrite+0x3c>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f7ff fbdb 	bl	8003312 <DSI_ShortWrite>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	741a      	strb	r2, [r3, #16]

  return status;
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	; 0x30
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b80:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	7c1b      	ldrb	r3, [r3, #16]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_DSI_LongWrite+0x1e>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e084      	b.n	8003c98 <HAL_DSI_LongWrite+0x128>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b94:	f7fe fdf2 	bl	800277c <HAL_GetTick>
 8003b98:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b9a:	e00c      	b.n	8003bb6 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003b9c:	f7fe fdee 	bl	800277c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003baa:	d904      	bls.n	8003bb6 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e070      	b.n	8003c98 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0eb      	beq.n	8003b9c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	bf28      	it	cs
 8003bce:	2303      	movcs	r3, #3
 8003bd0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	623b      	str	r3, [r7, #32]
 8003bd6:	e00f      	b.n	8003bf8 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	4413      	add	r3, r2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	3301      	adds	r3, #1
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	6a3a      	ldr	r2, [r7, #32]
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3eb      	bcc.n	8003bd8 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003c18:	e028      	b.n	8003c6c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	bf28      	it	cs
 8003c20:	2304      	movcs	r3, #4
 8003c22:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	623b      	str	r3, [r7, #32]
 8003c2c:	e00e      	b.n	8003c4c <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	623b      	str	r3, [r7, #32]
 8003c4c:	6a3a      	ldr	r2, [r7, #32]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d3ec      	bcc.n	8003c2e <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4413      	add	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1d3      	bne.n	8003c1a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003c7a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	4613      	mov	r3, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	f7ff fb28 	bl	80032e0 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3728      	adds	r7, #40	; 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	; 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e175      	b.n	8003fac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	f040 8164 	bne.w	8003fa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d00b      	beq.n	8003cfe <HAL_GPIO_Init+0x5e>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d007      	beq.n	8003cfe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cf2:	2b11      	cmp	r3, #17
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b12      	cmp	r3, #18
 8003cfc:	d130      	bne.n	8003d60 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d34:	2201      	movs	r2, #1
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 0201 	and.w	r2, r3, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0x100>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b12      	cmp	r3, #18
 8003d9e:	d123      	bne.n	8003de8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	08da      	lsrs	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3208      	adds	r2, #8
 8003da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	220f      	movs	r2, #15
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	08da      	lsrs	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3208      	adds	r2, #8
 8003de2:	69b9      	ldr	r1, [r7, #24]
 8003de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	2203      	movs	r2, #3
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0203 	and.w	r2, r3, #3
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80be 	beq.w	8003fa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2a:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_GPIO_Init+0x324>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	4a65      	ldr	r2, [pc, #404]	; (8003fc4 <HAL_GPIO_Init+0x324>)
 8003e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e34:	6453      	str	r3, [r2, #68]	; 0x44
 8003e36:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_GPIO_Init+0x324>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e42:	4a61      	ldr	r2, [pc, #388]	; (8003fc8 <HAL_GPIO_Init+0x328>)
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	089b      	lsrs	r3, r3, #2
 8003e48:	3302      	adds	r3, #2
 8003e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	220f      	movs	r2, #15
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a58      	ldr	r2, [pc, #352]	; (8003fcc <HAL_GPIO_Init+0x32c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d037      	beq.n	8003ede <HAL_GPIO_Init+0x23e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a57      	ldr	r2, [pc, #348]	; (8003fd0 <HAL_GPIO_Init+0x330>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d031      	beq.n	8003eda <HAL_GPIO_Init+0x23a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a56      	ldr	r2, [pc, #344]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d02b      	beq.n	8003ed6 <HAL_GPIO_Init+0x236>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a55      	ldr	r2, [pc, #340]	; (8003fd8 <HAL_GPIO_Init+0x338>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d025      	beq.n	8003ed2 <HAL_GPIO_Init+0x232>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a54      	ldr	r2, [pc, #336]	; (8003fdc <HAL_GPIO_Init+0x33c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01f      	beq.n	8003ece <HAL_GPIO_Init+0x22e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a53      	ldr	r2, [pc, #332]	; (8003fe0 <HAL_GPIO_Init+0x340>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d019      	beq.n	8003eca <HAL_GPIO_Init+0x22a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a52      	ldr	r2, [pc, #328]	; (8003fe4 <HAL_GPIO_Init+0x344>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_GPIO_Init+0x226>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a51      	ldr	r2, [pc, #324]	; (8003fe8 <HAL_GPIO_Init+0x348>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00d      	beq.n	8003ec2 <HAL_GPIO_Init+0x222>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a50      	ldr	r2, [pc, #320]	; (8003fec <HAL_GPIO_Init+0x34c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <HAL_GPIO_Init+0x21e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a4f      	ldr	r2, [pc, #316]	; (8003ff0 <HAL_GPIO_Init+0x350>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_GPIO_Init+0x21a>
 8003eb6:	2309      	movs	r3, #9
 8003eb8:	e012      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003eba:	230a      	movs	r3, #10
 8003ebc:	e010      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	e00e      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ec2:	2307      	movs	r3, #7
 8003ec4:	e00c      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ec6:	2306      	movs	r3, #6
 8003ec8:	e00a      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003eca:	2305      	movs	r3, #5
 8003ecc:	e008      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ece:	2304      	movs	r3, #4
 8003ed0:	e006      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e004      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e002      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	f002 0203 	and.w	r2, r2, #3
 8003ee6:	0092      	lsls	r2, r2, #2
 8003ee8:	4093      	lsls	r3, r2
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ef0:	4935      	ldr	r1, [pc, #212]	; (8003fc8 <HAL_GPIO_Init+0x328>)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	089b      	lsrs	r3, r3, #2
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f22:	4a34      	ldr	r2, [pc, #208]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f28:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f4c:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f52:	4b28      	ldr	r3, [pc, #160]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f76:	4a1f      	ldr	r2, [pc, #124]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fa0:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b0f      	cmp	r3, #15
 8003fb0:	f67f ae86 	bls.w	8003cc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	3724      	adds	r7, #36	; 0x24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40013800 	.word	0x40013800
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	40020400 	.word	0x40020400
 8003fd4:	40020800 	.word	0x40020800
 8003fd8:	40020c00 	.word	0x40020c00
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40021400 	.word	0x40021400
 8003fe4:	40021800 	.word	0x40021800
 8003fe8:	40021c00 	.word	0x40021c00
 8003fec:	40022000 	.word	0x40022000
 8003ff0:	40022400 	.word	0x40022400
 8003ff4:	40013c00 	.word	0x40013c00

08003ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
 8004014:	e001      	b.n	800401a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
 8004034:	4613      	mov	r3, r2
 8004036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004038:	787b      	ldrb	r3, [r7, #1]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800403e:	887a      	ldrh	r2, [r7, #2]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004044:	e003      	b.n	800404e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004046:	887b      	ldrh	r3, [r7, #2]
 8004048:	041a      	lsls	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	619a      	str	r2, [r3, #24]
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0bf      	b.n	80041ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f8ba 	bl	80041fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800409e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6999      	ldr	r1, [r3, #24]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6899      	ldr	r1, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b4a      	ldr	r3, [pc, #296]	; (80041f8 <HAL_LTDC_Init+0x19c>)
 80040d0:	400b      	ands	r3, r1
 80040d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6899      	ldr	r1, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68d9      	ldr	r1, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b3e      	ldr	r3, [pc, #248]	; (80041f8 <HAL_LTDC_Init+0x19c>)
 80040fe:	400b      	ands	r3, r1
 8004100:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68d9      	ldr	r1, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1a      	ldr	r2, [r3, #32]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6919      	ldr	r1, [r3, #16]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b33      	ldr	r3, [pc, #204]	; (80041f8 <HAL_LTDC_Init+0x19c>)
 800412c:	400b      	ands	r3, r1
 800412e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6919      	ldr	r1, [r3, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6959      	ldr	r1, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4b27      	ldr	r3, [pc, #156]	; (80041f8 <HAL_LTDC_Init+0x19c>)
 800415a:	400b      	ands	r3, r1
 800415c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6959      	ldr	r1, [r3, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800419e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0206 	orr.w	r2, r2, #6
 80041ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	f000f800 	.word	0xf000f800

080041fc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004210:	b5b0      	push	{r4, r5, r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_LTDC_ConfigLayer+0x1a>
 8004226:	2302      	movs	r3, #2
 8004228:	e02c      	b.n	8004284 <HAL_LTDC_ConfigLayer+0x74>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2134      	movs	r1, #52	; 0x34
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	4413      	add	r3, r2
 8004246:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4614      	mov	r4, r2
 800424e:	461d      	mov	r5, r3
 8004250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800425a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f811 	bl	800428c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2201      	movs	r2, #1
 8004270:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bdb0      	pop	{r4, r5, r7, pc}

0800428c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a8:	4413      	add	r3, r2
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	01db      	lsls	r3, r3, #7
 80042b8:	4413      	add	r3, r2
 80042ba:	3384      	adds	r3, #132	; 0x84
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	4611      	mov	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	01d2      	lsls	r2, r2, #7
 80042c8:	440a      	add	r2, r1
 80042ca:	3284      	adds	r2, #132	; 0x84
 80042cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e2:	4413      	add	r3, r2
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	01db      	lsls	r3, r3, #7
 80042f0:	440b      	add	r3, r1
 80042f2:	3384      	adds	r3, #132	; 0x84
 80042f4:	4619      	mov	r1, r3
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800430a:	4413      	add	r3, r2
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	01db      	lsls	r3, r3, #7
 800431a:	4413      	add	r3, r2
 800431c:	3384      	adds	r3, #132	; 0x84
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	4611      	mov	r1, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	01d2      	lsls	r2, r2, #7
 800432a:	440a      	add	r2, r1
 800432c:	3284      	adds	r2, #132	; 0x84
 800432e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004332:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004342:	4413      	add	r3, r2
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4619      	mov	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	01db      	lsls	r3, r3, #7
 8004350:	440b      	add	r3, r1
 8004352:	3384      	adds	r3, #132	; 0x84
 8004354:	4619      	mov	r1, r3
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	01db      	lsls	r3, r3, #7
 8004366:	4413      	add	r3, r2
 8004368:	3384      	adds	r3, #132	; 0x84
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	4611      	mov	r1, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	01d2      	lsls	r2, r2, #7
 8004376:	440a      	add	r2, r1
 8004378:	3284      	adds	r2, #132	; 0x84
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	01db      	lsls	r3, r3, #7
 800438a:	4413      	add	r3, r2
 800438c:	3384      	adds	r3, #132	; 0x84
 800438e:	461a      	mov	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80043a6:	041b      	lsls	r3, r3, #16
 80043a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	061b      	lsls	r3, r3, #24
 80043b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	01db      	lsls	r3, r3, #7
 80043bc:	4413      	add	r3, r2
 80043be:	3384      	adds	r3, #132	; 0x84
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	01db      	lsls	r3, r3, #7
 80043cc:	4413      	add	r3, r2
 80043ce:	3384      	adds	r3, #132	; 0x84
 80043d0:	461a      	mov	r2, r3
 80043d2:	2300      	movs	r3, #0
 80043d4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043dc:	461a      	mov	r2, r3
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4619      	mov	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	01db      	lsls	r3, r3, #7
 80043f0:	440b      	add	r3, r1
 80043f2:	3384      	adds	r3, #132	; 0x84
 80043f4:	4619      	mov	r1, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	01db      	lsls	r3, r3, #7
 8004406:	4413      	add	r3, r2
 8004408:	3384      	adds	r3, #132	; 0x84
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	4611      	mov	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	01d2      	lsls	r2, r2, #7
 8004416:	440a      	add	r2, r1
 8004418:	3284      	adds	r2, #132	; 0x84
 800441a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800441e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	01db      	lsls	r3, r3, #7
 800442a:	4413      	add	r3, r2
 800442c:	3384      	adds	r3, #132	; 0x84
 800442e:	461a      	mov	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	01db      	lsls	r3, r3, #7
 8004440:	4413      	add	r3, r2
 8004442:	3384      	adds	r3, #132	; 0x84
 8004444:	69da      	ldr	r2, [r3, #28]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4619      	mov	r1, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	01db      	lsls	r3, r3, #7
 8004450:	440b      	add	r3, r1
 8004452:	3384      	adds	r3, #132	; 0x84
 8004454:	4619      	mov	r1, r3
 8004456:	4b58      	ldr	r3, [pc, #352]	; (80045b8 <LTDC_SetConfig+0x32c>)
 8004458:	4013      	ands	r3, r2
 800445a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	6809      	ldr	r1, [r1, #0]
 8004468:	4608      	mov	r0, r1
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	01c9      	lsls	r1, r1, #7
 800446e:	4401      	add	r1, r0
 8004470:	3184      	adds	r1, #132	; 0x84
 8004472:	4313      	orrs	r3, r2
 8004474:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	01db      	lsls	r3, r3, #7
 8004480:	4413      	add	r3, r2
 8004482:	3384      	adds	r3, #132	; 0x84
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	01db      	lsls	r3, r3, #7
 8004490:	4413      	add	r3, r2
 8004492:	3384      	adds	r3, #132	; 0x84
 8004494:	461a      	mov	r2, r3
 8004496:	2300      	movs	r3, #0
 8004498:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	01db      	lsls	r3, r3, #7
 80044a4:	4413      	add	r3, r2
 80044a6:	3384      	adds	r3, #132	; 0x84
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80044b8:	2304      	movs	r3, #4
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	e01b      	b.n	80044f6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d102      	bne.n	80044cc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80044c6:	2303      	movs	r3, #3
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	e014      	b.n	80044f6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d00b      	beq.n	80044ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d007      	beq.n	80044ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d003      	beq.n	80044ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80044e8:	2b07      	cmp	r3, #7
 80044ea:	d102      	bne.n	80044f2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80044ec:	2302      	movs	r3, #2
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e001      	b.n	80044f6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80044f2:	2301      	movs	r3, #1
 80044f4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	01db      	lsls	r3, r3, #7
 8004500:	4413      	add	r3, r2
 8004502:	3384      	adds	r3, #132	; 0x84
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	4611      	mov	r1, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	01d2      	lsls	r2, r2, #7
 8004510:	440a      	add	r2, r1
 8004512:	3284      	adds	r2, #132	; 0x84
 8004514:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004518:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	fb02 f303 	mul.w	r3, r2, r3
 8004524:	041a      	lsls	r2, r3, #16
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	1acb      	subs	r3, r1, r3
 8004530:	69f9      	ldr	r1, [r7, #28]
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	3303      	adds	r3, #3
 8004538:	68f9      	ldr	r1, [r7, #12]
 800453a:	6809      	ldr	r1, [r1, #0]
 800453c:	4608      	mov	r0, r1
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	01c9      	lsls	r1, r1, #7
 8004542:	4401      	add	r1, r0
 8004544:	3184      	adds	r1, #132	; 0x84
 8004546:	4313      	orrs	r3, r2
 8004548:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	01db      	lsls	r3, r3, #7
 8004554:	4413      	add	r3, r2
 8004556:	3384      	adds	r3, #132	; 0x84
 8004558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	01db      	lsls	r3, r3, #7
 8004564:	440b      	add	r3, r1
 8004566:	3384      	adds	r3, #132	; 0x84
 8004568:	4619      	mov	r1, r3
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <LTDC_SetConfig+0x330>)
 800456c:	4013      	ands	r3, r2
 800456e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	01db      	lsls	r3, r3, #7
 800457a:	4413      	add	r3, r2
 800457c:	3384      	adds	r3, #132	; 0x84
 800457e:	461a      	mov	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	01db      	lsls	r3, r3, #7
 8004590:	4413      	add	r3, r2
 8004592:	3384      	adds	r3, #132	; 0x84
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	4611      	mov	r1, r2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	01d2      	lsls	r2, r2, #7
 80045a0:	440a      	add	r2, r1
 80045a2:	3284      	adds	r2, #132	; 0x84
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6013      	str	r3, [r2, #0]
}
 80045aa:	bf00      	nop
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	fffff8f8 	.word	0xfffff8f8
 80045bc:	fffff800 	.word	0xfffff800

080045c0 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80045d2:	2200      	movs	r2, #0
 80045d4:	e001      	b.n	80045da <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80045d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80045e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045ea:	e000      	b.n	80045ee <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80045ec:	2200      	movs	r2, #0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80045fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045fe:	e000      	b.n	8004602 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8004600:	2200      	movs	r2, #0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	1e5a      	subs	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	4413      	add	r3, r2
 800461a:	1e5a      	subs	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	441a      	add	r2, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	4413      	add	r3, r2
 8004630:	1e5a      	subs	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	441a      	add	r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	441a      	add	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	4413      	add	r3, r2
 800464c:	1e5a      	subs	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	4a22      	ldr	r2, [pc, #136]	; (80046f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004674:	6413      	str	r3, [r2, #64]	; 0x40
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004682:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800468e:	f7fe f875 	bl	800277c <HAL_GetTick>
 8004692:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004694:	e009      	b.n	80046aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004696:	f7fe f871 	bl	800277c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046a4:	d901      	bls.n	80046aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e022      	b.n	80046f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b6:	d1ee      	bne.n	8004696 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046b8:	4b10      	ldr	r3, [pc, #64]	; (80046fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0f      	ldr	r2, [pc, #60]	; (80046fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80046be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046c4:	f7fe f85a 	bl	800277c <HAL_GetTick>
 80046c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046ca:	e009      	b.n	80046e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046cc:	f7fe f856 	bl	800277c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046da:	d901      	bls.n	80046e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e007      	b.n	80046f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046ec:	d1ee      	bne.n	80046cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40007000 	.word	0x40007000

08004700 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004708:	2300      	movs	r3, #0
 800470a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e29b      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8087 	beq.w	8004832 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004724:	4b96      	ldr	r3, [pc, #600]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 030c 	and.w	r3, r3, #12
 800472c:	2b04      	cmp	r3, #4
 800472e:	d00c      	beq.n	800474a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004730:	4b93      	ldr	r3, [pc, #588]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 030c 	and.w	r3, r3, #12
 8004738:	2b08      	cmp	r3, #8
 800473a:	d112      	bne.n	8004762 <HAL_RCC_OscConfig+0x62>
 800473c:	4b90      	ldr	r3, [pc, #576]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004748:	d10b      	bne.n	8004762 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474a:	4b8d      	ldr	r3, [pc, #564]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d06c      	beq.n	8004830 <HAL_RCC_OscConfig+0x130>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d168      	bne.n	8004830 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e275      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x7a>
 800476c:	4b84      	ldr	r3, [pc, #528]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a83      	ldr	r2, [pc, #524]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	e02e      	b.n	80047d8 <HAL_RCC_OscConfig+0xd8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x9c>
 8004782:	4b7f      	ldr	r3, [pc, #508]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a7e      	ldr	r2, [pc, #504]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b7c      	ldr	r3, [pc, #496]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a7b      	ldr	r2, [pc, #492]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e01d      	b.n	80047d8 <HAL_RCC_OscConfig+0xd8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0xc0>
 80047a6:	4b76      	ldr	r3, [pc, #472]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a75      	ldr	r2, [pc, #468]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80047ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b73      	ldr	r3, [pc, #460]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a72      	ldr	r2, [pc, #456]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0xd8>
 80047c0:	4b6f      	ldr	r3, [pc, #444]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a6e      	ldr	r2, [pc, #440]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	4b6c      	ldr	r3, [pc, #432]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a6b      	ldr	r2, [pc, #428]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80047d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d013      	beq.n	8004808 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e0:	f7fd ffcc 	bl	800277c <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fd ffc8 	bl	800277c <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e229      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fa:	4b61      	ldr	r3, [pc, #388]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0xe8>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fd ffb8 	bl	800277c <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004810:	f7fd ffb4 	bl	800277c <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e215      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004822:	4b57      	ldr	r3, [pc, #348]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x110>
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d069      	beq.n	8004912 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800483e:	4b50      	ldr	r3, [pc, #320]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b4d      	ldr	r3, [pc, #308]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b08      	cmp	r3, #8
 8004854:	d11c      	bne.n	8004890 <HAL_RCC_OscConfig+0x190>
 8004856:	4b4a      	ldr	r3, [pc, #296]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d116      	bne.n	8004890 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004862:	4b47      	ldr	r3, [pc, #284]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_RCC_OscConfig+0x17a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e1e9      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487a:	4b41      	ldr	r3, [pc, #260]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	493d      	ldr	r1, [pc, #244]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488e:	e040      	b.n	8004912 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d023      	beq.n	80048e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004898:	4b39      	ldr	r3, [pc, #228]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a38      	ldr	r2, [pc, #224]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fd ff6a 	bl	800277c <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ac:	f7fd ff66 	bl	800277c <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e1c7      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048be:	4b30      	ldr	r3, [pc, #192]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ca:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4929      	ldr	r1, [pc, #164]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]
 80048de:	e018      	b.n	8004912 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048e0:	4b27      	ldr	r3, [pc, #156]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a26      	ldr	r2, [pc, #152]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fd ff46 	bl	800277c <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f4:	f7fd ff42 	bl	800277c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1a3      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d038      	beq.n	8004990 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d019      	beq.n	800495a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004926:	4b16      	ldr	r3, [pc, #88]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492a:	4a15      	ldr	r2, [pc, #84]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004932:	f7fd ff23 	bl	800277c <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800493a:	f7fd ff1f 	bl	800277c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e180      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 800494e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCC_OscConfig+0x23a>
 8004958:	e01a      	b.n	8004990 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800495a:	4b09      	ldr	r3, [pc, #36]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 800495c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495e:	4a08      	ldr	r2, [pc, #32]	; (8004980 <HAL_RCC_OscConfig+0x280>)
 8004960:	f023 0301 	bic.w	r3, r3, #1
 8004964:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004966:	f7fd ff09 	bl	800277c <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496c:	e00a      	b.n	8004984 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800496e:	f7fd ff05 	bl	800277c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d903      	bls.n	8004984 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e166      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
 8004980:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004984:	4b92      	ldr	r3, [pc, #584]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1ee      	bne.n	800496e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80a4 	beq.w	8004ae6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800499e:	4b8c      	ldr	r3, [pc, #560]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10d      	bne.n	80049c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049aa:	4b89      	ldr	r3, [pc, #548]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	4a88      	ldr	r2, [pc, #544]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 80049b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6413      	str	r3, [r2, #64]	; 0x40
 80049b6:	4b86      	ldr	r3, [pc, #536]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049c2:	2301      	movs	r3, #1
 80049c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c6:	4b83      	ldr	r3, [pc, #524]	; (8004bd4 <HAL_RCC_OscConfig+0x4d4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d118      	bne.n	8004a04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80049d2:	4b80      	ldr	r3, [pc, #512]	; (8004bd4 <HAL_RCC_OscConfig+0x4d4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7f      	ldr	r2, [pc, #508]	; (8004bd4 <HAL_RCC_OscConfig+0x4d4>)
 80049d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049de:	f7fd fecd 	bl	800277c <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e6:	f7fd fec9 	bl	800277c <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b64      	cmp	r3, #100	; 0x64
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e12a      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049f8:	4b76      	ldr	r3, [pc, #472]	; (8004bd4 <HAL_RCC_OscConfig+0x4d4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d106      	bne.n	8004a1a <HAL_RCC_OscConfig+0x31a>
 8004a0c:	4b70      	ldr	r3, [pc, #448]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	4a6f      	ldr	r2, [pc, #444]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	6713      	str	r3, [r2, #112]	; 0x70
 8004a18:	e02d      	b.n	8004a76 <HAL_RCC_OscConfig+0x376>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCC_OscConfig+0x33c>
 8004a22:	4b6b      	ldr	r3, [pc, #428]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	4a6a      	ldr	r2, [pc, #424]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2e:	4b68      	ldr	r3, [pc, #416]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a67      	ldr	r2, [pc, #412]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3a:	e01c      	b.n	8004a76 <HAL_RCC_OscConfig+0x376>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b05      	cmp	r3, #5
 8004a42:	d10c      	bne.n	8004a5e <HAL_RCC_OscConfig+0x35e>
 8004a44:	4b62      	ldr	r3, [pc, #392]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a48:	4a61      	ldr	r2, [pc, #388]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a4a:	f043 0304 	orr.w	r3, r3, #4
 8004a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a50:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	4a5e      	ldr	r2, [pc, #376]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5c:	e00b      	b.n	8004a76 <HAL_RCC_OscConfig+0x376>
 8004a5e:	4b5c      	ldr	r3, [pc, #368]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	4a5b      	ldr	r2, [pc, #364]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6a:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	4a58      	ldr	r2, [pc, #352]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a70:	f023 0304 	bic.w	r3, r3, #4
 8004a74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d015      	beq.n	8004aaa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7e:	f7fd fe7d 	bl	800277c <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a84:	e00a      	b.n	8004a9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a86:	f7fd fe79 	bl	800277c <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e0d8      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9c:	4b4c      	ldr	r3, [pc, #304]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0ee      	beq.n	8004a86 <HAL_RCC_OscConfig+0x386>
 8004aa8:	e014      	b.n	8004ad4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7fd fe67 	bl	800277c <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab2:	f7fd fe63 	bl	800277c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e0c2      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac8:	4b41      	ldr	r3, [pc, #260]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ee      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d105      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ada:	4b3d      	ldr	r3, [pc, #244]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	4a3c      	ldr	r2, [pc, #240]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 80ae 	beq.w	8004c4c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004af0:	4b37      	ldr	r3, [pc, #220]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 030c 	and.w	r3, r3, #12
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d06d      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d14b      	bne.n	8004b9c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b04:	4b32      	ldr	r3, [pc, #200]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a31      	ldr	r2, [pc, #196]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd fe34 	bl	800277c <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b18:	f7fd fe30 	bl	800277c <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e091      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2a:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	019b      	lsls	r3, r3, #6
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	041b      	lsls	r3, r3, #16
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	071b      	lsls	r3, r3, #28
 8004b62:	491b      	ldr	r1, [pc, #108]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b68:	4b19      	ldr	r3, [pc, #100]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a18      	ldr	r2, [pc, #96]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fd fe02 	bl	800277c <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fd fdfe 	bl	800277c <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e05f      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8e:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x47c>
 8004b9a:	e057      	b.n	8004c4c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fd fde8 	bl	800277c <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fd fde4 	bl	800277c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e045      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc2:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <HAL_RCC_OscConfig+0x4d0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x4b0>
 8004bce:	e03d      	b.n	8004c4c <HAL_RCC_OscConfig+0x54c>
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004bd8:	4b1f      	ldr	r3, [pc, #124]	; (8004c58 <HAL_RCC_OscConfig+0x558>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d030      	beq.n	8004c48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d129      	bne.n	8004c48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d122      	bne.n	8004c48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c08:	4013      	ands	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d119      	bne.n	8004c48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	085b      	lsrs	r3, r3, #1
 8004c20:	3b01      	subs	r3, #1
 8004c22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d10f      	bne.n	8004c48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d107      	bne.n	8004c48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800

08004c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0d0      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c74:	4b6a      	ldr	r3, [pc, #424]	; (8004e20 <HAL_RCC_ClockConfig+0x1c4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d910      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	4b67      	ldr	r3, [pc, #412]	; (8004e20 <HAL_RCC_ClockConfig+0x1c4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 020f 	bic.w	r2, r3, #15
 8004c8a:	4965      	ldr	r1, [pc, #404]	; (8004e20 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b63      	ldr	r3, [pc, #396]	; (8004e20 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0b8      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cbc:	4b59      	ldr	r3, [pc, #356]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a58      	ldr	r2, [pc, #352]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd4:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4a52      	ldr	r2, [pc, #328]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	494d      	ldr	r1, [pc, #308]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d040      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d115      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b41      	ldr	r3, [pc, #260]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e073      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2e:	4b3d      	ldr	r3, [pc, #244]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e06b      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d3e:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f023 0203 	bic.w	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4936      	ldr	r1, [pc, #216]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d50:	f7fd fd14 	bl	800277c <HAL_GetTick>
 8004d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d58:	f7fd fd10 	bl	800277c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e053      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6e:	4b2d      	ldr	r3, [pc, #180]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 020c 	and.w	r2, r3, #12
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d1eb      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d80:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <HAL_RCC_ClockConfig+0x1c4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d210      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <HAL_RCC_ClockConfig+0x1c4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 020f 	bic.w	r2, r3, #15
 8004d96:	4922      	ldr	r1, [pc, #136]	; (8004e20 <HAL_RCC_ClockConfig+0x1c4>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b20      	ldr	r3, [pc, #128]	; (8004e20 <HAL_RCC_ClockConfig+0x1c4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e032      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dbc:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4916      	ldr	r1, [pc, #88]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	490e      	ldr	r1, [pc, #56]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dee:	f000 f821 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 8004df2:	4602      	mov	r2, r0
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_ClockConfig+0x1c8>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	490a      	ldr	r1, [pc, #40]	; (8004e28 <HAL_RCC_ClockConfig+0x1cc>)
 8004e00:	5ccb      	ldrb	r3, [r1, r3]
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <HAL_RCC_ClockConfig+0x1d0>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_RCC_ClockConfig+0x1d4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fd fc70 	bl	80026f4 <HAL_InitTick>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023c00 	.word	0x40023c00
 8004e24:	40023800 	.word	0x40023800
 8004e28:	0800b004 	.word	0x0800b004
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	20000018 	.word	0x20000018

08004e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e34:	b5b0      	push	{r4, r5, r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	6079      	str	r1, [r7, #4]
 8004e3e:	2100      	movs	r1, #0
 8004e40:	60f9      	str	r1, [r7, #12]
 8004e42:	2100      	movs	r1, #0
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004e46:	2100      	movs	r1, #0
 8004e48:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e4a:	4952      	ldr	r1, [pc, #328]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e4c:	6889      	ldr	r1, [r1, #8]
 8004e4e:	f001 010c 	and.w	r1, r1, #12
 8004e52:	2908      	cmp	r1, #8
 8004e54:	d00d      	beq.n	8004e72 <HAL_RCC_GetSysClockFreq+0x3e>
 8004e56:	2908      	cmp	r1, #8
 8004e58:	f200 8094 	bhi.w	8004f84 <HAL_RCC_GetSysClockFreq+0x150>
 8004e5c:	2900      	cmp	r1, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_RCC_GetSysClockFreq+0x32>
 8004e60:	2904      	cmp	r1, #4
 8004e62:	d003      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x38>
 8004e64:	e08e      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e66:	4b4c      	ldr	r3, [pc, #304]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x164>)
 8004e68:	60bb      	str	r3, [r7, #8]
      break;
 8004e6a:	e08e      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e6c:	4b4b      	ldr	r3, [pc, #300]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x168>)
 8004e6e:	60bb      	str	r3, [r7, #8]
      break;
 8004e70:	e08b      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e72:	4948      	ldr	r1, [pc, #288]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e74:	6849      	ldr	r1, [r1, #4]
 8004e76:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004e7a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e7c:	4945      	ldr	r1, [pc, #276]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e7e:	6849      	ldr	r1, [r1, #4]
 8004e80:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004e84:	2900      	cmp	r1, #0
 8004e86:	d024      	beq.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e88:	4942      	ldr	r1, [pc, #264]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e8a:	6849      	ldr	r1, [r1, #4]
 8004e8c:	0989      	lsrs	r1, r1, #6
 8004e8e:	4608      	mov	r0, r1
 8004e90:	f04f 0100 	mov.w	r1, #0
 8004e94:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004e98:	f04f 0500 	mov.w	r5, #0
 8004e9c:	ea00 0204 	and.w	r2, r0, r4
 8004ea0:	ea01 0305 	and.w	r3, r1, r5
 8004ea4:	493d      	ldr	r1, [pc, #244]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x168>)
 8004ea6:	fb01 f003 	mul.w	r0, r1, r3
 8004eaa:	2100      	movs	r1, #0
 8004eac:	fb01 f102 	mul.w	r1, r1, r2
 8004eb0:	1844      	adds	r4, r0, r1
 8004eb2:	493a      	ldr	r1, [pc, #232]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x168>)
 8004eb4:	fba2 0101 	umull	r0, r1, r2, r1
 8004eb8:	1863      	adds	r3, r4, r1
 8004eba:	4619      	mov	r1, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	f7fb fa0c 	bl	80002e0 <__aeabi_uldivmod>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4613      	mov	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e04a      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed2:	4b30      	ldr	r3, [pc, #192]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ee2:	f04f 0100 	mov.w	r1, #0
 8004ee6:	ea02 0400 	and.w	r4, r2, r0
 8004eea:	ea03 0501 	and.w	r5, r3, r1
 8004eee:	4620      	mov	r0, r4
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	014b      	lsls	r3, r1, #5
 8004efc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f00:	0142      	lsls	r2, r0, #5
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	1b00      	subs	r0, r0, r4
 8004f08:	eb61 0105 	sbc.w	r1, r1, r5
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	018b      	lsls	r3, r1, #6
 8004f16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f1a:	0182      	lsls	r2, r0, #6
 8004f1c:	1a12      	subs	r2, r2, r0
 8004f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f04f 0100 	mov.w	r1, #0
 8004f2a:	00d9      	lsls	r1, r3, #3
 8004f2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f30:	00d0      	lsls	r0, r2, #3
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	1912      	adds	r2, r2, r4
 8004f38:	eb45 0303 	adc.w	r3, r5, r3
 8004f3c:	f04f 0000 	mov.w	r0, #0
 8004f40:	f04f 0100 	mov.w	r1, #0
 8004f44:	0299      	lsls	r1, r3, #10
 8004f46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f4a:	0290      	lsls	r0, r2, #10
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	f7fb f9c0 	bl	80002e0 <__aeabi_uldivmod>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4613      	mov	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f68:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	3301      	adds	r3, #1
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	60bb      	str	r3, [r7, #8]
      break;
 8004f82:	e002      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f84:	4b04      	ldr	r3, [pc, #16]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x164>)
 8004f86:	60bb      	str	r3, [r7, #8]
      break;
 8004f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bdb0      	pop	{r4, r5, r7, pc}
 8004f94:	40023800 	.word	0x40023800
 8004f98:	00f42400 	.word	0x00f42400
 8004f9c:	017d7840 	.word	0x017d7840

08004fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d012      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fc8:	4b69      	ldr	r3, [pc, #420]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	4a68      	ldr	r2, [pc, #416]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fd2:	6093      	str	r3, [r2, #8]
 8004fd4:	4b66      	ldr	r3, [pc, #408]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fdc:	4964      	ldr	r1, [pc, #400]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004fea:	2301      	movs	r3, #1
 8004fec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d017      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ffa:	4b5d      	ldr	r3, [pc, #372]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005008:	4959      	ldr	r1, [pc, #356]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005018:	d101      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800501a:	2301      	movs	r3, #1
 800501c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005026:	2301      	movs	r3, #1
 8005028:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d017      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005036:	4b4e      	ldr	r3, [pc, #312]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	494a      	ldr	r1, [pc, #296]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005054:	d101      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005056:	2301      	movs	r3, #1
 8005058:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005062:	2301      	movs	r3, #1
 8005064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005072:	2301      	movs	r3, #1
 8005074:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 808b 	beq.w	800519a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005084:	4b3a      	ldr	r3, [pc, #232]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	4a39      	ldr	r2, [pc, #228]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508e:	6413      	str	r3, [r2, #64]	; 0x40
 8005090:	4b37      	ldr	r3, [pc, #220]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800509c:	4b35      	ldr	r3, [pc, #212]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a34      	ldr	r2, [pc, #208]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a8:	f7fd fb68 	bl	800277c <HAL_GetTick>
 80050ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b0:	f7fd fb64 	bl	800277c <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e38d      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050c2:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ce:	4b28      	ldr	r3, [pc, #160]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d035      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d02e      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ec:	4b20      	ldr	r3, [pc, #128]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050f6:	4b1e      	ldr	r3, [pc, #120]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	4a1d      	ldr	r2, [pc, #116]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005100:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005102:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800510e:	4a18      	ldr	r2, [pc, #96]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005114:	4b16      	ldr	r3, [pc, #88]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b01      	cmp	r3, #1
 800511e:	d114      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fd fb2c 	bl	800277c <HAL_GetTick>
 8005124:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005126:	e00a      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005128:	f7fd fb28 	bl	800277c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	; 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e34f      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0ee      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005156:	d111      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005164:	4b04      	ldr	r3, [pc, #16]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005166:	400b      	ands	r3, r1
 8005168:	4901      	ldr	r1, [pc, #4]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
 800516e:	e00b      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005170:	40023800 	.word	0x40023800
 8005174:	40007000 	.word	0x40007000
 8005178:	0ffffcff 	.word	0x0ffffcff
 800517c:	4bb3      	ldr	r3, [pc, #716]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4ab2      	ldr	r2, [pc, #712]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005182:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005186:	6093      	str	r3, [r2, #8]
 8005188:	4bb0      	ldr	r3, [pc, #704]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800518a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005194:	49ad      	ldr	r1, [pc, #692]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005196:	4313      	orrs	r3, r2
 8005198:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d010      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051a6:	4ba9      	ldr	r3, [pc, #676]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ac:	4aa7      	ldr	r2, [pc, #668]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051b6:	4ba5      	ldr	r3, [pc, #660]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	49a2      	ldr	r1, [pc, #648]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051d4:	4b9d      	ldr	r3, [pc, #628]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e2:	499a      	ldr	r1, [pc, #616]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051f6:	4b95      	ldr	r3, [pc, #596]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005204:	4991      	ldr	r1, [pc, #580]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005218:	4b8c      	ldr	r3, [pc, #560]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005226:	4989      	ldr	r1, [pc, #548]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800523a:	4b84      	ldr	r3, [pc, #528]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005240:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	4980      	ldr	r1, [pc, #512]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800525c:	4b7b      	ldr	r3, [pc, #492]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	f023 0203 	bic.w	r2, r3, #3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	4978      	ldr	r1, [pc, #480]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800527e:	4b73      	ldr	r3, [pc, #460]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	f023 020c 	bic.w	r2, r3, #12
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528c:	496f      	ldr	r1, [pc, #444]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052a0:	4b6a      	ldr	r3, [pc, #424]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	4967      	ldr	r1, [pc, #412]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052c2:	4b62      	ldr	r3, [pc, #392]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d0:	495e      	ldr	r1, [pc, #376]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052e4:	4b59      	ldr	r3, [pc, #356]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	4956      	ldr	r1, [pc, #344]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005306:	4b51      	ldr	r3, [pc, #324]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	494d      	ldr	r1, [pc, #308]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005328:	4b48      	ldr	r3, [pc, #288]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005336:	4945      	ldr	r1, [pc, #276]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800534a:	4b40      	ldr	r3, [pc, #256]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005358:	493c      	ldr	r1, [pc, #240]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800536c:	4b37      	ldr	r3, [pc, #220]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800537a:	4934      	ldr	r1, [pc, #208]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d011      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800538e:	4b2f      	ldr	r3, [pc, #188]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800539c:	492b      	ldr	r1, [pc, #172]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ac:	d101      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80053ae:	2301      	movs	r3, #1
 80053b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80053be:	2301      	movs	r3, #1
 80053c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ce:	4b1f      	ldr	r3, [pc, #124]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053dc:	491b      	ldr	r1, [pc, #108]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053f0:	4b16      	ldr	r3, [pc, #88]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005400:	4912      	ldr	r1, [pc, #72]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00b      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005414:	4b0d      	ldr	r3, [pc, #52]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005424:	4909      	ldr	r1, [pc, #36]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00f      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800543a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800543e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	e002      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800
 8005450:	4985      	ldr	r1, [pc, #532]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00b      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005464:	4b80      	ldr	r3, [pc, #512]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800546a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005474:	497c      	ldr	r1, [pc, #496]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d005      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800548a:	f040 80d6 	bne.w	800563a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800548e:	4b76      	ldr	r3, [pc, #472]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a75      	ldr	r2, [pc, #468]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005494:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800549a:	f7fd f96f 	bl	800277c <HAL_GetTick>
 800549e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054a0:	e008      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054a2:	f7fd f96b 	bl	800277c <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b64      	cmp	r3, #100	; 0x64
 80054ae:	d901      	bls.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e194      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054b4:	4b6c      	ldr	r3, [pc, #432]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f0      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d021      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d11d      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054d4:	4b64      	ldr	r3, [pc, #400]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80054d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054da:	0c1b      	lsrs	r3, r3, #16
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054e2:	4b61      	ldr	r3, [pc, #388]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80054e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e8:	0e1b      	lsrs	r3, r3, #24
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	019a      	lsls	r2, r3, #6
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	431a      	orrs	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	061b      	lsls	r3, r3, #24
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	071b      	lsls	r3, r3, #28
 8005508:	4957      	ldr	r1, [pc, #348]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005524:	d00a      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800552e:	2b00      	cmp	r3, #0
 8005530:	d02e      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800553a:	d129      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800553c:	4b4a      	ldr	r3, [pc, #296]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800553e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005542:	0c1b      	lsrs	r3, r3, #16
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800554a:	4b47      	ldr	r3, [pc, #284]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800554c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005550:	0f1b      	lsrs	r3, r3, #28
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	019a      	lsls	r2, r3, #6
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	061b      	lsls	r3, r3, #24
 800556a:	431a      	orrs	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	071b      	lsls	r3, r3, #28
 8005570:	493d      	ldr	r1, [pc, #244]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005578:	4b3b      	ldr	r3, [pc, #236]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800557a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800557e:	f023 021f 	bic.w	r2, r3, #31
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	3b01      	subs	r3, #1
 8005588:	4937      	ldr	r1, [pc, #220]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01d      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800559c:	4b32      	ldr	r3, [pc, #200]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800559e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a2:	0e1b      	lsrs	r3, r3, #24
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055aa:	4b2f      	ldr	r3, [pc, #188]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b0:	0f1b      	lsrs	r3, r3, #28
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	019a      	lsls	r2, r3, #6
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	431a      	orrs	r2, r3
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	061b      	lsls	r3, r3, #24
 80055ca:	431a      	orrs	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	071b      	lsls	r3, r3, #28
 80055d0:	4925      	ldr	r1, [pc, #148]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d011      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	019a      	lsls	r2, r3, #6
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	041b      	lsls	r3, r3, #16
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	061b      	lsls	r3, r3, #24
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	071b      	lsls	r3, r3, #28
 8005600:	4919      	ldr	r1, [pc, #100]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005608:	4b17      	ldr	r3, [pc, #92]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800560e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005614:	f7fd f8b2 	bl	800277c <HAL_GetTick>
 8005618:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800561a:	e008      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800561c:	f7fd f8ae 	bl	800277c <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	; 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e0d7      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800562e:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b01      	cmp	r3, #1
 800563e:	f040 80cd 	bne.w	80057dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005642:	4b09      	ldr	r3, [pc, #36]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a08      	ldr	r2, [pc, #32]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800564e:	f7fd f895 	bl	800277c <HAL_GetTick>
 8005652:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005654:	e00a      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005656:	f7fd f891 	bl	800277c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b64      	cmp	r3, #100	; 0x64
 8005662:	d903      	bls.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e0ba      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005668:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800566c:	4b5e      	ldr	r3, [pc, #376]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005678:	d0ed      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005696:	2b00      	cmp	r3, #0
 8005698:	d02e      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d12a      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056a2:	4b51      	ldr	r3, [pc, #324]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a8:	0c1b      	lsrs	r3, r3, #16
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056b0:	4b4d      	ldr	r3, [pc, #308]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b6:	0f1b      	lsrs	r3, r3, #28
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	019a      	lsls	r2, r3, #6
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	061b      	lsls	r3, r3, #24
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	071b      	lsls	r3, r3, #28
 80056d6:	4944      	ldr	r1, [pc, #272]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056de:	4b42      	ldr	r3, [pc, #264]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80056e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	3b01      	subs	r3, #1
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	493d      	ldr	r1, [pc, #244]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d022      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800570c:	d11d      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800570e:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	0e1b      	lsrs	r3, r3, #24
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800571c:	4b32      	ldr	r3, [pc, #200]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005722:	0f1b      	lsrs	r3, r3, #28
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	019a      	lsls	r2, r3, #6
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	041b      	lsls	r3, r3, #16
 8005736:	431a      	orrs	r2, r3
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	061b      	lsls	r3, r3, #24
 800573c:	431a      	orrs	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	071b      	lsls	r3, r3, #28
 8005742:	4929      	ldr	r1, [pc, #164]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d028      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005756:	4b24      	ldr	r3, [pc, #144]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	0e1b      	lsrs	r3, r3, #24
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005764:	4b20      	ldr	r3, [pc, #128]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	019a      	lsls	r2, r3, #6
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	041b      	lsls	r3, r3, #16
 800577c:	431a      	orrs	r2, r3
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	061b      	lsls	r3, r3, #24
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	071b      	lsls	r3, r3, #28
 800578a:	4917      	ldr	r1, [pc, #92]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005792:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005798:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	4911      	ldr	r1, [pc, #68]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a0e      	ldr	r2, [pc, #56]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b4:	f7fc ffe2 	bl	800277c <HAL_GetTick>
 80057b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057bc:	f7fc ffde 	bl	800277c <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	; 0x64
 80057c8:	d901      	bls.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e007      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057da:	d1ef      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40023800 	.word	0x40023800

080057ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e025      	b.n	800584c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f81d 	bl	8005854 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3304      	adds	r3, #4
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f000 fb49 	bl	8005ec4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	461a      	mov	r2, r3
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	f000 fbb3 	bl	8005fa8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d101      	bne.n	8005884 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
 8005882:	e018      	b.n	80058b6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fc07 	bl	80060a8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d104      	bne.n	80058ac <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2205      	movs	r2, #5
 80058a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80058aa:	e003      	b.n	80058b4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d101      	bne.n	80058d8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
 80058d6:	e00e      	b.n	80058f6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fbff 	bl	80060ea <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e01d      	b.n	800594c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fb fbc1 	bl	80010ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3304      	adds	r3, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f000 f8f9 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	4b0e      	ldr	r3, [pc, #56]	; (80059a4 <HAL_TIM_Base_Start+0x50>)
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b06      	cmp	r3, #6
 8005974:	d00b      	beq.n	800598e <HAL_TIM_Base_Start+0x3a>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597c:	d007      	beq.n	800598e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	00010007 	.word	0x00010007

080059a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_TIM_ConfigClockSource+0x18>
 80059bc:	2302      	movs	r3, #2
 80059be:	e0b3      	b.n	8005b28 <HAL_TIM_ConfigClockSource+0x180>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4b55      	ldr	r3, [pc, #340]	; (8005b30 <HAL_TIM_ConfigClockSource+0x188>)
 80059dc:	4013      	ands	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f8:	d03e      	beq.n	8005a78 <HAL_TIM_ConfigClockSource+0xd0>
 80059fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fe:	f200 8087 	bhi.w	8005b10 <HAL_TIM_ConfigClockSource+0x168>
 8005a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a06:	f000 8085 	beq.w	8005b14 <HAL_TIM_ConfigClockSource+0x16c>
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0e:	d87f      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x168>
 8005a10:	2b70      	cmp	r3, #112	; 0x70
 8005a12:	d01a      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0xa2>
 8005a14:	2b70      	cmp	r3, #112	; 0x70
 8005a16:	d87b      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x168>
 8005a18:	2b60      	cmp	r3, #96	; 0x60
 8005a1a:	d050      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x116>
 8005a1c:	2b60      	cmp	r3, #96	; 0x60
 8005a1e:	d877      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x168>
 8005a20:	2b50      	cmp	r3, #80	; 0x50
 8005a22:	d03c      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0xf6>
 8005a24:	2b50      	cmp	r3, #80	; 0x50
 8005a26:	d873      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x168>
 8005a28:	2b40      	cmp	r3, #64	; 0x40
 8005a2a:	d058      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x136>
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	d86f      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x168>
 8005a30:	2b30      	cmp	r3, #48	; 0x30
 8005a32:	d064      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x156>
 8005a34:	2b30      	cmp	r3, #48	; 0x30
 8005a36:	d86b      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x168>
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d060      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x156>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d867      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x168>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d05c      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x156>
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d05a      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005a48:	e062      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6899      	ldr	r1, [r3, #8]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f000 f985 	bl	8005d68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	609a      	str	r2, [r3, #8]
      break;
 8005a76:	e04e      	b.n	8005b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	6899      	ldr	r1, [r3, #8]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f000 f96e 	bl	8005d68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a9a:	609a      	str	r2, [r3, #8]
      break;
 8005a9c:	e03b      	b.n	8005b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f000 f8e2 	bl	8005c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2150      	movs	r1, #80	; 0x50
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f93b 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 8005abc:	e02b      	b.n	8005b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 f901 	bl	8005cd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2160      	movs	r1, #96	; 0x60
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f92b 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 8005adc:	e01b      	b.n	8005b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6859      	ldr	r1, [r3, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f000 f8c2 	bl	8005c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2140      	movs	r1, #64	; 0x40
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f91b 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 8005afc:	e00b      	b.n	8005b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f000 f912 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 8005b0e:	e002      	b.n	8005b16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005b10:	bf00      	nop
 8005b12:	e000      	b.n	8005b16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005b14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	fffeff88 	.word	0xfffeff88

08005b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a40      	ldr	r2, [pc, #256]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b52:	d00f      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a3d      	ldr	r2, [pc, #244]	; (8005c4c <TIM_Base_SetConfig+0x118>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00b      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a3c      	ldr	r2, [pc, #240]	; (8005c50 <TIM_Base_SetConfig+0x11c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d007      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a3b      	ldr	r2, [pc, #236]	; (8005c54 <TIM_Base_SetConfig+0x120>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3a      	ldr	r2, [pc, #232]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d108      	bne.n	8005b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2f      	ldr	r2, [pc, #188]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d02b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b94:	d027      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2c      	ldr	r2, [pc, #176]	; (8005c4c <TIM_Base_SetConfig+0x118>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d023      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <TIM_Base_SetConfig+0x11c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2a      	ldr	r2, [pc, #168]	; (8005c54 <TIM_Base_SetConfig+0x120>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d01b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a29      	ldr	r2, [pc, #164]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d017      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a28      	ldr	r2, [pc, #160]	; (8005c5c <TIM_Base_SetConfig+0x128>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a27      	ldr	r2, [pc, #156]	; (8005c60 <TIM_Base_SetConfig+0x12c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00f      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a26      	ldr	r2, [pc, #152]	; (8005c64 <TIM_Base_SetConfig+0x130>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a25      	ldr	r2, [pc, #148]	; (8005c68 <TIM_Base_SetConfig+0x134>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d007      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <TIM_Base_SetConfig+0x138>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d003      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a23      	ldr	r2, [pc, #140]	; (8005c70 <TIM_Base_SetConfig+0x13c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d108      	bne.n	8005bf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_Base_SetConfig+0xf8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d103      	bne.n	8005c34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	615a      	str	r2, [r3, #20]
}
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40000800 	.word	0x40000800
 8005c54:	40000c00 	.word	0x40000c00
 8005c58:	40010400 	.word	0x40010400
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	40014400 	.word	0x40014400
 8005c64:	40014800 	.word	0x40014800
 8005c68:	40001800 	.word	0x40001800
 8005c6c:	40001c00 	.word	0x40001c00
 8005c70:	40002000 	.word	0x40002000

08005c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f023 0201 	bic.w	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f023 030a 	bic.w	r3, r3, #10
 8005cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b087      	sub	sp, #28
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f023 0210 	bic.w	r2, r3, #16
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	031b      	lsls	r3, r3, #12
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f043 0307 	orr.w	r3, r3, #7
 8005d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	609a      	str	r2, [r3, #8]
}
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	021a      	lsls	r2, r3, #8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	609a      	str	r2, [r3, #8]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e06d      	b.n	8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a30      	ldr	r2, [pc, #192]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2f      	ldr	r2, [pc, #188]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d108      	bne.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a20      	ldr	r2, [pc, #128]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d022      	beq.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e32:	d01d      	beq.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d018      	beq.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a1c      	ldr	r2, [pc, #112]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d013      	beq.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1a      	ldr	r2, [pc, #104]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00e      	beq.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a15      	ldr	r2, [pc, #84]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10c      	bne.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40010400 	.word	0x40010400
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	40001800 	.word	0x40001800

08005ec4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d027      	beq.n	8005f2e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4b2f      	ldr	r3, [pc, #188]	; (8005fa4 <FMC_SDRAM_Init+0xe0>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ef4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005efa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005f00:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005f06:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005f0c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005f12:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005f18:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005f1e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e032      	b.n	8005f94 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f3a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f44:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005f4a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <FMC_SDRAM_Init+0xe0>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f68:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005f6e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005f74:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005f7a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005f80:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	ffff8000 	.word	0xffff8000

08005fa8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d02e      	beq.n	8006020 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005fce:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005fde:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005fe8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005ff2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005ffc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	3b01      	subs	r3, #1
 8006004:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006006:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	3b01      	subs	r3, #1
 800600e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006010:	4313      	orrs	r3, r2
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	609a      	str	r2, [r3, #8]
 800601e:	e039      	b.n	8006094 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4b1e      	ldr	r3, [pc, #120]	; (80060a4 <FMC_SDRAM_Timing_Init+0xfc>)
 800602a:	4013      	ands	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	3b01      	subs	r3, #1
 8006034:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	3b01      	subs	r3, #1
 800603c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800603e:	4313      	orrs	r3, r2
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006052:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	3b01      	subs	r3, #1
 8006060:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006062:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	3b01      	subs	r3, #1
 800606a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800606c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	3b01      	subs	r3, #1
 8006074:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006076:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	3b01      	subs	r3, #1
 800607e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006080:	4313      	orrs	r3, r2
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	ff0f0fff 	.word	0xff0f0fff

080060a8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060c0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80060ca:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695a      	ldr	r2, [r3, #20]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006114:	bf00      	nop
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006126:	f3ef 8305 	mrs	r3, IPSR
 800612a:	60bb      	str	r3, [r7, #8]
  return(result);
 800612c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10f      	bne.n	8006152 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006132:	f3ef 8310 	mrs	r3, PRIMASK
 8006136:	607b      	str	r3, [r7, #4]
  return(result);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d105      	bne.n	800614a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800613e:	f3ef 8311 	mrs	r3, BASEPRI
 8006142:	603b      	str	r3, [r7, #0]
  return(result);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d007      	beq.n	800615a <osKernelInitialize+0x3a>
 800614a:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <osKernelInitialize+0x64>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d103      	bne.n	800615a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006152:	f06f 0305 	mvn.w	r3, #5
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	e00c      	b.n	8006174 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800615a:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <osKernelInitialize+0x64>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d105      	bne.n	800616e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006162:	4b08      	ldr	r3, [pc, #32]	; (8006184 <osKernelInitialize+0x64>)
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e002      	b.n	8006174 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800616e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006172:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006174:	68fb      	ldr	r3, [r7, #12]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20000250 	.word	0x20000250

08006188 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800618e:	f3ef 8305 	mrs	r3, IPSR
 8006192:	60bb      	str	r3, [r7, #8]
  return(result);
 8006194:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10f      	bne.n	80061ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800619a:	f3ef 8310 	mrs	r3, PRIMASK
 800619e:	607b      	str	r3, [r7, #4]
  return(result);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d105      	bne.n	80061b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061a6:	f3ef 8311 	mrs	r3, BASEPRI
 80061aa:	603b      	str	r3, [r7, #0]
  return(result);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d007      	beq.n	80061c2 <osKernelStart+0x3a>
 80061b2:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <osKernelStart+0x68>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d103      	bne.n	80061c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80061ba:	f06f 0305 	mvn.w	r3, #5
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e010      	b.n	80061e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80061c2:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <osKernelStart+0x68>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d109      	bne.n	80061de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80061ca:	f7ff ffa1 	bl	8006110 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80061ce:	4b08      	ldr	r3, [pc, #32]	; (80061f0 <osKernelStart+0x68>)
 80061d0:	2202      	movs	r2, #2
 80061d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80061d4:	f001 fec6 	bl	8007f64 <vTaskStartScheduler>
      stat = osOK;
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e002      	b.n	80061e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80061de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061e4:	68fb      	ldr	r3, [r7, #12]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000250 	.word	0x20000250

080061f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b090      	sub	sp, #64	; 0x40
 80061f8:	af04      	add	r7, sp, #16
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006200:	2300      	movs	r3, #0
 8006202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006204:	f3ef 8305 	mrs	r3, IPSR
 8006208:	61fb      	str	r3, [r7, #28]
  return(result);
 800620a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800620c:	2b00      	cmp	r3, #0
 800620e:	f040 808f 	bne.w	8006330 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006212:	f3ef 8310 	mrs	r3, PRIMASK
 8006216:	61bb      	str	r3, [r7, #24]
  return(result);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800621e:	f3ef 8311 	mrs	r3, BASEPRI
 8006222:	617b      	str	r3, [r7, #20]
  return(result);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <osThreadNew+0x3e>
 800622a:	4b44      	ldr	r3, [pc, #272]	; (800633c <osThreadNew+0x148>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d07e      	beq.n	8006330 <osThreadNew+0x13c>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d07b      	beq.n	8006330 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006238:	2380      	movs	r3, #128	; 0x80
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800623c:	2318      	movs	r3, #24
 800623e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006240:	2300      	movs	r3, #0
 8006242:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006248:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d045      	beq.n	80062dc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <osThreadNew+0x6a>
        name = attr->name;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <osThreadNew+0x90>
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	2b38      	cmp	r3, #56	; 0x38
 8006276:	d805      	bhi.n	8006284 <osThreadNew+0x90>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <osThreadNew+0x94>
        return (NULL);
 8006284:	2300      	movs	r3, #0
 8006286:	e054      	b.n	8006332 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	089b      	lsrs	r3, r3, #2
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00e      	beq.n	80062be <osThreadNew+0xca>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	2b5b      	cmp	r3, #91	; 0x5b
 80062a6:	d90a      	bls.n	80062be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d006      	beq.n	80062be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <osThreadNew+0xca>
        mem = 1;
 80062b8:	2301      	movs	r3, #1
 80062ba:	623b      	str	r3, [r7, #32]
 80062bc:	e010      	b.n	80062e0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10c      	bne.n	80062e0 <osThreadNew+0xec>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d108      	bne.n	80062e0 <osThreadNew+0xec>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d104      	bne.n	80062e0 <osThreadNew+0xec>
          mem = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	623b      	str	r3, [r7, #32]
 80062da:	e001      	b.n	80062e0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d110      	bne.n	8006308 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062ee:	9202      	str	r2, [sp, #8]
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f001 fc51 	bl	8007ba4 <xTaskCreateStatic>
 8006302:	4603      	mov	r3, r0
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	e013      	b.n	8006330 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d110      	bne.n	8006330 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	b29a      	uxth	r2, r3
 8006312:	f107 0310 	add.w	r3, r7, #16
 8006316:	9301      	str	r3, [sp, #4]
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f001 fca2 	bl	8007c6a <xTaskCreate>
 8006326:	4603      	mov	r3, r0
 8006328:	2b01      	cmp	r3, #1
 800632a:	d001      	beq.n	8006330 <osThreadNew+0x13c>
          hTask = NULL;
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006330:	693b      	ldr	r3, [r7, #16]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3730      	adds	r7, #48	; 0x30
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000250 	.word	0x20000250

08006340 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006348:	f3ef 8305 	mrs	r3, IPSR
 800634c:	613b      	str	r3, [r7, #16]
  return(result);
 800634e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10f      	bne.n	8006374 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006354:	f3ef 8310 	mrs	r3, PRIMASK
 8006358:	60fb      	str	r3, [r7, #12]
  return(result);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d105      	bne.n	800636c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006360:	f3ef 8311 	mrs	r3, BASEPRI
 8006364:	60bb      	str	r3, [r7, #8]
  return(result);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d007      	beq.n	800637c <osDelay+0x3c>
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <osDelay+0x58>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d103      	bne.n	800637c <osDelay+0x3c>
    stat = osErrorISR;
 8006374:	f06f 0305 	mvn.w	r3, #5
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e007      	b.n	800638c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800637c:	2300      	movs	r3, #0
 800637e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 fdb6 	bl	8007ef8 <vTaskDelay>
    }
  }

  return (stat);
 800638c:	697b      	ldr	r3, [r7, #20]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000250 	.word	0x20000250

0800639c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b08c      	sub	sp, #48	; 0x30
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ac:	f3ef 8305 	mrs	r3, IPSR
 80063b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80063b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f040 8086 	bne.w	80064c6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ba:	f3ef 8310 	mrs	r3, PRIMASK
 80063be:	617b      	str	r3, [r7, #20]
  return(result);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d105      	bne.n	80063d2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063c6:	f3ef 8311 	mrs	r3, BASEPRI
 80063ca:	613b      	str	r3, [r7, #16]
  return(result);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <osSemaphoreNew+0x3e>
 80063d2:	4b3f      	ldr	r3, [pc, #252]	; (80064d0 <osSemaphoreNew+0x134>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d075      	beq.n	80064c6 <osSemaphoreNew+0x12a>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d072      	beq.n	80064c6 <osSemaphoreNew+0x12a>
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d86e      	bhi.n	80064c6 <osSemaphoreNew+0x12a>
    mem = -1;
 80063e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d015      	beq.n	8006420 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d006      	beq.n	800640a <osSemaphoreNew+0x6e>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	2b4f      	cmp	r3, #79	; 0x4f
 8006402:	d902      	bls.n	800640a <osSemaphoreNew+0x6e>
        mem = 1;
 8006404:	2301      	movs	r3, #1
 8006406:	623b      	str	r3, [r7, #32]
 8006408:	e00c      	b.n	8006424 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d108      	bne.n	8006424 <osSemaphoreNew+0x88>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <osSemaphoreNew+0x88>
          mem = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	623b      	str	r3, [r7, #32]
 800641e:	e001      	b.n	8006424 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800642a:	d04c      	beq.n	80064c6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d128      	bne.n	8006484 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d10a      	bne.n	800644e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2203      	movs	r2, #3
 800643e:	9200      	str	r2, [sp, #0]
 8006440:	2200      	movs	r2, #0
 8006442:	2100      	movs	r1, #0
 8006444:	2001      	movs	r0, #1
 8006446:	f000 fbc1 	bl	8006bcc <xQueueGenericCreateStatic>
 800644a:	6278      	str	r0, [r7, #36]	; 0x24
 800644c:	e005      	b.n	800645a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800644e:	2203      	movs	r2, #3
 8006450:	2100      	movs	r1, #0
 8006452:	2001      	movs	r0, #1
 8006454:	f000 fc3c 	bl	8006cd0 <xQueueGenericCreate>
 8006458:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	2b00      	cmp	r3, #0
 800645e:	d022      	beq.n	80064a6 <osSemaphoreNew+0x10a>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01f      	beq.n	80064a6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006466:	2300      	movs	r3, #0
 8006468:	2200      	movs	r2, #0
 800646a:	2100      	movs	r1, #0
 800646c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800646e:	f000 fd07 	bl	8006e80 <xQueueGenericSend>
 8006472:	4603      	mov	r3, r0
 8006474:	2b01      	cmp	r3, #1
 8006476:	d016      	beq.n	80064a6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800647a:	f001 f9bd 	bl	80077f8 <vQueueDelete>
            hSemaphore = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
 8006482:	e010      	b.n	80064a6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d108      	bne.n	800649c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	461a      	mov	r2, r3
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 fc81 	bl	8006d9a <xQueueCreateCountingSemaphoreStatic>
 8006498:	6278      	str	r0, [r7, #36]	; 0x24
 800649a:	e004      	b.n	80064a6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 fcb6 	bl	8006e10 <xQueueCreateCountingSemaphore>
 80064a4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00c      	beq.n	80064c6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <osSemaphoreNew+0x11e>
          name = attr->name;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	e001      	b.n	80064be <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80064be:	69f9      	ldr	r1, [r7, #28]
 80064c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064c2:	f001 fae7 	bl	8007a94 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3728      	adds	r7, #40	; 0x28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20000250 	.word	0x20000250

080064d4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d103      	bne.n	80064f4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80064ec:	f06f 0303 	mvn.w	r3, #3
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	e04b      	b.n	800658c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064f4:	f3ef 8305 	mrs	r3, IPSR
 80064f8:	617b      	str	r3, [r7, #20]
  return(result);
 80064fa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10f      	bne.n	8006520 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006500:	f3ef 8310 	mrs	r3, PRIMASK
 8006504:	613b      	str	r3, [r7, #16]
  return(result);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d105      	bne.n	8006518 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800650c:	f3ef 8311 	mrs	r3, BASEPRI
 8006510:	60fb      	str	r3, [r7, #12]
  return(result);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d026      	beq.n	8006566 <osSemaphoreAcquire+0x92>
 8006518:	4b1f      	ldr	r3, [pc, #124]	; (8006598 <osSemaphoreAcquire+0xc4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d122      	bne.n	8006566 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006526:	f06f 0303 	mvn.w	r3, #3
 800652a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800652c:	e02d      	b.n	800658a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006532:	f107 0308 	add.w	r3, r7, #8
 8006536:	461a      	mov	r2, r3
 8006538:	2100      	movs	r1, #0
 800653a:	69b8      	ldr	r0, [r7, #24]
 800653c:	f001 f8d6 	bl	80076ec <xQueueReceiveFromISR>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d003      	beq.n	800654e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006546:	f06f 0302 	mvn.w	r3, #2
 800654a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800654c:	e01d      	b.n	800658a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01a      	beq.n	800658a <osSemaphoreAcquire+0xb6>
 8006554:	4b11      	ldr	r3, [pc, #68]	; (800659c <osSemaphoreAcquire+0xc8>)
 8006556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006564:	e011      	b.n	800658a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	69b8      	ldr	r0, [r7, #24]
 800656a:	f000 ffab 	bl	80074c4 <xQueueSemaphoreTake>
 800656e:	4603      	mov	r3, r0
 8006570:	2b01      	cmp	r3, #1
 8006572:	d00b      	beq.n	800658c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800657a:	f06f 0301 	mvn.w	r3, #1
 800657e:	61fb      	str	r3, [r7, #28]
 8006580:	e004      	b.n	800658c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006582:	f06f 0302 	mvn.w	r3, #2
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	e000      	b.n	800658c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800658a:	bf00      	nop
      }
    }
  }

  return (stat);
 800658c:	69fb      	ldr	r3, [r7, #28]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000250 	.word	0x20000250
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80065b6:	f06f 0303 	mvn.w	r3, #3
 80065ba:	61fb      	str	r3, [r7, #28]
 80065bc:	e03e      	b.n	800663c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065be:	f3ef 8305 	mrs	r3, IPSR
 80065c2:	617b      	str	r3, [r7, #20]
  return(result);
 80065c4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10f      	bne.n	80065ea <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ca:	f3ef 8310 	mrs	r3, PRIMASK
 80065ce:	613b      	str	r3, [r7, #16]
  return(result);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065d6:	f3ef 8311 	mrs	r3, BASEPRI
 80065da:	60fb      	str	r3, [r7, #12]
  return(result);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01e      	beq.n	8006620 <osSemaphoreRelease+0x80>
 80065e2:	4b19      	ldr	r3, [pc, #100]	; (8006648 <osSemaphoreRelease+0xa8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d11a      	bne.n	8006620 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80065ee:	f107 0308 	add.w	r3, r7, #8
 80065f2:	4619      	mov	r1, r3
 80065f4:	69b8      	ldr	r0, [r7, #24]
 80065f6:	f000 fde9 	bl	80071cc <xQueueGiveFromISR>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d003      	beq.n	8006608 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006600:	f06f 0302 	mvn.w	r3, #2
 8006604:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006606:	e018      	b.n	800663a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d015      	beq.n	800663a <osSemaphoreRelease+0x9a>
 800660e:	4b0f      	ldr	r3, [pc, #60]	; (800664c <osSemaphoreRelease+0xac>)
 8006610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800661e:	e00c      	b.n	800663a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006620:	2300      	movs	r3, #0
 8006622:	2200      	movs	r2, #0
 8006624:	2100      	movs	r1, #0
 8006626:	69b8      	ldr	r0, [r7, #24]
 8006628:	f000 fc2a 	bl	8006e80 <xQueueGenericSend>
 800662c:	4603      	mov	r3, r0
 800662e:	2b01      	cmp	r3, #1
 8006630:	d004      	beq.n	800663c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006632:	f06f 0302 	mvn.w	r3, #2
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	e000      	b.n	800663c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800663a:	bf00      	nop
    }
  }

  return (stat);
 800663c:	69fb      	ldr	r3, [r7, #28]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000250 	.word	0x20000250
 800664c:	e000ed04 	.word	0xe000ed04

08006650 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b08c      	sub	sp, #48	; 0x30
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800665c:	2300      	movs	r3, #0
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006660:	f3ef 8305 	mrs	r3, IPSR
 8006664:	61bb      	str	r3, [r7, #24]
  return(result);
 8006666:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006668:	2b00      	cmp	r3, #0
 800666a:	d16f      	bne.n	800674c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800666c:	f3ef 8310 	mrs	r3, PRIMASK
 8006670:	617b      	str	r3, [r7, #20]
  return(result);
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006678:	f3ef 8311 	mrs	r3, BASEPRI
 800667c:	613b      	str	r3, [r7, #16]
  return(result);
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <osMessageQueueNew+0x3c>
 8006684:	4b34      	ldr	r3, [pc, #208]	; (8006758 <osMessageQueueNew+0x108>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b02      	cmp	r3, #2
 800668a:	d05f      	beq.n	800674c <osMessageQueueNew+0xfc>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d05c      	beq.n	800674c <osMessageQueueNew+0xfc>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d059      	beq.n	800674c <osMessageQueueNew+0xfc>
    mem = -1;
 8006698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800669c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d029      	beq.n	80066f8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d012      	beq.n	80066d2 <osMessageQueueNew+0x82>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	2b4f      	cmp	r3, #79	; 0x4f
 80066b2:	d90e      	bls.n	80066d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	fb01 f303 	mul.w	r3, r1, r3
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d302      	bcc.n	80066d2 <osMessageQueueNew+0x82>
        mem = 1;
 80066cc:	2301      	movs	r3, #1
 80066ce:	623b      	str	r3, [r7, #32]
 80066d0:	e014      	b.n	80066fc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d110      	bne.n	80066fc <osMessageQueueNew+0xac>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10c      	bne.n	80066fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d108      	bne.n	80066fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <osMessageQueueNew+0xac>
          mem = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	623b      	str	r3, [r7, #32]
 80066f6:	e001      	b.n	80066fc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d10b      	bne.n	800671a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2100      	movs	r1, #0
 800670c:	9100      	str	r1, [sp, #0]
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 fa5b 	bl	8006bcc <xQueueGenericCreateStatic>
 8006716:	6278      	str	r0, [r7, #36]	; 0x24
 8006718:	e008      	b.n	800672c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d105      	bne.n	800672c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006720:	2200      	movs	r2, #0
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fad3 	bl	8006cd0 <xQueueGenericCreate>
 800672a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00c      	beq.n	800674c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	e001      	b.n	8006744 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006744:	69f9      	ldr	r1, [r7, #28]
 8006746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006748:	f001 f9a4 	bl	8007a94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800674e:	4618      	mov	r0, r3
 8006750:	3728      	adds	r7, #40	; 0x28
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20000250 	.word	0x20000250

0800675c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800675c:	b580      	push	{r7, lr}
 800675e:	b08a      	sub	sp, #40	; 0x28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	4613      	mov	r3, r2
 800676a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006770:	2300      	movs	r3, #0
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006774:	f3ef 8305 	mrs	r3, IPSR
 8006778:	61fb      	str	r3, [r7, #28]
  return(result);
 800677a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10f      	bne.n	80067a0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006780:	f3ef 8310 	mrs	r3, PRIMASK
 8006784:	61bb      	str	r3, [r7, #24]
  return(result);
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d105      	bne.n	8006798 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800678c:	f3ef 8311 	mrs	r3, BASEPRI
 8006790:	617b      	str	r3, [r7, #20]
  return(result);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d02c      	beq.n	80067f2 <osMessageQueuePut+0x96>
 8006798:	4b28      	ldr	r3, [pc, #160]	; (800683c <osMessageQueuePut+0xe0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d128      	bne.n	80067f2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <osMessageQueuePut+0x56>
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <osMessageQueuePut+0x56>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80067b2:	f06f 0303 	mvn.w	r3, #3
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067b8:	e039      	b.n	800682e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80067be:	f107 0210 	add.w	r2, r7, #16
 80067c2:	2300      	movs	r3, #0
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	6a38      	ldr	r0, [r7, #32]
 80067c8:	f000 fc60 	bl	800708c <xQueueGenericSendFromISR>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d003      	beq.n	80067da <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80067d2:	f06f 0302 	mvn.w	r3, #2
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067d8:	e029      	b.n	800682e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d026      	beq.n	800682e <osMessageQueuePut+0xd2>
 80067e0:	4b17      	ldr	r3, [pc, #92]	; (8006840 <osMessageQueuePut+0xe4>)
 80067e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067f0:	e01d      	b.n	800682e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <osMessageQueuePut+0xa2>
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d103      	bne.n	8006806 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80067fe:	f06f 0303 	mvn.w	r3, #3
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
 8006804:	e014      	b.n	8006830 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006806:	2300      	movs	r3, #0
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	6a38      	ldr	r0, [r7, #32]
 800680e:	f000 fb37 	bl	8006e80 <xQueueGenericSend>
 8006812:	4603      	mov	r3, r0
 8006814:	2b01      	cmp	r3, #1
 8006816:	d00b      	beq.n	8006830 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800681e:	f06f 0301 	mvn.w	r3, #1
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
 8006824:	e004      	b.n	8006830 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006826:	f06f 0302 	mvn.w	r3, #2
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
 800682c:	e000      	b.n	8006830 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800682e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006832:	4618      	mov	r0, r3
 8006834:	3728      	adds	r7, #40	; 0x28
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000250 	.word	0x20000250
 8006840:	e000ed04 	.word	0xe000ed04

08006844 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	; 0x28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006856:	2300      	movs	r3, #0
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800685a:	f3ef 8305 	mrs	r3, IPSR
 800685e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006860:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10f      	bne.n	8006886 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006866:	f3ef 8310 	mrs	r3, PRIMASK
 800686a:	61bb      	str	r3, [r7, #24]
  return(result);
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006872:	f3ef 8311 	mrs	r3, BASEPRI
 8006876:	617b      	str	r3, [r7, #20]
  return(result);
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d02c      	beq.n	80068d8 <osMessageQueueGet+0x94>
 800687e:	4b28      	ldr	r3, [pc, #160]	; (8006920 <osMessageQueueGet+0xdc>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d128      	bne.n	80068d8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <osMessageQueueGet+0x54>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <osMessageQueueGet+0x54>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006898:	f06f 0303 	mvn.w	r3, #3
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800689e:	e038      	b.n	8006912 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80068a4:	f107 0310 	add.w	r3, r7, #16
 80068a8:	461a      	mov	r2, r3
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	6a38      	ldr	r0, [r7, #32]
 80068ae:	f000 ff1d 	bl	80076ec <xQueueReceiveFromISR>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d003      	beq.n	80068c0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80068b8:	f06f 0302 	mvn.w	r3, #2
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80068be:	e028      	b.n	8006912 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d025      	beq.n	8006912 <osMessageQueueGet+0xce>
 80068c6:	4b17      	ldr	r3, [pc, #92]	; (8006924 <osMessageQueueGet+0xe0>)
 80068c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80068d6:	e01c      	b.n	8006912 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <osMessageQueueGet+0xa0>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80068e4:	f06f 0303 	mvn.w	r3, #3
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ea:	e013      	b.n	8006914 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	6a38      	ldr	r0, [r7, #32]
 80068f2:	f000 fd01 	bl	80072f8 <xQueueReceive>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d00b      	beq.n	8006914 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006902:	f06f 0301 	mvn.w	r3, #1
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
 8006908:	e004      	b.n	8006914 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800690a:	f06f 0302 	mvn.w	r3, #2
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
 8006910:	e000      	b.n	8006914 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006912:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006916:	4618      	mov	r0, r3
 8006918:	3728      	adds	r7, #40	; 0x28
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000250 	.word	0x20000250
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4a07      	ldr	r2, [pc, #28]	; (8006954 <vApplicationGetIdleTaskMemory+0x2c>)
 8006938:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4a06      	ldr	r2, [pc, #24]	; (8006958 <vApplicationGetIdleTaskMemory+0x30>)
 800693e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2280      	movs	r2, #128	; 0x80
 8006944:	601a      	str	r2, [r3, #0]
}
 8006946:	bf00      	nop
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20000254 	.word	0x20000254
 8006958:	200002b0 	.word	0x200002b0

0800695c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a07      	ldr	r2, [pc, #28]	; (8006988 <vApplicationGetTimerTaskMemory+0x2c>)
 800696c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	4a06      	ldr	r2, [pc, #24]	; (800698c <vApplicationGetTimerTaskMemory+0x30>)
 8006972:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800697a:	601a      	str	r2, [r3, #0]
}
 800697c:	bf00      	nop
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	200004b0 	.word	0x200004b0
 800698c:	2000050c 	.word	0x2000050c

08006990 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f103 0208 	add.w	r2, r3, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f103 0208 	add.w	r2, r3, #8
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f103 0208 	add.w	r2, r3, #8
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	601a      	str	r2, [r3, #0]
}
 8006a26:	bf00      	nop
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a48:	d103      	bne.n	8006a52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	e00c      	b.n	8006a6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3308      	adds	r3, #8
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e002      	b.n	8006a60 <vListInsert+0x2e>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d2f6      	bcs.n	8006a5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	601a      	str	r2, [r3, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6892      	ldr	r2, [r2, #8]
 8006aba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6852      	ldr	r2, [r2, #4]
 8006ac4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d103      	bne.n	8006ad8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	1e5a      	subs	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10c      	bne.n	8006b26 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	b672      	cpsid	i
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	b662      	cpsie	i
 8006b20:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b22:	bf00      	nop
 8006b24:	e7fe      	b.n	8006b24 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006b26:	f002 fcc9 	bl	80094bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	68f9      	ldr	r1, [r7, #12]
 8006b34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	441a      	add	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	3b01      	subs	r3, #1
 8006b58:	68f9      	ldr	r1, [r7, #12]
 8006b5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	441a      	add	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	22ff      	movs	r2, #255	; 0xff
 8006b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	22ff      	movs	r2, #255	; 0xff
 8006b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d114      	bne.n	8006ba6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01a      	beq.n	8006bba <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3310      	adds	r3, #16
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 fc83 	bl	8008494 <xTaskRemoveFromEventList>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d012      	beq.n	8006bba <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b94:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <xQueueGenericReset+0xd0>)
 8006b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	e009      	b.n	8006bba <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3310      	adds	r3, #16
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff fef0 	bl	8006990 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3324      	adds	r3, #36	; 0x24
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff feeb 	bl	8006990 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bba:	f002 fcb3 	bl	8009524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bbe:	2301      	movs	r3, #1
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08e      	sub	sp, #56	; 0x38
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10c      	bne.n	8006bfa <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	b672      	cpsid	i
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	b662      	cpsie	i
 8006bf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10c      	bne.n	8006c1a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	b672      	cpsid	i
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	b662      	cpsie	i
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <xQueueGenericCreateStatic+0x5a>
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <xQueueGenericCreateStatic+0x5e>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <xQueueGenericCreateStatic+0x60>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10c      	bne.n	8006c4a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	b672      	cpsid	i
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	b662      	cpsie	i
 8006c44:	623b      	str	r3, [r7, #32]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d102      	bne.n	8006c56 <xQueueGenericCreateStatic+0x8a>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <xQueueGenericCreateStatic+0x8e>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <xQueueGenericCreateStatic+0x90>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10c      	bne.n	8006c7a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	b672      	cpsid	i
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	b662      	cpsie	i
 8006c74:	61fb      	str	r3, [r7, #28]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c7a:	2350      	movs	r3, #80	; 0x50
 8006c7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b50      	cmp	r3, #80	; 0x50
 8006c82:	d00c      	beq.n	8006c9e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	b672      	cpsid	i
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	b662      	cpsie	i
 8006c98:	61bb      	str	r3, [r7, #24]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00d      	beq.n	8006cc6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f847 	bl	8006d54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3730      	adds	r7, #48	; 0x30
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10c      	bne.n	8006cfe <xQueueGenericCreate+0x2e>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	b672      	cpsid	i
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	b662      	cpsie	i
 8006cf8:	613b      	str	r3, [r7, #16]
}
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	e004      	b.n	8006d14 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	fb02 f303 	mul.w	r3, r2, r3
 8006d12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	3350      	adds	r3, #80	; 0x50
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f002 fcfb 	bl	8009714 <pvPortMalloc>
 8006d1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d011      	beq.n	8006d4a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	3350      	adds	r3, #80	; 0x50
 8006d2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d38:	79fa      	ldrb	r2, [r7, #7]
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f805 	bl	8006d54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
	}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3720      	adds	r7, #32
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e002      	b.n	8006d76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d82:	2101      	movs	r1, #1
 8006d84:	69b8      	ldr	r0, [r7, #24]
 8006d86:	f7ff feb7 	bl	8006af8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	78fa      	ldrb	r2, [r7, #3]
 8006d8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b08a      	sub	sp, #40	; 0x28
 8006d9e:	af02      	add	r7, sp, #8
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10c      	bne.n	8006dc6 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	b672      	cpsid	i
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	b662      	cpsie	i
 8006dc0:	61bb      	str	r3, [r7, #24]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d90c      	bls.n	8006de8 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	b672      	cpsid	i
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	b662      	cpsie	i
 8006de2:	617b      	str	r3, [r7, #20]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006de8:	2302      	movs	r3, #2
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	2100      	movs	r1, #0
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f7ff feea 	bl	8006bcc <xQueueGenericCreateStatic>
 8006df8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e06:	69fb      	ldr	r3, [r7, #28]
	}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3720      	adds	r7, #32
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10c      	bne.n	8006e3a <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	b672      	cpsid	i
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	b662      	cpsie	i
 8006e34:	613b      	str	r3, [r7, #16]
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d90c      	bls.n	8006e5c <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	b672      	cpsid	i
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	b662      	cpsie	i
 8006e56:	60fb      	str	r3, [r7, #12]
}
 8006e58:	bf00      	nop
 8006e5a:	e7fe      	b.n	8006e5a <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	2100      	movs	r1, #0
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff ff35 	bl	8006cd0 <xQueueGenericCreate>
 8006e66:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e74:	697b      	ldr	r3, [r7, #20]
	}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08e      	sub	sp, #56	; 0x38
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10c      	bne.n	8006eb6 <xQueueGenericSend+0x36>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	b672      	cpsid	i
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	b662      	cpsie	i
 8006eb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d103      	bne.n	8006ec4 <xQueueGenericSend+0x44>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <xQueueGenericSend+0x48>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <xQueueGenericSend+0x4a>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10c      	bne.n	8006ee8 <xQueueGenericSend+0x68>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	b672      	cpsid	i
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	b662      	cpsie	i
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ee4:	bf00      	nop
 8006ee6:	e7fe      	b.n	8006ee6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d103      	bne.n	8006ef6 <xQueueGenericSend+0x76>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <xQueueGenericSend+0x7a>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xQueueGenericSend+0x7c>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10c      	bne.n	8006f1a <xQueueGenericSend+0x9a>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	b672      	cpsid	i
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	b662      	cpsie	i
 8006f14:	623b      	str	r3, [r7, #32]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f1a:	f001 fc81 	bl	8008820 <xTaskGetSchedulerState>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <xQueueGenericSend+0xaa>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <xQueueGenericSend+0xae>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <xQueueGenericSend+0xb0>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10c      	bne.n	8006f4e <xQueueGenericSend+0xce>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	b672      	cpsid	i
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	b662      	cpsie	i
 8006f48:	61fb      	str	r3, [r7, #28]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f4e:	f002 fab5 	bl	80094bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d302      	bcc.n	8006f64 <xQueueGenericSend+0xe4>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d129      	bne.n	8006fb8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	68b9      	ldr	r1, [r7, #8]
 8006f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f6a:	f000 fc82 	bl	8007872 <prvCopyDataToQueue>
 8006f6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d010      	beq.n	8006f9a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	3324      	adds	r3, #36	; 0x24
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f001 fa89 	bl	8008494 <xTaskRemoveFromEventList>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d013      	beq.n	8006fb0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f88:	4b3f      	ldr	r3, [pc, #252]	; (8007088 <xQueueGenericSend+0x208>)
 8006f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	e00a      	b.n	8006fb0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fa0:	4b39      	ldr	r3, [pc, #228]	; (8007088 <xQueueGenericSend+0x208>)
 8006fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fb0:	f002 fab8 	bl	8009524 <vPortExitCritical>
				return pdPASS;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e063      	b.n	8007080 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d103      	bne.n	8006fc6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fbe:	f002 fab1 	bl	8009524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e05c      	b.n	8007080 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d106      	bne.n	8006fda <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fcc:	f107 0314 	add.w	r3, r7, #20
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 fac5 	bl	8008560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fda:	f002 faa3 	bl	8009524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fde:	f001 f82b 	bl	8008038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fe2:	f002 fa6b 	bl	80094bc <vPortEnterCritical>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fec:	b25b      	sxtb	r3, r3
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff2:	d103      	bne.n	8006ffc <xQueueGenericSend+0x17c>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007002:	b25b      	sxtb	r3, r3
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007008:	d103      	bne.n	8007012 <xQueueGenericSend+0x192>
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007012:	f002 fa87 	bl	8009524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007016:	1d3a      	adds	r2, r7, #4
 8007018:	f107 0314 	add.w	r3, r7, #20
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f001 fab4 	bl	800858c <xTaskCheckForTimeOut>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d124      	bne.n	8007074 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800702a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800702c:	f000 fd19 	bl	8007a62 <prvIsQueueFull>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d018      	beq.n	8007068 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	3310      	adds	r3, #16
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f001 f9d4 	bl	80083ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007046:	f000 fca4 	bl	8007992 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800704a:	f001 f803 	bl	8008054 <xTaskResumeAll>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	f47f af7c 	bne.w	8006f4e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <xQueueGenericSend+0x208>)
 8007058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	e772      	b.n	8006f4e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800706a:	f000 fc92 	bl	8007992 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800706e:	f000 fff1 	bl	8008054 <xTaskResumeAll>
 8007072:	e76c      	b.n	8006f4e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007076:	f000 fc8c 	bl	8007992 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800707a:	f000 ffeb 	bl	8008054 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800707e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007080:	4618      	mov	r0, r3
 8007082:	3738      	adds	r7, #56	; 0x38
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08e      	sub	sp, #56	; 0x38
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10c      	bne.n	80070be <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	b672      	cpsid	i
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	b662      	cpsie	i
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070ba:	bf00      	nop
 80070bc:	e7fe      	b.n	80070bc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d103      	bne.n	80070cc <xQueueGenericSendFromISR+0x40>
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <xQueueGenericSendFromISR+0x44>
 80070cc:	2301      	movs	r3, #1
 80070ce:	e000      	b.n	80070d2 <xQueueGenericSendFromISR+0x46>
 80070d0:	2300      	movs	r3, #0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10c      	bne.n	80070f0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070da:	b672      	cpsid	i
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	b662      	cpsie	i
 80070ea:	623b      	str	r3, [r7, #32]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d103      	bne.n	80070fe <xQueueGenericSendFromISR+0x72>
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <xQueueGenericSendFromISR+0x76>
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <xQueueGenericSendFromISR+0x78>
 8007102:	2300      	movs	r3, #0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10c      	bne.n	8007122 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	b672      	cpsid	i
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	b662      	cpsie	i
 800711c:	61fb      	str	r3, [r7, #28]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007122:	f002 fab3 	bl	800968c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007126:	f3ef 8211 	mrs	r2, BASEPRI
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	b672      	cpsid	i
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	b662      	cpsie	i
 800713e:	61ba      	str	r2, [r7, #24]
 8007140:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007142:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	429a      	cmp	r2, r3
 8007150:	d302      	bcc.n	8007158 <xQueueGenericSendFromISR+0xcc>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d12c      	bne.n	80071b2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007168:	f000 fb83 	bl	8007872 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800716c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007174:	d112      	bne.n	800719c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	2b00      	cmp	r3, #0
 800717c:	d016      	beq.n	80071ac <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	3324      	adds	r3, #36	; 0x24
 8007182:	4618      	mov	r0, r3
 8007184:	f001 f986 	bl	8008494 <xTaskRemoveFromEventList>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00e      	beq.n	80071ac <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	e007      	b.n	80071ac <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800719c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071a0:	3301      	adds	r3, #1
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	b25a      	sxtb	r2, r3
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80071ac:	2301      	movs	r3, #1
 80071ae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80071b0:	e001      	b.n	80071b6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	637b      	str	r3, [r7, #52]	; 0x34
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3738      	adds	r7, #56	; 0x38
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08e      	sub	sp, #56	; 0x38
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10c      	bne.n	80071fa <xQueueGiveFromISR+0x2e>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	b672      	cpsid	i
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	b662      	cpsie	i
 80071f4:	623b      	str	r3, [r7, #32]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <xQueueGiveFromISR+0x50>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	b672      	cpsid	i
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	b662      	cpsie	i
 8007216:	61fb      	str	r3, [r7, #28]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d103      	bne.n	800722c <xQueueGiveFromISR+0x60>
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <xQueueGiveFromISR+0x64>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <xQueueGiveFromISR+0x66>
 8007230:	2300      	movs	r3, #0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10c      	bne.n	8007250 <xQueueGiveFromISR+0x84>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	b672      	cpsid	i
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	b662      	cpsie	i
 800724a:	61bb      	str	r3, [r7, #24]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007250:	f002 fa1c 	bl	800968c <vPortValidateInterruptPriority>
	__asm volatile
 8007254:	f3ef 8211 	mrs	r2, BASEPRI
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	b672      	cpsid	i
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	b662      	cpsie	i
 800726c:	617a      	str	r2, [r7, #20]
 800726e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007270:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007280:	429a      	cmp	r2, r3
 8007282:	d22b      	bcs.n	80072dc <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800728a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007296:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800729a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800729e:	d112      	bne.n	80072c6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d016      	beq.n	80072d6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	3324      	adds	r3, #36	; 0x24
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 f8f1 	bl	8008494 <xTaskRemoveFromEventList>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00e      	beq.n	80072d6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00b      	beq.n	80072d6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2201      	movs	r2, #1
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	e007      	b.n	80072d6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ca:	3301      	adds	r3, #1
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	b25a      	sxtb	r2, r3
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072d6:	2301      	movs	r3, #1
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
 80072da:	e001      	b.n	80072e0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072dc:	2300      	movs	r3, #0
 80072de:	637b      	str	r3, [r7, #52]	; 0x34
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f383 8811 	msr	BASEPRI, r3
}
 80072ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3738      	adds	r7, #56	; 0x38
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08c      	sub	sp, #48	; 0x30
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007304:	2300      	movs	r3, #0
 8007306:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10c      	bne.n	800732c <xQueueReceive+0x34>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	b672      	cpsid	i
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	b662      	cpsie	i
 8007326:	623b      	str	r3, [r7, #32]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <xQueueReceive+0x42>
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <xQueueReceive+0x46>
 800733a:	2301      	movs	r3, #1
 800733c:	e000      	b.n	8007340 <xQueueReceive+0x48>
 800733e:	2300      	movs	r3, #0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10c      	bne.n	800735e <xQueueReceive+0x66>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	b672      	cpsid	i
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	b662      	cpsie	i
 8007358:	61fb      	str	r3, [r7, #28]
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800735e:	f001 fa5f 	bl	8008820 <xTaskGetSchedulerState>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <xQueueReceive+0x76>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <xQueueReceive+0x7a>
 800736e:	2301      	movs	r3, #1
 8007370:	e000      	b.n	8007374 <xQueueReceive+0x7c>
 8007372:	2300      	movs	r3, #0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10c      	bne.n	8007392 <xQueueReceive+0x9a>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	b672      	cpsid	i
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	b662      	cpsie	i
 800738c:	61bb      	str	r3, [r7, #24]
}
 800738e:	bf00      	nop
 8007390:	e7fe      	b.n	8007390 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007392:	f002 f893 	bl	80094bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01f      	beq.n	80073e2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a6:	f000 face 	bl	8007946 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	1e5a      	subs	r2, r3, #1
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00f      	beq.n	80073da <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	3310      	adds	r3, #16
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 f868 	bl	8008494 <xTaskRemoveFromEventList>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073ca:	4b3d      	ldr	r3, [pc, #244]	; (80074c0 <xQueueReceive+0x1c8>)
 80073cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073da:	f002 f8a3 	bl	8009524 <vPortExitCritical>
				return pdPASS;
 80073de:	2301      	movs	r3, #1
 80073e0:	e069      	b.n	80074b6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d103      	bne.n	80073f0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073e8:	f002 f89c 	bl	8009524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073ec:	2300      	movs	r3, #0
 80073ee:	e062      	b.n	80074b6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d106      	bne.n	8007404 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073f6:	f107 0310 	add.w	r3, r7, #16
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 f8b0 	bl	8008560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007400:	2301      	movs	r3, #1
 8007402:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007404:	f002 f88e 	bl	8009524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007408:	f000 fe16 	bl	8008038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800740c:	f002 f856 	bl	80094bc <vPortEnterCritical>
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007416:	b25b      	sxtb	r3, r3
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800741c:	d103      	bne.n	8007426 <xQueueReceive+0x12e>
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800742c:	b25b      	sxtb	r3, r3
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007432:	d103      	bne.n	800743c <xQueueReceive+0x144>
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800743c:	f002 f872 	bl	8009524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007440:	1d3a      	adds	r2, r7, #4
 8007442:	f107 0310 	add.w	r3, r7, #16
 8007446:	4611      	mov	r1, r2
 8007448:	4618      	mov	r0, r3
 800744a:	f001 f89f 	bl	800858c <xTaskCheckForTimeOut>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d123      	bne.n	800749c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007456:	f000 faee 	bl	8007a36 <prvIsQueueEmpty>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d017      	beq.n	8007490 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	3324      	adds	r3, #36	; 0x24
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	4611      	mov	r1, r2
 8007468:	4618      	mov	r0, r3
 800746a:	f000 ffbf 	bl	80083ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800746e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007470:	f000 fa8f 	bl	8007992 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007474:	f000 fdee 	bl	8008054 <xTaskResumeAll>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d189      	bne.n	8007392 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800747e:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <xQueueReceive+0x1c8>)
 8007480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	e780      	b.n	8007392 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007492:	f000 fa7e 	bl	8007992 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007496:	f000 fddd 	bl	8008054 <xTaskResumeAll>
 800749a:	e77a      	b.n	8007392 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800749c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800749e:	f000 fa78 	bl	8007992 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074a2:	f000 fdd7 	bl	8008054 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a8:	f000 fac5 	bl	8007a36 <prvIsQueueEmpty>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f43f af6f 	beq.w	8007392 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3730      	adds	r7, #48	; 0x30
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	e000ed04 	.word	0xe000ed04

080074c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08e      	sub	sp, #56	; 0x38
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10c      	bne.n	80074fa <xQueueSemaphoreTake+0x36>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	b672      	cpsid	i
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	b662      	cpsie	i
 80074f4:	623b      	str	r3, [r7, #32]
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00c      	beq.n	800751c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007506:	b672      	cpsid	i
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	b662      	cpsie	i
 8007516:	61fb      	str	r3, [r7, #28]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800751c:	f001 f980 	bl	8008820 <xTaskGetSchedulerState>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d102      	bne.n	800752c <xQueueSemaphoreTake+0x68>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <xQueueSemaphoreTake+0x6c>
 800752c:	2301      	movs	r3, #1
 800752e:	e000      	b.n	8007532 <xQueueSemaphoreTake+0x6e>
 8007530:	2300      	movs	r3, #0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10c      	bne.n	8007550 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753a:	b672      	cpsid	i
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	b662      	cpsie	i
 800754a:	61bb      	str	r3, [r7, #24]
}
 800754c:	bf00      	nop
 800754e:	e7fe      	b.n	800754e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007550:	f001 ffb4 	bl	80094bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	2b00      	cmp	r3, #0
 800755e:	d024      	beq.n	80075aa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	1e5a      	subs	r2, r3, #1
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007570:	f001 fad4 	bl	8008b1c <pvTaskIncrementMutexHeldCount>
 8007574:	4602      	mov	r2, r0
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00f      	beq.n	80075a2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	3310      	adds	r3, #16
 8007586:	4618      	mov	r0, r3
 8007588:	f000 ff84 	bl	8008494 <xTaskRemoveFromEventList>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d007      	beq.n	80075a2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007592:	4b55      	ldr	r3, [pc, #340]	; (80076e8 <xQueueSemaphoreTake+0x224>)
 8007594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075a2:	f001 ffbf 	bl	8009524 <vPortExitCritical>
				return pdPASS;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e099      	b.n	80076de <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d113      	bne.n	80075d8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00c      	beq.n	80075d0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	b672      	cpsid	i
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	b662      	cpsie	i
 80075ca:	617b      	str	r3, [r7, #20]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80075d0:	f001 ffa8 	bl	8009524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075d4:	2300      	movs	r3, #0
 80075d6:	e082      	b.n	80076de <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075de:	f107 030c 	add.w	r3, r7, #12
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 ffbc 	bl	8008560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075e8:	2301      	movs	r3, #1
 80075ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075ec:	f001 ff9a 	bl	8009524 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075f0:	f000 fd22 	bl	8008038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075f4:	f001 ff62 	bl	80094bc <vPortEnterCritical>
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075fe:	b25b      	sxtb	r3, r3
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007604:	d103      	bne.n	800760e <xQueueSemaphoreTake+0x14a>
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007614:	b25b      	sxtb	r3, r3
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800761a:	d103      	bne.n	8007624 <xQueueSemaphoreTake+0x160>
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007624:	f001 ff7e 	bl	8009524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007628:	463a      	mov	r2, r7
 800762a:	f107 030c 	add.w	r3, r7, #12
 800762e:	4611      	mov	r1, r2
 8007630:	4618      	mov	r0, r3
 8007632:	f000 ffab 	bl	800858c <xTaskCheckForTimeOut>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d132      	bne.n	80076a2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800763c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800763e:	f000 f9fa 	bl	8007a36 <prvIsQueueEmpty>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d026      	beq.n	8007696 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d109      	bne.n	8007664 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007650:	f001 ff34 	bl	80094bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	4618      	mov	r0, r3
 800765a:	f001 f8ff 	bl	800885c <xTaskPriorityInherit>
 800765e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007660:	f001 ff60 	bl	8009524 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	3324      	adds	r3, #36	; 0x24
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f000 febd 	bl	80083ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007672:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007674:	f000 f98d 	bl	8007992 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007678:	f000 fcec 	bl	8008054 <xTaskResumeAll>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	f47f af66 	bne.w	8007550 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007684:	4b18      	ldr	r3, [pc, #96]	; (80076e8 <xQueueSemaphoreTake+0x224>)
 8007686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	e75c      	b.n	8007550 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007696:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007698:	f000 f97b 	bl	8007992 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800769c:	f000 fcda 	bl	8008054 <xTaskResumeAll>
 80076a0:	e756      	b.n	8007550 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80076a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076a4:	f000 f975 	bl	8007992 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076a8:	f000 fcd4 	bl	8008054 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076ae:	f000 f9c2 	bl	8007a36 <prvIsQueueEmpty>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f43f af4b 	beq.w	8007550 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00d      	beq.n	80076dc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80076c0:	f001 fefc 	bl	80094bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80076c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076c6:	f000 f8bc 	bl	8007842 <prvGetDisinheritPriorityAfterTimeout>
 80076ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 f99c 	bl	8008a10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80076d8:	f001 ff24 	bl	8009524 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3738      	adds	r7, #56	; 0x38
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08e      	sub	sp, #56	; 0x38
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10c      	bne.n	800771c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	b672      	cpsid	i
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	b662      	cpsie	i
 8007716:	623b      	str	r3, [r7, #32]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d103      	bne.n	800772a <xQueueReceiveFromISR+0x3e>
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <xQueueReceiveFromISR+0x42>
 800772a:	2301      	movs	r3, #1
 800772c:	e000      	b.n	8007730 <xQueueReceiveFromISR+0x44>
 800772e:	2300      	movs	r3, #0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10c      	bne.n	800774e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	b672      	cpsid	i
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	b662      	cpsie	i
 8007748:	61fb      	str	r3, [r7, #28]
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800774e:	f001 ff9d 	bl	800968c <vPortValidateInterruptPriority>
	__asm volatile
 8007752:	f3ef 8211 	mrs	r2, BASEPRI
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	b672      	cpsid	i
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	b662      	cpsie	i
 800776a:	61ba      	str	r2, [r7, #24]
 800776c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800776e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007770:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007776:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	2b00      	cmp	r3, #0
 800777c:	d02f      	beq.n	80077de <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007788:	68b9      	ldr	r1, [r7, #8]
 800778a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800778c:	f000 f8db 	bl	8007946 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	1e5a      	subs	r2, r3, #1
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007798:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077a0:	d112      	bne.n	80077c8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d016      	beq.n	80077d8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	3310      	adds	r3, #16
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fe70 	bl	8008494 <xTaskRemoveFromEventList>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00e      	beq.n	80077d8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00b      	beq.n	80077d8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	e007      	b.n	80077d8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80077c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077cc:	3301      	adds	r3, #1
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	b25a      	sxtb	r2, r3
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80077d8:	2301      	movs	r3, #1
 80077da:	637b      	str	r3, [r7, #52]	; 0x34
 80077dc:	e001      	b.n	80077e2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80077de:	2300      	movs	r3, #0
 80077e0:	637b      	str	r3, [r7, #52]	; 0x34
 80077e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f383 8811 	msr	BASEPRI, r3
}
 80077ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3738      	adds	r7, #56	; 0x38
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10c      	bne.n	8007824 <vQueueDelete+0x2c>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	b672      	cpsid	i
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	b662      	cpsie	i
 800781e:	60bb      	str	r3, [r7, #8]
}
 8007820:	bf00      	nop
 8007822:	e7fe      	b.n	8007822 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 f95f 	bl	8007ae8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f002 f837 	bl	80098a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800783a:	bf00      	nop
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d006      	beq.n	8007860 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800785c:	60fb      	str	r3, [r7, #12]
 800785e:	e001      	b.n	8007864 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007860:	2300      	movs	r3, #0
 8007862:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007864:	68fb      	ldr	r3, [r7, #12]
	}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b086      	sub	sp, #24
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10d      	bne.n	80078ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d14d      	bne.n	8007934 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	4618      	mov	r0, r3
 800789e:	f001 f845 	bl	800892c <xTaskPriorityDisinherit>
 80078a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	609a      	str	r2, [r3, #8]
 80078aa:	e043      	b.n	8007934 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d119      	bne.n	80078e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6858      	ldr	r0, [r3, #4]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	461a      	mov	r2, r3
 80078bc:	68b9      	ldr	r1, [r7, #8]
 80078be:	f002 f937 	bl	8009b30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	441a      	add	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d32b      	bcc.n	8007934 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	605a      	str	r2, [r3, #4]
 80078e4:	e026      	b.n	8007934 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68d8      	ldr	r0, [r3, #12]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	461a      	mov	r2, r3
 80078f0:	68b9      	ldr	r1, [r7, #8]
 80078f2:	f002 f91d 	bl	8009b30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	425b      	negs	r3, r3
 8007900:	441a      	add	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	429a      	cmp	r2, r3
 8007910:	d207      	bcs.n	8007922 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	425b      	negs	r3, r3
 800791c:	441a      	add	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b02      	cmp	r3, #2
 8007926:	d105      	bne.n	8007934 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	3b01      	subs	r3, #1
 8007932:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800793c:	697b      	ldr	r3, [r7, #20]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d018      	beq.n	800798a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68da      	ldr	r2, [r3, #12]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	441a      	add	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	429a      	cmp	r2, r3
 8007970:	d303      	bcc.n	800797a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68d9      	ldr	r1, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	461a      	mov	r2, r3
 8007984:	6838      	ldr	r0, [r7, #0]
 8007986:	f002 f8d3 	bl	8009b30 <memcpy>
	}
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800799a:	f001 fd8f 	bl	80094bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079a6:	e011      	b.n	80079cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d012      	beq.n	80079d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3324      	adds	r3, #36	; 0x24
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 fd6d 	bl	8008494 <xTaskRemoveFromEventList>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079c0:	f000 fe4a 	bl	8008658 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dce9      	bgt.n	80079a8 <prvUnlockQueue+0x16>
 80079d4:	e000      	b.n	80079d8 <prvUnlockQueue+0x46>
					break;
 80079d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	22ff      	movs	r2, #255	; 0xff
 80079dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079e0:	f001 fda0 	bl	8009524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079e4:	f001 fd6a 	bl	80094bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079f0:	e011      	b.n	8007a16 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d012      	beq.n	8007a20 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3310      	adds	r3, #16
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fd48 	bl	8008494 <xTaskRemoveFromEventList>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a0a:	f000 fe25 	bl	8008658 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	dce9      	bgt.n	80079f2 <prvUnlockQueue+0x60>
 8007a1e:	e000      	b.n	8007a22 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	22ff      	movs	r2, #255	; 0xff
 8007a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a2a:	f001 fd7b 	bl	8009524 <vPortExitCritical>
}
 8007a2e:	bf00      	nop
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a3e:	f001 fd3d 	bl	80094bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d102      	bne.n	8007a50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	e001      	b.n	8007a54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a54:	f001 fd66 	bl	8009524 <vPortExitCritical>

	return xReturn;
 8007a58:	68fb      	ldr	r3, [r7, #12]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b084      	sub	sp, #16
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a6a:	f001 fd27 	bl	80094bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d102      	bne.n	8007a80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	e001      	b.n	8007a84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a84:	f001 fd4e 	bl	8009524 <vPortExitCritical>

	return xReturn;
 8007a88:	68fb      	ldr	r3, [r7, #12]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	e014      	b.n	8007ace <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007aa4:	4a0f      	ldr	r2, [pc, #60]	; (8007ae4 <vQueueAddToRegistry+0x50>)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10b      	bne.n	8007ac8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ab0:	490c      	ldr	r1, [pc, #48]	; (8007ae4 <vQueueAddToRegistry+0x50>)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007aba:	4a0a      	ldr	r2, [pc, #40]	; (8007ae4 <vQueueAddToRegistry+0x50>)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	4413      	add	r3, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ac6:	e006      	b.n	8007ad6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3301      	adds	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b07      	cmp	r3, #7
 8007ad2:	d9e7      	bls.n	8007aa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20004d08 	.word	0x20004d08

08007ae8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e016      	b.n	8007b24 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007af6:	4a10      	ldr	r2, [pc, #64]	; (8007b38 <vQueueUnregisterQueue+0x50>)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	4413      	add	r3, r2
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d10b      	bne.n	8007b1e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007b06:	4a0c      	ldr	r2, [pc, #48]	; (8007b38 <vQueueUnregisterQueue+0x50>)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007b10:	4a09      	ldr	r2, [pc, #36]	; (8007b38 <vQueueUnregisterQueue+0x50>)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	4413      	add	r3, r2
 8007b18:	2200      	movs	r2, #0
 8007b1a:	605a      	str	r2, [r3, #4]
				break;
 8007b1c:	e006      	b.n	8007b2c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3301      	adds	r3, #1
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b07      	cmp	r3, #7
 8007b28:	d9e5      	bls.n	8007af6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007b2a:	bf00      	nop
 8007b2c:	bf00      	nop
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	20004d08 	.word	0x20004d08

08007b3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b4c:	f001 fcb6 	bl	80094bc <vPortEnterCritical>
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b56:	b25b      	sxtb	r3, r3
 8007b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b5c:	d103      	bne.n	8007b66 <vQueueWaitForMessageRestricted+0x2a>
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b6c:	b25b      	sxtb	r3, r3
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b72:	d103      	bne.n	8007b7c <vQueueWaitForMessageRestricted+0x40>
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b7c:	f001 fcd2 	bl	8009524 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d106      	bne.n	8007b96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	3324      	adds	r3, #36	; 0x24
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fc51 	bl	8008438 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b96:	6978      	ldr	r0, [r7, #20]
 8007b98:	f7ff fefb 	bl	8007992 <prvUnlockQueue>
	}
 8007b9c:	bf00      	nop
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08e      	sub	sp, #56	; 0x38
 8007ba8:	af04      	add	r7, sp, #16
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10c      	bne.n	8007bd2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	b672      	cpsid	i
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	b662      	cpsie	i
 8007bcc:	623b      	str	r3, [r7, #32]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10c      	bne.n	8007bf2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	b672      	cpsid	i
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	b662      	cpsie	i
 8007bec:	61fb      	str	r3, [r7, #28]
}
 8007bee:	bf00      	nop
 8007bf0:	e7fe      	b.n	8007bf0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007bf2:	235c      	movs	r3, #92	; 0x5c
 8007bf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	2b5c      	cmp	r3, #92	; 0x5c
 8007bfa:	d00c      	beq.n	8007c16 <xTaskCreateStatic+0x72>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	b672      	cpsid	i
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	b662      	cpsie	i
 8007c10:	61bb      	str	r3, [r7, #24]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d01e      	beq.n	8007c5c <xTaskCreateStatic+0xb8>
 8007c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01b      	beq.n	8007c5c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	2202      	movs	r2, #2
 8007c32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c36:	2300      	movs	r3, #0
 8007c38:	9303      	str	r3, [sp, #12]
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	9302      	str	r3, [sp, #8]
 8007c3e:	f107 0314 	add.w	r3, r7, #20
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f850 	bl	8007cf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c56:	f000 f8df 	bl	8007e18 <prvAddNewTaskToReadyList>
 8007c5a:	e001      	b.n	8007c60 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c60:	697b      	ldr	r3, [r7, #20]
	}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3728      	adds	r7, #40	; 0x28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b08c      	sub	sp, #48	; 0x30
 8007c6e:	af04      	add	r7, sp, #16
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	603b      	str	r3, [r7, #0]
 8007c76:	4613      	mov	r3, r2
 8007c78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f001 fd48 	bl	8009714 <pvPortMalloc>
 8007c84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00e      	beq.n	8007caa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c8c:	205c      	movs	r0, #92	; 0x5c
 8007c8e:	f001 fd41 	bl	8009714 <pvPortMalloc>
 8007c92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8007ca0:	e005      	b.n	8007cae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ca2:	6978      	ldr	r0, [r7, #20]
 8007ca4:	f001 fe00 	bl	80098a8 <vPortFree>
 8007ca8:	e001      	b.n	8007cae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d017      	beq.n	8007ce4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007cbc:	88fa      	ldrh	r2, [r7, #6]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	9303      	str	r3, [sp, #12]
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	9302      	str	r3, [sp, #8]
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	68b9      	ldr	r1, [r7, #8]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f80e 	bl	8007cf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cd8:	69f8      	ldr	r0, [r7, #28]
 8007cda:	f000 f89d 	bl	8007e18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	61bb      	str	r3, [r7, #24]
 8007ce2:	e002      	b.n	8007cea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ce8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cea:	69bb      	ldr	r3, [r7, #24]
	}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3720      	adds	r7, #32
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	21a5      	movs	r1, #165	; 0xa5
 8007d0e:	f001 ff1d 	bl	8009b4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007d1c:	440b      	add	r3, r1
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	f023 0307 	bic.w	r3, r3, #7
 8007d2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00c      	beq.n	8007d50 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3a:	b672      	cpsid	i
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	b662      	cpsie	i
 8007d4a:	617b      	str	r3, [r7, #20]
}
 8007d4c:	bf00      	nop
 8007d4e:	e7fe      	b.n	8007d4e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d01f      	beq.n	8007d96 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d56:	2300      	movs	r3, #0
 8007d58:	61fb      	str	r3, [r7, #28]
 8007d5a:	e012      	b.n	8007d82 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	4413      	add	r3, r2
 8007d62:	7819      	ldrb	r1, [r3, #0]
 8007d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	4413      	add	r3, r2
 8007d6a:	3334      	adds	r3, #52	; 0x34
 8007d6c:	460a      	mov	r2, r1
 8007d6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d006      	beq.n	8007d8a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	61fb      	str	r3, [r7, #28]
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	2b0f      	cmp	r3, #15
 8007d86:	d9e9      	bls.n	8007d5c <prvInitialiseNewTask+0x68>
 8007d88:	e000      	b.n	8007d8c <prvInitialiseNewTask+0x98>
			{
				break;
 8007d8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d94:	e003      	b.n	8007d9e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	2b37      	cmp	r3, #55	; 0x37
 8007da2:	d901      	bls.n	8007da8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007da4:	2337      	movs	r3, #55	; 0x37
 8007da6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	2200      	movs	r2, #0
 8007db8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe fe06 	bl	80069d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	3318      	adds	r3, #24
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fe01 	bl	80069d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	2200      	movs	r2, #0
 8007de8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	68f9      	ldr	r1, [r7, #12]
 8007df6:	69b8      	ldr	r0, [r7, #24]
 8007df8:	f001 fa54 	bl	80092a4 <pxPortInitialiseStack>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e0e:	bf00      	nop
 8007e10:	3720      	adds	r7, #32
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e20:	f001 fb4c 	bl	80094bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e24:	4b2d      	ldr	r3, [pc, #180]	; (8007edc <prvAddNewTaskToReadyList+0xc4>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	4a2c      	ldr	r2, [pc, #176]	; (8007edc <prvAddNewTaskToReadyList+0xc4>)
 8007e2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e2e:	4b2c      	ldr	r3, [pc, #176]	; (8007ee0 <prvAddNewTaskToReadyList+0xc8>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d109      	bne.n	8007e4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e36:	4a2a      	ldr	r2, [pc, #168]	; (8007ee0 <prvAddNewTaskToReadyList+0xc8>)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e3c:	4b27      	ldr	r3, [pc, #156]	; (8007edc <prvAddNewTaskToReadyList+0xc4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d110      	bne.n	8007e66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e44:	f000 fc2c 	bl	80086a0 <prvInitialiseTaskLists>
 8007e48:	e00d      	b.n	8007e66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e4a:	4b26      	ldr	r3, [pc, #152]	; (8007ee4 <prvAddNewTaskToReadyList+0xcc>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e52:	4b23      	ldr	r3, [pc, #140]	; (8007ee0 <prvAddNewTaskToReadyList+0xc8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d802      	bhi.n	8007e66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e60:	4a1f      	ldr	r2, [pc, #124]	; (8007ee0 <prvAddNewTaskToReadyList+0xc8>)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e66:	4b20      	ldr	r3, [pc, #128]	; (8007ee8 <prvAddNewTaskToReadyList+0xd0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	4a1e      	ldr	r2, [pc, #120]	; (8007ee8 <prvAddNewTaskToReadyList+0xd0>)
 8007e6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e70:	4b1d      	ldr	r3, [pc, #116]	; (8007ee8 <prvAddNewTaskToReadyList+0xd0>)
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7c:	4b1b      	ldr	r3, [pc, #108]	; (8007eec <prvAddNewTaskToReadyList+0xd4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d903      	bls.n	8007e8c <prvAddNewTaskToReadyList+0x74>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	4a18      	ldr	r2, [pc, #96]	; (8007eec <prvAddNewTaskToReadyList+0xd4>)
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4a15      	ldr	r2, [pc, #84]	; (8007ef0 <prvAddNewTaskToReadyList+0xd8>)
 8007e9a:	441a      	add	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	f7fe fda1 	bl	80069ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ea8:	f001 fb3c 	bl	8009524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007eac:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <prvAddNewTaskToReadyList+0xcc>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00e      	beq.n	8007ed2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007eb4:	4b0a      	ldr	r3, [pc, #40]	; (8007ee0 <prvAddNewTaskToReadyList+0xc8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d207      	bcs.n	8007ed2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ec2:	4b0c      	ldr	r3, [pc, #48]	; (8007ef4 <prvAddNewTaskToReadyList+0xdc>)
 8007ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ed2:	bf00      	nop
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000de0 	.word	0x20000de0
 8007ee0:	2000090c 	.word	0x2000090c
 8007ee4:	20000dec 	.word	0x20000dec
 8007ee8:	20000dfc 	.word	0x20000dfc
 8007eec:	20000de8 	.word	0x20000de8
 8007ef0:	20000910 	.word	0x20000910
 8007ef4:	e000ed04 	.word	0xe000ed04

08007ef8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d019      	beq.n	8007f3e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f0a:	4b14      	ldr	r3, [pc, #80]	; (8007f5c <vTaskDelay+0x64>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00c      	beq.n	8007f2c <vTaskDelay+0x34>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	b672      	cpsid	i
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	b662      	cpsie	i
 8007f26:	60bb      	str	r3, [r7, #8]
}
 8007f28:	bf00      	nop
 8007f2a:	e7fe      	b.n	8007f2a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007f2c:	f000 f884 	bl	8008038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f30:	2100      	movs	r1, #0
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fe06 	bl	8008b44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f38:	f000 f88c 	bl	8008054 <xTaskResumeAll>
 8007f3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d107      	bne.n	8007f54 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007f44:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <vTaskDelay+0x68>)
 8007f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f54:	bf00      	nop
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20000e08 	.word	0x20000e08
 8007f60:	e000ed04 	.word	0xe000ed04

08007f64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	; 0x28
 8007f68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f72:	463a      	mov	r2, r7
 8007f74:	1d39      	adds	r1, r7, #4
 8007f76:	f107 0308 	add.w	r3, r7, #8
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fcd4 	bl	8006928 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	9202      	str	r2, [sp, #8]
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	460a      	mov	r2, r1
 8007f92:	4923      	ldr	r1, [pc, #140]	; (8008020 <vTaskStartScheduler+0xbc>)
 8007f94:	4823      	ldr	r0, [pc, #140]	; (8008024 <vTaskStartScheduler+0xc0>)
 8007f96:	f7ff fe05 	bl	8007ba4 <xTaskCreateStatic>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4a22      	ldr	r2, [pc, #136]	; (8008028 <vTaskStartScheduler+0xc4>)
 8007f9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fa0:	4b21      	ldr	r3, [pc, #132]	; (8008028 <vTaskStartScheduler+0xc4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	e001      	b.n	8007fb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d102      	bne.n	8007fbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fb8:	f000 fe18 	bl	8008bec <xTimerCreateTimerTask>
 8007fbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d118      	bne.n	8007ff6 <vTaskStartScheduler+0x92>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	b672      	cpsid	i
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	b662      	cpsie	i
 8007fd8:	613b      	str	r3, [r7, #16]
}
 8007fda:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fdc:	4b13      	ldr	r3, [pc, #76]	; (800802c <vTaskStartScheduler+0xc8>)
 8007fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fe2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fe4:	4b12      	ldr	r3, [pc, #72]	; (8008030 <vTaskStartScheduler+0xcc>)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fea:	4b12      	ldr	r3, [pc, #72]	; (8008034 <vTaskStartScheduler+0xd0>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ff0:	f001 f9e6 	bl	80093c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ff4:	e010      	b.n	8008018 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ffc:	d10c      	bne.n	8008018 <vTaskStartScheduler+0xb4>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	b672      	cpsid	i
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	b662      	cpsie	i
 8008012:	60fb      	str	r3, [r7, #12]
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <vTaskStartScheduler+0xb2>
}
 8008018:	bf00      	nop
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	0800af80 	.word	0x0800af80
 8008024:	08008671 	.word	0x08008671
 8008028:	20000e04 	.word	0x20000e04
 800802c:	20000e00 	.word	0x20000e00
 8008030:	20000dec 	.word	0x20000dec
 8008034:	20000de4 	.word	0x20000de4

08008038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008038:	b480      	push	{r7}
 800803a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800803c:	4b04      	ldr	r3, [pc, #16]	; (8008050 <vTaskSuspendAll+0x18>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3301      	adds	r3, #1
 8008042:	4a03      	ldr	r2, [pc, #12]	; (8008050 <vTaskSuspendAll+0x18>)
 8008044:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008046:	bf00      	nop
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	20000e08 	.word	0x20000e08

08008054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800805e:	2300      	movs	r3, #0
 8008060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008062:	4b43      	ldr	r3, [pc, #268]	; (8008170 <xTaskResumeAll+0x11c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10c      	bne.n	8008084 <xTaskResumeAll+0x30>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	b672      	cpsid	i
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	b662      	cpsie	i
 800807e:	603b      	str	r3, [r7, #0]
}
 8008080:	bf00      	nop
 8008082:	e7fe      	b.n	8008082 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008084:	f001 fa1a 	bl	80094bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008088:	4b39      	ldr	r3, [pc, #228]	; (8008170 <xTaskResumeAll+0x11c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3b01      	subs	r3, #1
 800808e:	4a38      	ldr	r2, [pc, #224]	; (8008170 <xTaskResumeAll+0x11c>)
 8008090:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008092:	4b37      	ldr	r3, [pc, #220]	; (8008170 <xTaskResumeAll+0x11c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d162      	bne.n	8008160 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800809a:	4b36      	ldr	r3, [pc, #216]	; (8008174 <xTaskResumeAll+0x120>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d05e      	beq.n	8008160 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080a2:	e02f      	b.n	8008104 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a4:	4b34      	ldr	r3, [pc, #208]	; (8008178 <xTaskResumeAll+0x124>)
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3318      	adds	r3, #24
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe fcf7 	bl	8006aa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3304      	adds	r3, #4
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe fcf2 	bl	8006aa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c4:	4b2d      	ldr	r3, [pc, #180]	; (800817c <xTaskResumeAll+0x128>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d903      	bls.n	80080d4 <xTaskResumeAll+0x80>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	4a2a      	ldr	r2, [pc, #168]	; (800817c <xTaskResumeAll+0x128>)
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4a27      	ldr	r2, [pc, #156]	; (8008180 <xTaskResumeAll+0x12c>)
 80080e2:	441a      	add	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3304      	adds	r3, #4
 80080e8:	4619      	mov	r1, r3
 80080ea:	4610      	mov	r0, r2
 80080ec:	f7fe fc7d 	bl	80069ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f4:	4b23      	ldr	r3, [pc, #140]	; (8008184 <xTaskResumeAll+0x130>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d302      	bcc.n	8008104 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80080fe:	4b22      	ldr	r3, [pc, #136]	; (8008188 <xTaskResumeAll+0x134>)
 8008100:	2201      	movs	r2, #1
 8008102:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008104:	4b1c      	ldr	r3, [pc, #112]	; (8008178 <xTaskResumeAll+0x124>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1cb      	bne.n	80080a4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008112:	f000 fb65 	bl	80087e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008116:	4b1d      	ldr	r3, [pc, #116]	; (800818c <xTaskResumeAll+0x138>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d010      	beq.n	8008144 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008122:	f000 f847 	bl	80081b4 <xTaskIncrementTick>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800812c:	4b16      	ldr	r3, [pc, #88]	; (8008188 <xTaskResumeAll+0x134>)
 800812e:	2201      	movs	r2, #1
 8008130:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3b01      	subs	r3, #1
 8008136:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f1      	bne.n	8008122 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <xTaskResumeAll+0x138>)
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008144:	4b10      	ldr	r3, [pc, #64]	; (8008188 <xTaskResumeAll+0x134>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d009      	beq.n	8008160 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800814c:	2301      	movs	r3, #1
 800814e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008150:	4b0f      	ldr	r3, [pc, #60]	; (8008190 <xTaskResumeAll+0x13c>)
 8008152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008160:	f001 f9e0 	bl	8009524 <vPortExitCritical>

	return xAlreadyYielded;
 8008164:	68bb      	ldr	r3, [r7, #8]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000e08 	.word	0x20000e08
 8008174:	20000de0 	.word	0x20000de0
 8008178:	20000da0 	.word	0x20000da0
 800817c:	20000de8 	.word	0x20000de8
 8008180:	20000910 	.word	0x20000910
 8008184:	2000090c 	.word	0x2000090c
 8008188:	20000df4 	.word	0x20000df4
 800818c:	20000df0 	.word	0x20000df0
 8008190:	e000ed04 	.word	0xe000ed04

08008194 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800819a:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <xTaskGetTickCount+0x1c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081a0:	687b      	ldr	r3, [r7, #4]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	20000de4 	.word	0x20000de4

080081b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081ba:	2300      	movs	r3, #0
 80081bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081be:	4b50      	ldr	r3, [pc, #320]	; (8008300 <xTaskIncrementTick+0x14c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f040 808b 	bne.w	80082de <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081c8:	4b4e      	ldr	r3, [pc, #312]	; (8008304 <xTaskIncrementTick+0x150>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3301      	adds	r3, #1
 80081ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081d0:	4a4c      	ldr	r2, [pc, #304]	; (8008304 <xTaskIncrementTick+0x150>)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d122      	bne.n	8008222 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80081dc:	4b4a      	ldr	r3, [pc, #296]	; (8008308 <xTaskIncrementTick+0x154>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00c      	beq.n	8008200 <xTaskIncrementTick+0x4c>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ea:	b672      	cpsid	i
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	b662      	cpsie	i
 80081fa:	603b      	str	r3, [r7, #0]
}
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <xTaskIncrementTick+0x4a>
 8008200:	4b41      	ldr	r3, [pc, #260]	; (8008308 <xTaskIncrementTick+0x154>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	4b41      	ldr	r3, [pc, #260]	; (800830c <xTaskIncrementTick+0x158>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a3f      	ldr	r2, [pc, #252]	; (8008308 <xTaskIncrementTick+0x154>)
 800820c:	6013      	str	r3, [r2, #0]
 800820e:	4a3f      	ldr	r2, [pc, #252]	; (800830c <xTaskIncrementTick+0x158>)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	4b3e      	ldr	r3, [pc, #248]	; (8008310 <xTaskIncrementTick+0x15c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3301      	adds	r3, #1
 800821a:	4a3d      	ldr	r2, [pc, #244]	; (8008310 <xTaskIncrementTick+0x15c>)
 800821c:	6013      	str	r3, [r2, #0]
 800821e:	f000 fadf 	bl	80087e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008222:	4b3c      	ldr	r3, [pc, #240]	; (8008314 <xTaskIncrementTick+0x160>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	429a      	cmp	r2, r3
 800822a:	d349      	bcc.n	80082c0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800822c:	4b36      	ldr	r3, [pc, #216]	; (8008308 <xTaskIncrementTick+0x154>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008236:	4b37      	ldr	r3, [pc, #220]	; (8008314 <xTaskIncrementTick+0x160>)
 8008238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800823c:	601a      	str	r2, [r3, #0]
					break;
 800823e:	e03f      	b.n	80082c0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008240:	4b31      	ldr	r3, [pc, #196]	; (8008308 <xTaskIncrementTick+0x154>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	429a      	cmp	r2, r3
 8008256:	d203      	bcs.n	8008260 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008258:	4a2e      	ldr	r2, [pc, #184]	; (8008314 <xTaskIncrementTick+0x160>)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800825e:	e02f      	b.n	80082c0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	3304      	adds	r3, #4
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe fc1d 	bl	8006aa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	2b00      	cmp	r3, #0
 8008270:	d004      	beq.n	800827c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	3318      	adds	r3, #24
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fc14 	bl	8006aa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	4b25      	ldr	r3, [pc, #148]	; (8008318 <xTaskIncrementTick+0x164>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d903      	bls.n	8008290 <xTaskIncrementTick+0xdc>
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	4a22      	ldr	r2, [pc, #136]	; (8008318 <xTaskIncrementTick+0x164>)
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4a1f      	ldr	r2, [pc, #124]	; (800831c <xTaskIncrementTick+0x168>)
 800829e:	441a      	add	r2, r3
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7fe fb9f 	bl	80069ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b0:	4b1b      	ldr	r3, [pc, #108]	; (8008320 <xTaskIncrementTick+0x16c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d3b8      	bcc.n	800822c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80082ba:	2301      	movs	r3, #1
 80082bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082be:	e7b5      	b.n	800822c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082c0:	4b17      	ldr	r3, [pc, #92]	; (8008320 <xTaskIncrementTick+0x16c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c6:	4915      	ldr	r1, [pc, #84]	; (800831c <xTaskIncrementTick+0x168>)
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d907      	bls.n	80082e8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80082d8:	2301      	movs	r3, #1
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	e004      	b.n	80082e8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80082de:	4b11      	ldr	r3, [pc, #68]	; (8008324 <xTaskIncrementTick+0x170>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3301      	adds	r3, #1
 80082e4:	4a0f      	ldr	r2, [pc, #60]	; (8008324 <xTaskIncrementTick+0x170>)
 80082e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80082e8:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <xTaskIncrementTick+0x174>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80082f0:	2301      	movs	r3, #1
 80082f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80082f4:	697b      	ldr	r3, [r7, #20]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000e08 	.word	0x20000e08
 8008304:	20000de4 	.word	0x20000de4
 8008308:	20000d98 	.word	0x20000d98
 800830c:	20000d9c 	.word	0x20000d9c
 8008310:	20000df8 	.word	0x20000df8
 8008314:	20000e00 	.word	0x20000e00
 8008318:	20000de8 	.word	0x20000de8
 800831c:	20000910 	.word	0x20000910
 8008320:	2000090c 	.word	0x2000090c
 8008324:	20000df0 	.word	0x20000df0
 8008328:	20000df4 	.word	0x20000df4

0800832c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008332:	4b29      	ldr	r3, [pc, #164]	; (80083d8 <vTaskSwitchContext+0xac>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800833a:	4b28      	ldr	r3, [pc, #160]	; (80083dc <vTaskSwitchContext+0xb0>)
 800833c:	2201      	movs	r2, #1
 800833e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008340:	e043      	b.n	80083ca <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8008342:	4b26      	ldr	r3, [pc, #152]	; (80083dc <vTaskSwitchContext+0xb0>)
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008348:	4b25      	ldr	r3, [pc, #148]	; (80083e0 <vTaskSwitchContext+0xb4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	60fb      	str	r3, [r7, #12]
 800834e:	e012      	b.n	8008376 <vTaskSwitchContext+0x4a>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10c      	bne.n	8008370 <vTaskSwitchContext+0x44>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	b672      	cpsid	i
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	b662      	cpsie	i
 800836a:	607b      	str	r3, [r7, #4]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <vTaskSwitchContext+0x42>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	3b01      	subs	r3, #1
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	491b      	ldr	r1, [pc, #108]	; (80083e4 <vTaskSwitchContext+0xb8>)
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0e2      	beq.n	8008350 <vTaskSwitchContext+0x24>
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4a13      	ldr	r2, [pc, #76]	; (80083e4 <vTaskSwitchContext+0xb8>)
 8008396:	4413      	add	r3, r2
 8008398:	60bb      	str	r3, [r7, #8]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	605a      	str	r2, [r3, #4]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	3308      	adds	r3, #8
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d104      	bne.n	80083ba <vTaskSwitchContext+0x8e>
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	605a      	str	r2, [r3, #4]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	4a09      	ldr	r2, [pc, #36]	; (80083e8 <vTaskSwitchContext+0xbc>)
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	4a06      	ldr	r2, [pc, #24]	; (80083e0 <vTaskSwitchContext+0xb4>)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6013      	str	r3, [r2, #0]
}
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20000e08 	.word	0x20000e08
 80083dc:	20000df4 	.word	0x20000df4
 80083e0:	20000de8 	.word	0x20000de8
 80083e4:	20000910 	.word	0x20000910
 80083e8:	2000090c 	.word	0x2000090c

080083ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10c      	bne.n	8008416 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	b672      	cpsid	i
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	b662      	cpsie	i
 8008410:	60fb      	str	r3, [r7, #12]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008416:	4b07      	ldr	r3, [pc, #28]	; (8008434 <vTaskPlaceOnEventList+0x48>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3318      	adds	r3, #24
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7fe fb07 	bl	8006a32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008424:	2101      	movs	r1, #1
 8008426:	6838      	ldr	r0, [r7, #0]
 8008428:	f000 fb8c 	bl	8008b44 <prvAddCurrentTaskToDelayedList>
}
 800842c:	bf00      	nop
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	2000090c 	.word	0x2000090c

08008438 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10c      	bne.n	8008464 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	b672      	cpsid	i
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	b662      	cpsie	i
 800845e:	617b      	str	r3, [r7, #20]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008464:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <vTaskPlaceOnEventListRestricted+0x58>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3318      	adds	r3, #24
 800846a:	4619      	mov	r1, r3
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f7fe fabc 	bl	80069ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800847c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	68b8      	ldr	r0, [r7, #8]
 8008482:	f000 fb5f 	bl	8008b44 <prvAddCurrentTaskToDelayedList>
	}
 8008486:	bf00      	nop
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	2000090c 	.word	0x2000090c

08008494 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10c      	bne.n	80084c4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	b672      	cpsid	i
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	b662      	cpsie	i
 80084be:	60fb      	str	r3, [r7, #12]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	3318      	adds	r3, #24
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fe faeb 	bl	8006aa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ce:	4b1e      	ldr	r3, [pc, #120]	; (8008548 <xTaskRemoveFromEventList+0xb4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d11d      	bne.n	8008512 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	3304      	adds	r3, #4
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fe fae2 	bl	8006aa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e4:	4b19      	ldr	r3, [pc, #100]	; (800854c <xTaskRemoveFromEventList+0xb8>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d903      	bls.n	80084f4 <xTaskRemoveFromEventList+0x60>
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	4a16      	ldr	r2, [pc, #88]	; (800854c <xTaskRemoveFromEventList+0xb8>)
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4a13      	ldr	r2, [pc, #76]	; (8008550 <xTaskRemoveFromEventList+0xbc>)
 8008502:	441a      	add	r2, r3
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	3304      	adds	r3, #4
 8008508:	4619      	mov	r1, r3
 800850a:	4610      	mov	r0, r2
 800850c:	f7fe fa6d 	bl	80069ea <vListInsertEnd>
 8008510:	e005      	b.n	800851e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	3318      	adds	r3, #24
 8008516:	4619      	mov	r1, r3
 8008518:	480e      	ldr	r0, [pc, #56]	; (8008554 <xTaskRemoveFromEventList+0xc0>)
 800851a:	f7fe fa66 	bl	80069ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008522:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <xTaskRemoveFromEventList+0xc4>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	429a      	cmp	r2, r3
 800852a:	d905      	bls.n	8008538 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800852c:	2301      	movs	r3, #1
 800852e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008530:	4b0a      	ldr	r3, [pc, #40]	; (800855c <xTaskRemoveFromEventList+0xc8>)
 8008532:	2201      	movs	r2, #1
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e001      	b.n	800853c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008538:	2300      	movs	r3, #0
 800853a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800853c:	697b      	ldr	r3, [r7, #20]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000e08 	.word	0x20000e08
 800854c:	20000de8 	.word	0x20000de8
 8008550:	20000910 	.word	0x20000910
 8008554:	20000da0 	.word	0x20000da0
 8008558:	2000090c 	.word	0x2000090c
 800855c:	20000df4 	.word	0x20000df4

08008560 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008568:	4b06      	ldr	r3, [pc, #24]	; (8008584 <vTaskInternalSetTimeOutState+0x24>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008570:	4b05      	ldr	r3, [pc, #20]	; (8008588 <vTaskInternalSetTimeOutState+0x28>)
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	605a      	str	r2, [r3, #4]
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	20000df8 	.word	0x20000df8
 8008588:	20000de4 	.word	0x20000de4

0800858c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10c      	bne.n	80085b6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a0:	b672      	cpsid	i
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	b662      	cpsie	i
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10c      	bne.n	80085d6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	b672      	cpsid	i
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	b662      	cpsie	i
 80085d0:	60fb      	str	r3, [r7, #12]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80085d6:	f000 ff71 	bl	80094bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085da:	4b1d      	ldr	r3, [pc, #116]	; (8008650 <xTaskCheckForTimeOut+0xc4>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f2:	d102      	bne.n	80085fa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085f4:	2300      	movs	r3, #0
 80085f6:	61fb      	str	r3, [r7, #28]
 80085f8:	e023      	b.n	8008642 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4b15      	ldr	r3, [pc, #84]	; (8008654 <xTaskCheckForTimeOut+0xc8>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d007      	beq.n	8008616 <xTaskCheckForTimeOut+0x8a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	429a      	cmp	r2, r3
 800860e:	d302      	bcc.n	8008616 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008610:	2301      	movs	r3, #1
 8008612:	61fb      	str	r3, [r7, #28]
 8008614:	e015      	b.n	8008642 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	429a      	cmp	r2, r3
 800861e:	d20b      	bcs.n	8008638 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	1ad2      	subs	r2, r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff ff97 	bl	8008560 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008632:	2300      	movs	r3, #0
 8008634:	61fb      	str	r3, [r7, #28]
 8008636:	e004      	b.n	8008642 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800863e:	2301      	movs	r3, #1
 8008640:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008642:	f000 ff6f 	bl	8009524 <vPortExitCritical>

	return xReturn;
 8008646:	69fb      	ldr	r3, [r7, #28]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3720      	adds	r7, #32
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000de4 	.word	0x20000de4
 8008654:	20000df8 	.word	0x20000df8

08008658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800865c:	4b03      	ldr	r3, [pc, #12]	; (800866c <vTaskMissedYield+0x14>)
 800865e:	2201      	movs	r2, #1
 8008660:	601a      	str	r2, [r3, #0]
}
 8008662:	bf00      	nop
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	20000df4 	.word	0x20000df4

08008670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008678:	f000 f852 	bl	8008720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800867c:	4b06      	ldr	r3, [pc, #24]	; (8008698 <prvIdleTask+0x28>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d9f9      	bls.n	8008678 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008684:	4b05      	ldr	r3, [pc, #20]	; (800869c <prvIdleTask+0x2c>)
 8008686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008694:	e7f0      	b.n	8008678 <prvIdleTask+0x8>
 8008696:	bf00      	nop
 8008698:	20000910 	.word	0x20000910
 800869c:	e000ed04 	.word	0xe000ed04

080086a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086a6:	2300      	movs	r3, #0
 80086a8:	607b      	str	r3, [r7, #4]
 80086aa:	e00c      	b.n	80086c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4a12      	ldr	r2, [pc, #72]	; (8008700 <prvInitialiseTaskLists+0x60>)
 80086b8:	4413      	add	r3, r2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe f968 	bl	8006990 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3301      	adds	r3, #1
 80086c4:	607b      	str	r3, [r7, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b37      	cmp	r3, #55	; 0x37
 80086ca:	d9ef      	bls.n	80086ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086cc:	480d      	ldr	r0, [pc, #52]	; (8008704 <prvInitialiseTaskLists+0x64>)
 80086ce:	f7fe f95f 	bl	8006990 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086d2:	480d      	ldr	r0, [pc, #52]	; (8008708 <prvInitialiseTaskLists+0x68>)
 80086d4:	f7fe f95c 	bl	8006990 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086d8:	480c      	ldr	r0, [pc, #48]	; (800870c <prvInitialiseTaskLists+0x6c>)
 80086da:	f7fe f959 	bl	8006990 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086de:	480c      	ldr	r0, [pc, #48]	; (8008710 <prvInitialiseTaskLists+0x70>)
 80086e0:	f7fe f956 	bl	8006990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086e4:	480b      	ldr	r0, [pc, #44]	; (8008714 <prvInitialiseTaskLists+0x74>)
 80086e6:	f7fe f953 	bl	8006990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086ea:	4b0b      	ldr	r3, [pc, #44]	; (8008718 <prvInitialiseTaskLists+0x78>)
 80086ec:	4a05      	ldr	r2, [pc, #20]	; (8008704 <prvInitialiseTaskLists+0x64>)
 80086ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086f0:	4b0a      	ldr	r3, [pc, #40]	; (800871c <prvInitialiseTaskLists+0x7c>)
 80086f2:	4a05      	ldr	r2, [pc, #20]	; (8008708 <prvInitialiseTaskLists+0x68>)
 80086f4:	601a      	str	r2, [r3, #0]
}
 80086f6:	bf00      	nop
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20000910 	.word	0x20000910
 8008704:	20000d70 	.word	0x20000d70
 8008708:	20000d84 	.word	0x20000d84
 800870c:	20000da0 	.word	0x20000da0
 8008710:	20000db4 	.word	0x20000db4
 8008714:	20000dcc 	.word	0x20000dcc
 8008718:	20000d98 	.word	0x20000d98
 800871c:	20000d9c 	.word	0x20000d9c

08008720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008726:	e019      	b.n	800875c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008728:	f000 fec8 	bl	80094bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800872c:	4b10      	ldr	r3, [pc, #64]	; (8008770 <prvCheckTasksWaitingTermination+0x50>)
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3304      	adds	r3, #4
 8008738:	4618      	mov	r0, r3
 800873a:	f7fe f9b3 	bl	8006aa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800873e:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <prvCheckTasksWaitingTermination+0x54>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3b01      	subs	r3, #1
 8008744:	4a0b      	ldr	r2, [pc, #44]	; (8008774 <prvCheckTasksWaitingTermination+0x54>)
 8008746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008748:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <prvCheckTasksWaitingTermination+0x58>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3b01      	subs	r3, #1
 800874e:	4a0a      	ldr	r2, [pc, #40]	; (8008778 <prvCheckTasksWaitingTermination+0x58>)
 8008750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008752:	f000 fee7 	bl	8009524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f810 	bl	800877c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800875c:	4b06      	ldr	r3, [pc, #24]	; (8008778 <prvCheckTasksWaitingTermination+0x58>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e1      	bne.n	8008728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000db4 	.word	0x20000db4
 8008774:	20000de0 	.word	0x20000de0
 8008778:	20000dc8 	.word	0x20000dc8

0800877c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800878a:	2b00      	cmp	r3, #0
 800878c:	d108      	bne.n	80087a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008792:	4618      	mov	r0, r3
 8008794:	f001 f888 	bl	80098a8 <vPortFree>
				vPortFree( pxTCB );
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 f885 	bl	80098a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800879e:	e01a      	b.n	80087d6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d103      	bne.n	80087b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 f87c 	bl	80098a8 <vPortFree>
	}
 80087b0:	e011      	b.n	80087d6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d00c      	beq.n	80087d6 <prvDeleteTCB+0x5a>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	b672      	cpsid	i
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	b662      	cpsie	i
 80087d0:	60fb      	str	r3, [r7, #12]
}
 80087d2:	bf00      	nop
 80087d4:	e7fe      	b.n	80087d4 <prvDeleteTCB+0x58>
	}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087e6:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <prvResetNextTaskUnblockTime+0x38>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d104      	bne.n	80087fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087f0:	4b0a      	ldr	r3, [pc, #40]	; (800881c <prvResetNextTaskUnblockTime+0x3c>)
 80087f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087f8:	e008      	b.n	800880c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087fa:	4b07      	ldr	r3, [pc, #28]	; (8008818 <prvResetNextTaskUnblockTime+0x38>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	4a04      	ldr	r2, [pc, #16]	; (800881c <prvResetNextTaskUnblockTime+0x3c>)
 800880a:	6013      	str	r3, [r2, #0]
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	20000d98 	.word	0x20000d98
 800881c:	20000e00 	.word	0x20000e00

08008820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008826:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <xTaskGetSchedulerState+0x34>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d102      	bne.n	8008834 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800882e:	2301      	movs	r3, #1
 8008830:	607b      	str	r3, [r7, #4]
 8008832:	e008      	b.n	8008846 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008834:	4b08      	ldr	r3, [pc, #32]	; (8008858 <xTaskGetSchedulerState+0x38>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d102      	bne.n	8008842 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800883c:	2302      	movs	r3, #2
 800883e:	607b      	str	r3, [r7, #4]
 8008840:	e001      	b.n	8008846 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008842:	2300      	movs	r3, #0
 8008844:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008846:	687b      	ldr	r3, [r7, #4]
	}
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	20000dec 	.word	0x20000dec
 8008858:	20000e08 	.word	0x20000e08

0800885c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d051      	beq.n	8008916 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008876:	4b2a      	ldr	r3, [pc, #168]	; (8008920 <xTaskPriorityInherit+0xc4>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	429a      	cmp	r2, r3
 800887e:	d241      	bcs.n	8008904 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	db06      	blt.n	8008896 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008888:	4b25      	ldr	r3, [pc, #148]	; (8008920 <xTaskPriorityInherit+0xc4>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6959      	ldr	r1, [r3, #20]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4a1f      	ldr	r2, [pc, #124]	; (8008924 <xTaskPriorityInherit+0xc8>)
 80088a8:	4413      	add	r3, r2
 80088aa:	4299      	cmp	r1, r3
 80088ac:	d122      	bne.n	80088f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	3304      	adds	r3, #4
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe f8f6 	bl	8006aa4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088b8:	4b19      	ldr	r3, [pc, #100]	; (8008920 <xTaskPriorityInherit+0xc4>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c6:	4b18      	ldr	r3, [pc, #96]	; (8008928 <xTaskPriorityInherit+0xcc>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d903      	bls.n	80088d6 <xTaskPriorityInherit+0x7a>
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d2:	4a15      	ldr	r2, [pc, #84]	; (8008928 <xTaskPriorityInherit+0xcc>)
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088da:	4613      	mov	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4a10      	ldr	r2, [pc, #64]	; (8008924 <xTaskPriorityInherit+0xc8>)
 80088e4:	441a      	add	r2, r3
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f7fe f87c 	bl	80069ea <vListInsertEnd>
 80088f2:	e004      	b.n	80088fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <xTaskPriorityInherit+0xc4>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80088fe:	2301      	movs	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	e008      	b.n	8008916 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008908:	4b05      	ldr	r3, [pc, #20]	; (8008920 <xTaskPriorityInherit+0xc4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890e:	429a      	cmp	r2, r3
 8008910:	d201      	bcs.n	8008916 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008912:	2301      	movs	r3, #1
 8008914:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008916:	68fb      	ldr	r3, [r7, #12]
	}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	2000090c 	.word	0x2000090c
 8008924:	20000910 	.word	0x20000910
 8008928:	20000de8 	.word	0x20000de8

0800892c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008938:	2300      	movs	r3, #0
 800893a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d05a      	beq.n	80089f8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008942:	4b30      	ldr	r3, [pc, #192]	; (8008a04 <xTaskPriorityDisinherit+0xd8>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	429a      	cmp	r2, r3
 800894a:	d00c      	beq.n	8008966 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008950:	b672      	cpsid	i
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	b662      	cpsie	i
 8008960:	60fb      	str	r3, [r7, #12]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10c      	bne.n	8008988 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	b672      	cpsid	i
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	b662      	cpsie	i
 8008982:	60bb      	str	r3, [r7, #8]
}
 8008984:	bf00      	nop
 8008986:	e7fe      	b.n	8008986 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898c:	1e5a      	subs	r2, r3, #1
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800899a:	429a      	cmp	r2, r3
 800899c:	d02c      	beq.n	80089f8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d128      	bne.n	80089f8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	3304      	adds	r3, #4
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe f87a 	bl	8006aa4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c8:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <xTaskPriorityDisinherit+0xdc>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d903      	bls.n	80089d8 <xTaskPriorityDisinherit+0xac>
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d4:	4a0c      	ldr	r2, [pc, #48]	; (8008a08 <xTaskPriorityDisinherit+0xdc>)
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089dc:	4613      	mov	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <xTaskPriorityDisinherit+0xe0>)
 80089e6:	441a      	add	r2, r3
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	3304      	adds	r3, #4
 80089ec:	4619      	mov	r1, r3
 80089ee:	4610      	mov	r0, r2
 80089f0:	f7fd fffb 	bl	80069ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089f4:	2301      	movs	r3, #1
 80089f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089f8:	697b      	ldr	r3, [r7, #20]
	}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	2000090c 	.word	0x2000090c
 8008a08:	20000de8 	.word	0x20000de8
 8008a0c:	20000910 	.word	0x20000910

08008a10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b088      	sub	sp, #32
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d06e      	beq.n	8008b06 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10c      	bne.n	8008a4a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	b672      	cpsid	i
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	b662      	cpsie	i
 8008a44:	60fb      	str	r3, [r7, #12]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d902      	bls.n	8008a5a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	61fb      	str	r3, [r7, #28]
 8008a58:	e002      	b.n	8008a60 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a5e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d04d      	beq.n	8008b06 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d148      	bne.n	8008b06 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a74:	4b26      	ldr	r3, [pc, #152]	; (8008b10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d10c      	bne.n	8008a98 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	b672      	cpsid	i
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	b662      	cpsie	i
 8008a92:	60bb      	str	r3, [r7, #8]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	db04      	blt.n	8008ab6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	6959      	ldr	r1, [r3, #20]
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	4613      	mov	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4a13      	ldr	r2, [pc, #76]	; (8008b14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008ac6:	4413      	add	r3, r2
 8008ac8:	4299      	cmp	r1, r3
 8008aca:	d11c      	bne.n	8008b06 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fd ffe7 	bl	8006aa4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ada:	4b0f      	ldr	r3, [pc, #60]	; (8008b18 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d903      	bls.n	8008aea <vTaskPriorityDisinheritAfterTimeout+0xda>
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	4a0c      	ldr	r2, [pc, #48]	; (8008b18 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aee:	4613      	mov	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4a07      	ldr	r2, [pc, #28]	; (8008b14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008af8:	441a      	add	r2, r3
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	3304      	adds	r3, #4
 8008afe:	4619      	mov	r1, r3
 8008b00:	4610      	mov	r0, r2
 8008b02:	f7fd ff72 	bl	80069ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b06:	bf00      	nop
 8008b08:	3720      	adds	r7, #32
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	2000090c 	.word	0x2000090c
 8008b14:	20000910 	.word	0x20000910
 8008b18:	20000de8 	.word	0x20000de8

08008b1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b1c:	b480      	push	{r7}
 8008b1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b20:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b28:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b2e:	3201      	adds	r2, #1
 8008b30:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008b32:	4b03      	ldr	r3, [pc, #12]	; (8008b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b34:	681b      	ldr	r3, [r3, #0]
	}
 8008b36:	4618      	mov	r0, r3
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	2000090c 	.word	0x2000090c

08008b44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b4e:	4b21      	ldr	r3, [pc, #132]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b54:	4b20      	ldr	r3, [pc, #128]	; (8008bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fd ffa2 	bl	8006aa4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b66:	d10a      	bne.n	8008b7e <prvAddCurrentTaskToDelayedList+0x3a>
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d007      	beq.n	8008b7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b6e:	4b1a      	ldr	r3, [pc, #104]	; (8008bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3304      	adds	r3, #4
 8008b74:	4619      	mov	r1, r3
 8008b76:	4819      	ldr	r0, [pc, #100]	; (8008bdc <prvAddCurrentTaskToDelayedList+0x98>)
 8008b78:	f7fd ff37 	bl	80069ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b7c:	e026      	b.n	8008bcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b86:	4b14      	ldr	r3, [pc, #80]	; (8008bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d209      	bcs.n	8008baa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b96:	4b12      	ldr	r3, [pc, #72]	; (8008be0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	4b0f      	ldr	r3, [pc, #60]	; (8008bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	f7fd ff45 	bl	8006a32 <vListInsert>
}
 8008ba8:	e010      	b.n	8008bcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008baa:	4b0e      	ldr	r3, [pc, #56]	; (8008be4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f7fd ff3b 	bl	8006a32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d202      	bcs.n	8008bcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bc6:	4a08      	ldr	r2, [pc, #32]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	6013      	str	r3, [r2, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20000de4 	.word	0x20000de4
 8008bd8:	2000090c 	.word	0x2000090c
 8008bdc:	20000dcc 	.word	0x20000dcc
 8008be0:	20000d9c 	.word	0x20000d9c
 8008be4:	20000d98 	.word	0x20000d98
 8008be8:	20000e00 	.word	0x20000e00

08008bec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08a      	sub	sp, #40	; 0x28
 8008bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008bf6:	f000 fb15 	bl	8009224 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bfa:	4b1d      	ldr	r3, [pc, #116]	; (8008c70 <xTimerCreateTimerTask+0x84>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d021      	beq.n	8008c46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c02:	2300      	movs	r3, #0
 8008c04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c0a:	1d3a      	adds	r2, r7, #4
 8008c0c:	f107 0108 	add.w	r1, r7, #8
 8008c10:	f107 030c 	add.w	r3, r7, #12
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fd fea1 	bl	800695c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	9202      	str	r2, [sp, #8]
 8008c22:	9301      	str	r3, [sp, #4]
 8008c24:	2302      	movs	r3, #2
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	2300      	movs	r3, #0
 8008c2a:	460a      	mov	r2, r1
 8008c2c:	4911      	ldr	r1, [pc, #68]	; (8008c74 <xTimerCreateTimerTask+0x88>)
 8008c2e:	4812      	ldr	r0, [pc, #72]	; (8008c78 <xTimerCreateTimerTask+0x8c>)
 8008c30:	f7fe ffb8 	bl	8007ba4 <xTaskCreateStatic>
 8008c34:	4603      	mov	r3, r0
 8008c36:	4a11      	ldr	r2, [pc, #68]	; (8008c7c <xTimerCreateTimerTask+0x90>)
 8008c38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c3a:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <xTimerCreateTimerTask+0x90>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c42:	2301      	movs	r3, #1
 8008c44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10c      	bne.n	8008c66 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	b672      	cpsid	i
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	b662      	cpsie	i
 8008c60:	613b      	str	r3, [r7, #16]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008c66:	697b      	ldr	r3, [r7, #20]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20000e3c 	.word	0x20000e3c
 8008c74:	0800af88 	.word	0x0800af88
 8008c78:	08008dbd 	.word	0x08008dbd
 8008c7c:	20000e40 	.word	0x20000e40

08008c80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	; 0x28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10c      	bne.n	8008cb2 <xTimerGenericCommand+0x32>
	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	b672      	cpsid	i
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	b662      	cpsie	i
 8008cac:	623b      	str	r3, [r7, #32]
}
 8008cae:	bf00      	nop
 8008cb0:	e7fe      	b.n	8008cb0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cb2:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <xTimerGenericCommand+0x9c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d02a      	beq.n	8008d10 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b05      	cmp	r3, #5
 8008cca:	dc18      	bgt.n	8008cfe <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ccc:	f7ff fda8 	bl	8008820 <xTaskGetSchedulerState>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d109      	bne.n	8008cea <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cd6:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <xTimerGenericCommand+0x9c>)
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	f107 0110 	add.w	r1, r7, #16
 8008cde:	2300      	movs	r3, #0
 8008ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce2:	f7fe f8cd 	bl	8006e80 <xQueueGenericSend>
 8008ce6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ce8:	e012      	b.n	8008d10 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cea:	4b0c      	ldr	r3, [pc, #48]	; (8008d1c <xTimerGenericCommand+0x9c>)
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	f107 0110 	add.w	r1, r7, #16
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f7fe f8c3 	bl	8006e80 <xQueueGenericSend>
 8008cfa:	6278      	str	r0, [r7, #36]	; 0x24
 8008cfc:	e008      	b.n	8008d10 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008cfe:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <xTimerGenericCommand+0x9c>)
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	f107 0110 	add.w	r1, r7, #16
 8008d06:	2300      	movs	r3, #0
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	f7fe f9bf 	bl	800708c <xQueueGenericSendFromISR>
 8008d0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3728      	adds	r7, #40	; 0x28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20000e3c 	.word	0x20000e3c

08008d20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2a:	4b23      	ldr	r3, [pc, #140]	; (8008db8 <prvProcessExpiredTimer+0x98>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fd feb3 	bl	8006aa4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d024      	beq.n	8008d96 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	699a      	ldr	r2, [r3, #24]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	18d1      	adds	r1, r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	6978      	ldr	r0, [r7, #20]
 8008d5a:	f000 f8d3 	bl	8008f04 <prvInsertTimerInActiveList>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d021      	beq.n	8008da8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d64:	2300      	movs	r3, #0
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	6978      	ldr	r0, [r7, #20]
 8008d70:	f7ff ff86 	bl	8008c80 <xTimerGenericCommand>
 8008d74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d115      	bne.n	8008da8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	b672      	cpsid	i
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	b662      	cpsie	i
 8008d90:	60fb      	str	r3, [r7, #12]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d9c:	f023 0301 	bic.w	r3, r3, #1
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	6978      	ldr	r0, [r7, #20]
 8008dae:	4798      	blx	r3
}
 8008db0:	bf00      	nop
 8008db2:	3718      	adds	r7, #24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20000e34 	.word	0x20000e34

08008dbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dc4:	f107 0308 	add.w	r3, r7, #8
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 f857 	bl	8008e7c <prvGetNextExpireTime>
 8008dce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 f803 	bl	8008de0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dda:	f000 f8d5 	bl	8008f88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dde:	e7f1      	b.n	8008dc4 <prvTimerTask+0x8>

08008de0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008dea:	f7ff f925 	bl	8008038 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dee:	f107 0308 	add.w	r3, r7, #8
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 f866 	bl	8008ec4 <prvSampleTimeNow>
 8008df8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d130      	bne.n	8008e62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10a      	bne.n	8008e1c <prvProcessTimerOrBlockTask+0x3c>
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d806      	bhi.n	8008e1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e0e:	f7ff f921 	bl	8008054 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e12:	68f9      	ldr	r1, [r7, #12]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff ff83 	bl	8008d20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e1a:	e024      	b.n	8008e66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d008      	beq.n	8008e34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e22:	4b13      	ldr	r3, [pc, #76]	; (8008e70 <prvProcessTimerOrBlockTask+0x90>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <prvProcessTimerOrBlockTask+0x50>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e000      	b.n	8008e32 <prvProcessTimerOrBlockTask+0x52>
 8008e30:	2300      	movs	r3, #0
 8008e32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e34:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <prvProcessTimerOrBlockTask+0x94>)
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	4619      	mov	r1, r3
 8008e42:	f7fe fe7b 	bl	8007b3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e46:	f7ff f905 	bl	8008054 <xTaskResumeAll>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10a      	bne.n	8008e66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e50:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <prvProcessTimerOrBlockTask+0x98>)
 8008e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	f3bf 8f6f 	isb	sy
}
 8008e60:	e001      	b.n	8008e66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e62:	f7ff f8f7 	bl	8008054 <xTaskResumeAll>
}
 8008e66:	bf00      	nop
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000e38 	.word	0x20000e38
 8008e74:	20000e3c 	.word	0x20000e3c
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e84:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <prvGetNextExpireTime+0x44>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <prvGetNextExpireTime+0x16>
 8008e8e:	2201      	movs	r2, #1
 8008e90:	e000      	b.n	8008e94 <prvGetNextExpireTime+0x18>
 8008e92:	2200      	movs	r2, #0
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d105      	bne.n	8008eac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <prvGetNextExpireTime+0x44>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	e001      	b.n	8008eb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20000e34 	.word	0x20000e34

08008ec4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ecc:	f7ff f962 	bl	8008194 <xTaskGetTickCount>
 8008ed0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ed2:	4b0b      	ldr	r3, [pc, #44]	; (8008f00 <prvSampleTimeNow+0x3c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d205      	bcs.n	8008ee8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008edc:	f000 f93c 	bl	8009158 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	e002      	b.n	8008eee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008eee:	4a04      	ldr	r2, [pc, #16]	; (8008f00 <prvSampleTimeNow+0x3c>)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000e44 	.word	0x20000e44

08008f04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f12:	2300      	movs	r3, #0
 8008f14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d812      	bhi.n	8008f50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	1ad2      	subs	r2, r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d302      	bcc.n	8008f3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	e01b      	b.n	8008f76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f3e:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <prvInsertTimerInActiveList+0x7c>)
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3304      	adds	r3, #4
 8008f46:	4619      	mov	r1, r3
 8008f48:	4610      	mov	r0, r2
 8008f4a:	f7fd fd72 	bl	8006a32 <vListInsert>
 8008f4e:	e012      	b.n	8008f76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d206      	bcs.n	8008f66 <prvInsertTimerInActiveList+0x62>
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d302      	bcc.n	8008f66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	617b      	str	r3, [r7, #20]
 8008f64:	e007      	b.n	8008f76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f66:	4b07      	ldr	r3, [pc, #28]	; (8008f84 <prvInsertTimerInActiveList+0x80>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4610      	mov	r0, r2
 8008f72:	f7fd fd5e 	bl	8006a32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f76:	697b      	ldr	r3, [r7, #20]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	20000e38 	.word	0x20000e38
 8008f84:	20000e34 	.word	0x20000e34

08008f88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08e      	sub	sp, #56	; 0x38
 8008f8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f8e:	e0d0      	b.n	8009132 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	da1a      	bge.n	8008fcc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f96:	1d3b      	adds	r3, r7, #4
 8008f98:	3304      	adds	r3, #4
 8008f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10c      	bne.n	8008fbc <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	b672      	cpsid	i
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	b662      	cpsie	i
 8008fb6:	61fb      	str	r3, [r7, #28]
}
 8008fb8:	bf00      	nop
 8008fba:	e7fe      	b.n	8008fba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc2:	6850      	ldr	r0, [r2, #4]
 8008fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc6:	6892      	ldr	r2, [r2, #8]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f2c0 80ae 	blt.w	8009130 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d004      	beq.n	8008fea <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fd fd5d 	bl	8006aa4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fea:	463b      	mov	r3, r7
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff ff69 	bl	8008ec4 <prvSampleTimeNow>
 8008ff2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b09      	cmp	r3, #9
 8008ff8:	f200 809b 	bhi.w	8009132 <prvProcessReceivedCommands+0x1aa>
 8008ffc:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <prvProcessReceivedCommands+0x7c>)
 8008ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009002:	bf00      	nop
 8009004:	0800902d 	.word	0x0800902d
 8009008:	0800902d 	.word	0x0800902d
 800900c:	0800902d 	.word	0x0800902d
 8009010:	080090a5 	.word	0x080090a5
 8009014:	080090b9 	.word	0x080090b9
 8009018:	08009107 	.word	0x08009107
 800901c:	0800902d 	.word	0x0800902d
 8009020:	0800902d 	.word	0x0800902d
 8009024:	080090a5 	.word	0x080090a5
 8009028:	080090b9 	.word	0x080090b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009032:	f043 0301 	orr.w	r3, r3, #1
 8009036:	b2da      	uxtb	r2, r3
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	18d1      	adds	r1, r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800904c:	f7ff ff5a 	bl	8008f04 <prvInsertTimerInActiveList>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d06d      	beq.n	8009132 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d062      	beq.n	8009132 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	441a      	add	r2, r3
 8009074:	2300      	movs	r3, #0
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	2300      	movs	r3, #0
 800907a:	2100      	movs	r1, #0
 800907c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800907e:	f7ff fdff 	bl	8008c80 <xTimerGenericCommand>
 8009082:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d153      	bne.n	8009132 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	b672      	cpsid	i
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	b662      	cpsie	i
 800909e:	61bb      	str	r3, [r7, #24]
}
 80090a0:	bf00      	nop
 80090a2:	e7fe      	b.n	80090a2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090aa:	f023 0301 	bic.w	r3, r3, #1
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80090b6:	e03c      	b.n	8009132 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090be:	f043 0301 	orr.w	r3, r3, #1
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10c      	bne.n	80090f2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	b672      	cpsid	i
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	b662      	cpsie	i
 80090ec:	617b      	str	r3, [r7, #20]
}
 80090ee:	bf00      	nop
 80090f0:	e7fe      	b.n	80090f0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f4:	699a      	ldr	r2, [r3, #24]
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	18d1      	adds	r1, r2, r3
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009100:	f7ff ff00 	bl	8008f04 <prvInsertTimerInActiveList>
					break;
 8009104:	e015      	b.n	8009132 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d103      	bne.n	800911c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009116:	f000 fbc7 	bl	80098a8 <vPortFree>
 800911a:	e00a      	b.n	8009132 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009122:	f023 0301 	bic.w	r3, r3, #1
 8009126:	b2da      	uxtb	r2, r3
 8009128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800912e:	e000      	b.n	8009132 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009130:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009132:	4b08      	ldr	r3, [pc, #32]	; (8009154 <prvProcessReceivedCommands+0x1cc>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	1d39      	adds	r1, r7, #4
 8009138:	2200      	movs	r2, #0
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe f8dc 	bl	80072f8 <xQueueReceive>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	f47f af24 	bne.w	8008f90 <prvProcessReceivedCommands+0x8>
	}
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	3730      	adds	r7, #48	; 0x30
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000e3c 	.word	0x20000e3c

08009158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800915e:	e04a      	b.n	80091f6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009160:	4b2e      	ldr	r3, [pc, #184]	; (800921c <prvSwitchTimerLists+0xc4>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800916a:	4b2c      	ldr	r3, [pc, #176]	; (800921c <prvSwitchTimerLists+0xc4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3304      	adds	r3, #4
 8009178:	4618      	mov	r0, r3
 800917a:	f7fd fc93 	bl	8006aa4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800918c:	f003 0304 	and.w	r3, r3, #4
 8009190:	2b00      	cmp	r3, #0
 8009192:	d030      	beq.n	80091f6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	4413      	add	r3, r2
 800919c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d90e      	bls.n	80091c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091b2:	4b1a      	ldr	r3, [pc, #104]	; (800921c <prvSwitchTimerLists+0xc4>)
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3304      	adds	r3, #4
 80091ba:	4619      	mov	r1, r3
 80091bc:	4610      	mov	r0, r2
 80091be:	f7fd fc38 	bl	8006a32 <vListInsert>
 80091c2:	e018      	b.n	80091f6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091c4:	2300      	movs	r3, #0
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	2300      	movs	r3, #0
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	2100      	movs	r1, #0
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7ff fd56 	bl	8008c80 <xTimerGenericCommand>
 80091d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10c      	bne.n	80091f6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e0:	b672      	cpsid	i
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	b662      	cpsie	i
 80091f0:	603b      	str	r3, [r7, #0]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091f6:	4b09      	ldr	r3, [pc, #36]	; (800921c <prvSwitchTimerLists+0xc4>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1af      	bne.n	8009160 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009200:	4b06      	ldr	r3, [pc, #24]	; (800921c <prvSwitchTimerLists+0xc4>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009206:	4b06      	ldr	r3, [pc, #24]	; (8009220 <prvSwitchTimerLists+0xc8>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a04      	ldr	r2, [pc, #16]	; (800921c <prvSwitchTimerLists+0xc4>)
 800920c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800920e:	4a04      	ldr	r2, [pc, #16]	; (8009220 <prvSwitchTimerLists+0xc8>)
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	6013      	str	r3, [r2, #0]
}
 8009214:	bf00      	nop
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20000e34 	.word	0x20000e34
 8009220:	20000e38 	.word	0x20000e38

08009224 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800922a:	f000 f947 	bl	80094bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800922e:	4b15      	ldr	r3, [pc, #84]	; (8009284 <prvCheckForValidListAndQueue+0x60>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d120      	bne.n	8009278 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009236:	4814      	ldr	r0, [pc, #80]	; (8009288 <prvCheckForValidListAndQueue+0x64>)
 8009238:	f7fd fbaa 	bl	8006990 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800923c:	4813      	ldr	r0, [pc, #76]	; (800928c <prvCheckForValidListAndQueue+0x68>)
 800923e:	f7fd fba7 	bl	8006990 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009242:	4b13      	ldr	r3, [pc, #76]	; (8009290 <prvCheckForValidListAndQueue+0x6c>)
 8009244:	4a10      	ldr	r2, [pc, #64]	; (8009288 <prvCheckForValidListAndQueue+0x64>)
 8009246:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009248:	4b12      	ldr	r3, [pc, #72]	; (8009294 <prvCheckForValidListAndQueue+0x70>)
 800924a:	4a10      	ldr	r2, [pc, #64]	; (800928c <prvCheckForValidListAndQueue+0x68>)
 800924c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800924e:	2300      	movs	r3, #0
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	4b11      	ldr	r3, [pc, #68]	; (8009298 <prvCheckForValidListAndQueue+0x74>)
 8009254:	4a11      	ldr	r2, [pc, #68]	; (800929c <prvCheckForValidListAndQueue+0x78>)
 8009256:	2110      	movs	r1, #16
 8009258:	200a      	movs	r0, #10
 800925a:	f7fd fcb7 	bl	8006bcc <xQueueGenericCreateStatic>
 800925e:	4603      	mov	r3, r0
 8009260:	4a08      	ldr	r2, [pc, #32]	; (8009284 <prvCheckForValidListAndQueue+0x60>)
 8009262:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009264:	4b07      	ldr	r3, [pc, #28]	; (8009284 <prvCheckForValidListAndQueue+0x60>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d005      	beq.n	8009278 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <prvCheckForValidListAndQueue+0x60>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	490b      	ldr	r1, [pc, #44]	; (80092a0 <prvCheckForValidListAndQueue+0x7c>)
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fc0e 	bl	8007a94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009278:	f000 f954 	bl	8009524 <vPortExitCritical>
}
 800927c:	bf00      	nop
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	20000e3c 	.word	0x20000e3c
 8009288:	20000e0c 	.word	0x20000e0c
 800928c:	20000e20 	.word	0x20000e20
 8009290:	20000e34 	.word	0x20000e34
 8009294:	20000e38 	.word	0x20000e38
 8009298:	20000ee8 	.word	0x20000ee8
 800929c:	20000e48 	.word	0x20000e48
 80092a0:	0800af90 	.word	0x0800af90

080092a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3b04      	subs	r3, #4
 80092b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3b04      	subs	r3, #4
 80092c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f023 0201 	bic.w	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3b04      	subs	r3, #4
 80092d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092d4:	4a0c      	ldr	r2, [pc, #48]	; (8009308 <pxPortInitialiseStack+0x64>)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3b14      	subs	r3, #20
 80092de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3b04      	subs	r3, #4
 80092ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f06f 0202 	mvn.w	r2, #2
 80092f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3b20      	subs	r3, #32
 80092f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092fa:	68fb      	ldr	r3, [r7, #12]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	0800930d 	.word	0x0800930d

0800930c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009316:	4b14      	ldr	r3, [pc, #80]	; (8009368 <prvTaskExitError+0x5c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800931e:	d00c      	beq.n	800933a <prvTaskExitError+0x2e>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	b672      	cpsid	i
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	b662      	cpsie	i
 8009334:	60fb      	str	r3, [r7, #12]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <prvTaskExitError+0x2c>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	b672      	cpsid	i
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	b662      	cpsie	i
 800934e:	60bb      	str	r3, [r7, #8]
}
 8009350:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009352:	bf00      	nop
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d0fc      	beq.n	8009354 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800935a:	bf00      	nop
 800935c:	bf00      	nop
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	20000020 	.word	0x20000020
 800936c:	00000000 	.word	0x00000000

08009370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <pxCurrentTCBConst2>)
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	6808      	ldr	r0, [r1, #0]
 8009376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	f380 8809 	msr	PSP, r0
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8811 	msr	BASEPRI, r0
 800938a:	4770      	bx	lr
 800938c:	f3af 8000 	nop.w

08009390 <pxCurrentTCBConst2>:
 8009390:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop

08009398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009398:	4808      	ldr	r0, [pc, #32]	; (80093bc <prvPortStartFirstTask+0x24>)
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	6800      	ldr	r0, [r0, #0]
 800939e:	f380 8808 	msr	MSP, r0
 80093a2:	f04f 0000 	mov.w	r0, #0
 80093a6:	f380 8814 	msr	CONTROL, r0
 80093aa:	b662      	cpsie	i
 80093ac:	b661      	cpsie	f
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	df00      	svc	0
 80093b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093ba:	bf00      	nop
 80093bc:	e000ed08 	.word	0xe000ed08

080093c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093c6:	4b37      	ldr	r3, [pc, #220]	; (80094a4 <xPortStartScheduler+0xe4>)
 80093c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	22ff      	movs	r2, #255	; 0xff
 80093d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	4b2f      	ldr	r3, [pc, #188]	; (80094a8 <xPortStartScheduler+0xe8>)
 80093ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093ee:	4b2f      	ldr	r3, [pc, #188]	; (80094ac <xPortStartScheduler+0xec>)
 80093f0:	2207      	movs	r2, #7
 80093f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093f4:	e009      	b.n	800940a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093f6:	4b2d      	ldr	r3, [pc, #180]	; (80094ac <xPortStartScheduler+0xec>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	4a2b      	ldr	r2, [pc, #172]	; (80094ac <xPortStartScheduler+0xec>)
 80093fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	b2db      	uxtb	r3, r3
 8009408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009412:	2b80      	cmp	r3, #128	; 0x80
 8009414:	d0ef      	beq.n	80093f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009416:	4b25      	ldr	r3, [pc, #148]	; (80094ac <xPortStartScheduler+0xec>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f1c3 0307 	rsb	r3, r3, #7
 800941e:	2b04      	cmp	r3, #4
 8009420:	d00c      	beq.n	800943c <xPortStartScheduler+0x7c>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	b672      	cpsid	i
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	b662      	cpsie	i
 8009436:	60bb      	str	r3, [r7, #8]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800943c:	4b1b      	ldr	r3, [pc, #108]	; (80094ac <xPortStartScheduler+0xec>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	4a1a      	ldr	r2, [pc, #104]	; (80094ac <xPortStartScheduler+0xec>)
 8009444:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009446:	4b19      	ldr	r3, [pc, #100]	; (80094ac <xPortStartScheduler+0xec>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800944e:	4a17      	ldr	r2, [pc, #92]	; (80094ac <xPortStartScheduler+0xec>)
 8009450:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	b2da      	uxtb	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800945a:	4b15      	ldr	r3, [pc, #84]	; (80094b0 <xPortStartScheduler+0xf0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a14      	ldr	r2, [pc, #80]	; (80094b0 <xPortStartScheduler+0xf0>)
 8009460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009464:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009466:	4b12      	ldr	r3, [pc, #72]	; (80094b0 <xPortStartScheduler+0xf0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a11      	ldr	r2, [pc, #68]	; (80094b0 <xPortStartScheduler+0xf0>)
 800946c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009470:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009472:	f000 f8dd 	bl	8009630 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009476:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <xPortStartScheduler+0xf4>)
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800947c:	f000 f8fc 	bl	8009678 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009480:	4b0d      	ldr	r3, [pc, #52]	; (80094b8 <xPortStartScheduler+0xf8>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a0c      	ldr	r2, [pc, #48]	; (80094b8 <xPortStartScheduler+0xf8>)
 8009486:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800948a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800948c:	f7ff ff84 	bl	8009398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009490:	f7fe ff4c 	bl	800832c <vTaskSwitchContext>
	prvTaskExitError();
 8009494:	f7ff ff3a 	bl	800930c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	e000e400 	.word	0xe000e400
 80094a8:	20000f38 	.word	0x20000f38
 80094ac:	20000f3c 	.word	0x20000f3c
 80094b0:	e000ed20 	.word	0xe000ed20
 80094b4:	20000020 	.word	0x20000020
 80094b8:	e000ef34 	.word	0xe000ef34

080094bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	b672      	cpsid	i
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	b662      	cpsie	i
 80094d6:	607b      	str	r3, [r7, #4]
}
 80094d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094da:	4b10      	ldr	r3, [pc, #64]	; (800951c <vPortEnterCritical+0x60>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3301      	adds	r3, #1
 80094e0:	4a0e      	ldr	r2, [pc, #56]	; (800951c <vPortEnterCritical+0x60>)
 80094e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094e4:	4b0d      	ldr	r3, [pc, #52]	; (800951c <vPortEnterCritical+0x60>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d111      	bne.n	8009510 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094ec:	4b0c      	ldr	r3, [pc, #48]	; (8009520 <vPortEnterCritical+0x64>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00c      	beq.n	8009510 <vPortEnterCritical+0x54>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	b672      	cpsid	i
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	b662      	cpsie	i
 800950a:	603b      	str	r3, [r7, #0]
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <vPortEnterCritical+0x52>
	}
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	20000020 	.word	0x20000020
 8009520:	e000ed04 	.word	0xe000ed04

08009524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800952a:	4b13      	ldr	r3, [pc, #76]	; (8009578 <vPortExitCritical+0x54>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10c      	bne.n	800954c <vPortExitCritical+0x28>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	b672      	cpsid	i
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	b662      	cpsie	i
 8009546:	607b      	str	r3, [r7, #4]
}
 8009548:	bf00      	nop
 800954a:	e7fe      	b.n	800954a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800954c:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <vPortExitCritical+0x54>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3b01      	subs	r3, #1
 8009552:	4a09      	ldr	r2, [pc, #36]	; (8009578 <vPortExitCritical+0x54>)
 8009554:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009556:	4b08      	ldr	r3, [pc, #32]	; (8009578 <vPortExitCritical+0x54>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <vPortExitCritical+0x46>
 800955e:	2300      	movs	r3, #0
 8009560:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	f383 8811 	msr	BASEPRI, r3
}
 8009568:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	20000020 	.word	0x20000020
 800957c:	00000000 	.word	0x00000000

08009580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009580:	f3ef 8009 	mrs	r0, PSP
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	4b15      	ldr	r3, [pc, #84]	; (80095e0 <pxCurrentTCBConst>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	f01e 0f10 	tst.w	lr, #16
 8009590:	bf08      	it	eq
 8009592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959a:	6010      	str	r0, [r2, #0]
 800959c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095a4:	b672      	cpsid	i
 80095a6:	f380 8811 	msr	BASEPRI, r0
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	b662      	cpsie	i
 80095b4:	f7fe feba 	bl	800832c <vTaskSwitchContext>
 80095b8:	f04f 0000 	mov.w	r0, #0
 80095bc:	f380 8811 	msr	BASEPRI, r0
 80095c0:	bc09      	pop	{r0, r3}
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	6808      	ldr	r0, [r1, #0]
 80095c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ca:	f01e 0f10 	tst.w	lr, #16
 80095ce:	bf08      	it	eq
 80095d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095d4:	f380 8809 	msr	PSP, r0
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop

080095e0 <pxCurrentTCBConst>:
 80095e0:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop

080095e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	b672      	cpsid	i
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	b662      	cpsie	i
 8009602:	607b      	str	r3, [r7, #4]
}
 8009604:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009606:	f7fe fdd5 	bl	80081b4 <xTaskIncrementTick>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009610:	4b06      	ldr	r3, [pc, #24]	; (800962c <xPortSysTickHandler+0x44>)
 8009612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	2300      	movs	r3, #0
 800961a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	f383 8811 	msr	BASEPRI, r3
}
 8009622:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	e000ed04 	.word	0xe000ed04

08009630 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009630:	b480      	push	{r7}
 8009632:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009634:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <vPortSetupTimerInterrupt+0x34>)
 8009636:	2200      	movs	r2, #0
 8009638:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800963a:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <vPortSetupTimerInterrupt+0x38>)
 800963c:	2200      	movs	r2, #0
 800963e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009640:	4b0a      	ldr	r3, [pc, #40]	; (800966c <vPortSetupTimerInterrupt+0x3c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a0a      	ldr	r2, [pc, #40]	; (8009670 <vPortSetupTimerInterrupt+0x40>)
 8009646:	fba2 2303 	umull	r2, r3, r2, r3
 800964a:	099b      	lsrs	r3, r3, #6
 800964c:	4a09      	ldr	r2, [pc, #36]	; (8009674 <vPortSetupTimerInterrupt+0x44>)
 800964e:	3b01      	subs	r3, #1
 8009650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009652:	4b04      	ldr	r3, [pc, #16]	; (8009664 <vPortSetupTimerInterrupt+0x34>)
 8009654:	2207      	movs	r2, #7
 8009656:	601a      	str	r2, [r3, #0]
}
 8009658:	bf00      	nop
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	e000e010 	.word	0xe000e010
 8009668:	e000e018 	.word	0xe000e018
 800966c:	20000000 	.word	0x20000000
 8009670:	10624dd3 	.word	0x10624dd3
 8009674:	e000e014 	.word	0xe000e014

08009678 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009678:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009688 <vPortEnableVFP+0x10>
 800967c:	6801      	ldr	r1, [r0, #0]
 800967e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009682:	6001      	str	r1, [r0, #0]
 8009684:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009686:	bf00      	nop
 8009688:	e000ed88 	.word	0xe000ed88

0800968c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009692:	f3ef 8305 	mrs	r3, IPSR
 8009696:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b0f      	cmp	r3, #15
 800969c:	d916      	bls.n	80096cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800969e:	4a19      	ldr	r2, [pc, #100]	; (8009704 <vPortValidateInterruptPriority+0x78>)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096a8:	4b17      	ldr	r3, [pc, #92]	; (8009708 <vPortValidateInterruptPriority+0x7c>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	7afa      	ldrb	r2, [r7, #11]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d20c      	bcs.n	80096cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	b672      	cpsid	i
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	b662      	cpsie	i
 80096c6:	607b      	str	r3, [r7, #4]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096cc:	4b0f      	ldr	r3, [pc, #60]	; (800970c <vPortValidateInterruptPriority+0x80>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096d4:	4b0e      	ldr	r3, [pc, #56]	; (8009710 <vPortValidateInterruptPriority+0x84>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d90c      	bls.n	80096f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	b672      	cpsid	i
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	b662      	cpsie	i
 80096f0:	603b      	str	r3, [r7, #0]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <vPortValidateInterruptPriority+0x68>
	}
 80096f6:	bf00      	nop
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	e000e3f0 	.word	0xe000e3f0
 8009708:	20000f38 	.word	0x20000f38
 800970c:	e000ed0c 	.word	0xe000ed0c
 8009710:	20000f3c 	.word	0x20000f3c

08009714 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08a      	sub	sp, #40	; 0x28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009720:	f7fe fc8a 	bl	8008038 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009724:	4b5b      	ldr	r3, [pc, #364]	; (8009894 <pvPortMalloc+0x180>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800972c:	f000 f91a 	bl	8009964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009730:	4b59      	ldr	r3, [pc, #356]	; (8009898 <pvPortMalloc+0x184>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4013      	ands	r3, r2
 8009738:	2b00      	cmp	r3, #0
 800973a:	f040 8092 	bne.w	8009862 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d01f      	beq.n	8009784 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009744:	2208      	movs	r2, #8
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4413      	add	r3, r2
 800974a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	2b00      	cmp	r3, #0
 8009754:	d016      	beq.n	8009784 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f023 0307 	bic.w	r3, r3, #7
 800975c:	3308      	adds	r3, #8
 800975e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00c      	beq.n	8009784 <pvPortMalloc+0x70>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	b672      	cpsid	i
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	b662      	cpsie	i
 800977e:	617b      	str	r3, [r7, #20]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d06b      	beq.n	8009862 <pvPortMalloc+0x14e>
 800978a:	4b44      	ldr	r3, [pc, #272]	; (800989c <pvPortMalloc+0x188>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	429a      	cmp	r2, r3
 8009792:	d866      	bhi.n	8009862 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009794:	4b42      	ldr	r3, [pc, #264]	; (80098a0 <pvPortMalloc+0x18c>)
 8009796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009798:	4b41      	ldr	r3, [pc, #260]	; (80098a0 <pvPortMalloc+0x18c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800979e:	e004      	b.n	80097aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d903      	bls.n	80097bc <pvPortMalloc+0xa8>
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1f1      	bne.n	80097a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097bc:	4b35      	ldr	r3, [pc, #212]	; (8009894 <pvPortMalloc+0x180>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d04d      	beq.n	8009862 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2208      	movs	r2, #8
 80097cc:	4413      	add	r3, r2
 80097ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	2308      	movs	r3, #8
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d921      	bls.n	800982c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4413      	add	r3, r2
 80097ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00c      	beq.n	8009814 <pvPortMalloc+0x100>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	b672      	cpsid	i
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	b662      	cpsie	i
 800980e:	613b      	str	r3, [r7, #16]
}
 8009810:	bf00      	nop
 8009812:	e7fe      	b.n	8009812 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009826:	69b8      	ldr	r0, [r7, #24]
 8009828:	f000 f8fe 	bl	8009a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800982c:	4b1b      	ldr	r3, [pc, #108]	; (800989c <pvPortMalloc+0x188>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	4a19      	ldr	r2, [pc, #100]	; (800989c <pvPortMalloc+0x188>)
 8009838:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800983a:	4b18      	ldr	r3, [pc, #96]	; (800989c <pvPortMalloc+0x188>)
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b19      	ldr	r3, [pc, #100]	; (80098a4 <pvPortMalloc+0x190>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d203      	bcs.n	800984e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009846:	4b15      	ldr	r3, [pc, #84]	; (800989c <pvPortMalloc+0x188>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a16      	ldr	r2, [pc, #88]	; (80098a4 <pvPortMalloc+0x190>)
 800984c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	4b11      	ldr	r3, [pc, #68]	; (8009898 <pvPortMalloc+0x184>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	431a      	orrs	r2, r3
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009862:	f7fe fbf7 	bl	8008054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	f003 0307 	and.w	r3, r3, #7
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00c      	beq.n	800988a <pvPortMalloc+0x176>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	b672      	cpsid	i
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	b662      	cpsie	i
 8009884:	60fb      	str	r3, [r7, #12]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <pvPortMalloc+0x174>
	return pvReturn;
 800988a:	69fb      	ldr	r3, [r7, #28]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3728      	adds	r7, #40	; 0x28
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20004b48 	.word	0x20004b48
 8009898:	20004b54 	.word	0x20004b54
 800989c:	20004b4c 	.word	0x20004b4c
 80098a0:	20004b40 	.word	0x20004b40
 80098a4:	20004b50 	.word	0x20004b50

080098a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d04c      	beq.n	8009954 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098ba:	2308      	movs	r3, #8
 80098bc:	425b      	negs	r3, r3
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4413      	add	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	4b23      	ldr	r3, [pc, #140]	; (800995c <vPortFree+0xb4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4013      	ands	r3, r2
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10c      	bne.n	80098f0 <vPortFree+0x48>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	b672      	cpsid	i
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	b662      	cpsie	i
 80098ea:	60fb      	str	r3, [r7, #12]
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00c      	beq.n	8009912 <vPortFree+0x6a>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	b672      	cpsid	i
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	b662      	cpsie	i
 800990c:	60bb      	str	r3, [r7, #8]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	4b11      	ldr	r3, [pc, #68]	; (800995c <vPortFree+0xb4>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4013      	ands	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d019      	beq.n	8009954 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d115      	bne.n	8009954 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	4b0b      	ldr	r3, [pc, #44]	; (800995c <vPortFree+0xb4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	43db      	mvns	r3, r3
 8009932:	401a      	ands	r2, r3
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009938:	f7fe fb7e 	bl	8008038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	4b07      	ldr	r3, [pc, #28]	; (8009960 <vPortFree+0xb8>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4413      	add	r3, r2
 8009946:	4a06      	ldr	r2, [pc, #24]	; (8009960 <vPortFree+0xb8>)
 8009948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800994a:	6938      	ldr	r0, [r7, #16]
 800994c:	f000 f86c 	bl	8009a28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009950:	f7fe fb80 	bl	8008054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009954:	bf00      	nop
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20004b54 	.word	0x20004b54
 8009960:	20004b4c 	.word	0x20004b4c

08009964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800996a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800996e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009970:	4b27      	ldr	r3, [pc, #156]	; (8009a10 <prvHeapInit+0xac>)
 8009972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00c      	beq.n	8009998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3307      	adds	r3, #7
 8009982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f023 0307 	bic.w	r3, r3, #7
 800998a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	4a1f      	ldr	r2, [pc, #124]	; (8009a10 <prvHeapInit+0xac>)
 8009994:	4413      	add	r3, r2
 8009996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800999c:	4a1d      	ldr	r2, [pc, #116]	; (8009a14 <prvHeapInit+0xb0>)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099a2:	4b1c      	ldr	r3, [pc, #112]	; (8009a14 <prvHeapInit+0xb0>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	4413      	add	r3, r2
 80099ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099b0:	2208      	movs	r2, #8
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f023 0307 	bic.w	r3, r3, #7
 80099be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4a15      	ldr	r2, [pc, #84]	; (8009a18 <prvHeapInit+0xb4>)
 80099c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099c6:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <prvHeapInit+0xb4>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2200      	movs	r2, #0
 80099cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <prvHeapInit+0xb4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <prvHeapInit+0xb4>)
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	4a0a      	ldr	r2, [pc, #40]	; (8009a1c <prvHeapInit+0xb8>)
 80099f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	4a09      	ldr	r2, [pc, #36]	; (8009a20 <prvHeapInit+0xbc>)
 80099fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099fc:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <prvHeapInit+0xc0>)
 80099fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a02:	601a      	str	r2, [r3, #0]
}
 8009a04:	bf00      	nop
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	20000f40 	.word	0x20000f40
 8009a14:	20004b40 	.word	0x20004b40
 8009a18:	20004b48 	.word	0x20004b48
 8009a1c:	20004b50 	.word	0x20004b50
 8009a20:	20004b4c 	.word	0x20004b4c
 8009a24:	20004b54 	.word	0x20004b54

08009a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a30:	4b28      	ldr	r3, [pc, #160]	; (8009ad4 <prvInsertBlockIntoFreeList+0xac>)
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	e002      	b.n	8009a3c <prvInsertBlockIntoFreeList+0x14>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d8f7      	bhi.n	8009a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	4413      	add	r3, r2
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d108      	bne.n	8009a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	441a      	add	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	441a      	add	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d118      	bne.n	8009ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	4b15      	ldr	r3, [pc, #84]	; (8009ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d00d      	beq.n	8009aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	441a      	add	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	e008      	b.n	8009ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009aa6:	4b0c      	ldr	r3, [pc, #48]	; (8009ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	e003      	b.n	8009ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d002      	beq.n	8009ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ac6:	bf00      	nop
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20004b40 	.word	0x20004b40
 8009ad8:	20004b48 	.word	0x20004b48

08009adc <__errno>:
 8009adc:	4b01      	ldr	r3, [pc, #4]	; (8009ae4 <__errno+0x8>)
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	20000024 	.word	0x20000024

08009ae8 <__libc_init_array>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	4d0d      	ldr	r5, [pc, #52]	; (8009b20 <__libc_init_array+0x38>)
 8009aec:	4c0d      	ldr	r4, [pc, #52]	; (8009b24 <__libc_init_array+0x3c>)
 8009aee:	1b64      	subs	r4, r4, r5
 8009af0:	10a4      	asrs	r4, r4, #2
 8009af2:	2600      	movs	r6, #0
 8009af4:	42a6      	cmp	r6, r4
 8009af6:	d109      	bne.n	8009b0c <__libc_init_array+0x24>
 8009af8:	4d0b      	ldr	r5, [pc, #44]	; (8009b28 <__libc_init_array+0x40>)
 8009afa:	4c0c      	ldr	r4, [pc, #48]	; (8009b2c <__libc_init_array+0x44>)
 8009afc:	f001 f9f4 	bl	800aee8 <_init>
 8009b00:	1b64      	subs	r4, r4, r5
 8009b02:	10a4      	asrs	r4, r4, #2
 8009b04:	2600      	movs	r6, #0
 8009b06:	42a6      	cmp	r6, r4
 8009b08:	d105      	bne.n	8009b16 <__libc_init_array+0x2e>
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b10:	4798      	blx	r3
 8009b12:	3601      	adds	r6, #1
 8009b14:	e7ee      	b.n	8009af4 <__libc_init_array+0xc>
 8009b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b1a:	4798      	blx	r3
 8009b1c:	3601      	adds	r6, #1
 8009b1e:	e7f2      	b.n	8009b06 <__libc_init_array+0x1e>
 8009b20:	0800ce3c 	.word	0x0800ce3c
 8009b24:	0800ce3c 	.word	0x0800ce3c
 8009b28:	0800ce3c 	.word	0x0800ce3c
 8009b2c:	0800ce40 	.word	0x0800ce40

08009b30 <memcpy>:
 8009b30:	440a      	add	r2, r1
 8009b32:	4291      	cmp	r1, r2
 8009b34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009b38:	d100      	bne.n	8009b3c <memcpy+0xc>
 8009b3a:	4770      	bx	lr
 8009b3c:	b510      	push	{r4, lr}
 8009b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b46:	4291      	cmp	r1, r2
 8009b48:	d1f9      	bne.n	8009b3e <memcpy+0xe>
 8009b4a:	bd10      	pop	{r4, pc}

08009b4c <memset>:
 8009b4c:	4402      	add	r2, r0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d100      	bne.n	8009b56 <memset+0xa>
 8009b54:	4770      	bx	lr
 8009b56:	f803 1b01 	strb.w	r1, [r3], #1
 8009b5a:	e7f9      	b.n	8009b50 <memset+0x4>

08009b5c <rand>:
 8009b5c:	4b17      	ldr	r3, [pc, #92]	; (8009bbc <rand+0x60>)
 8009b5e:	b510      	push	{r4, lr}
 8009b60:	681c      	ldr	r4, [r3, #0]
 8009b62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b64:	b9b3      	cbnz	r3, 8009b94 <rand+0x38>
 8009b66:	2018      	movs	r0, #24
 8009b68:	f000 f888 	bl	8009c7c <malloc>
 8009b6c:	63a0      	str	r0, [r4, #56]	; 0x38
 8009b6e:	b928      	cbnz	r0, 8009b7c <rand+0x20>
 8009b70:	4602      	mov	r2, r0
 8009b72:	4b13      	ldr	r3, [pc, #76]	; (8009bc0 <rand+0x64>)
 8009b74:	4813      	ldr	r0, [pc, #76]	; (8009bc4 <rand+0x68>)
 8009b76:	214e      	movs	r1, #78	; 0x4e
 8009b78:	f000 f850 	bl	8009c1c <__assert_func>
 8009b7c:	4a12      	ldr	r2, [pc, #72]	; (8009bc8 <rand+0x6c>)
 8009b7e:	4b13      	ldr	r3, [pc, #76]	; (8009bcc <rand+0x70>)
 8009b80:	e9c0 2300 	strd	r2, r3, [r0]
 8009b84:	4b12      	ldr	r3, [pc, #72]	; (8009bd0 <rand+0x74>)
 8009b86:	6083      	str	r3, [r0, #8]
 8009b88:	230b      	movs	r3, #11
 8009b8a:	8183      	strh	r3, [r0, #12]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009b94:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009b96:	480f      	ldr	r0, [pc, #60]	; (8009bd4 <rand+0x78>)
 8009b98:	690a      	ldr	r2, [r1, #16]
 8009b9a:	694b      	ldr	r3, [r1, #20]
 8009b9c:	4c0e      	ldr	r4, [pc, #56]	; (8009bd8 <rand+0x7c>)
 8009b9e:	4350      	muls	r0, r2
 8009ba0:	fb04 0003 	mla	r0, r4, r3, r0
 8009ba4:	fba2 3404 	umull	r3, r4, r2, r4
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	4404      	add	r4, r0
 8009bac:	f144 0000 	adc.w	r0, r4, #0
 8009bb0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8009bb4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009bb8:	bd10      	pop	{r4, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000024 	.word	0x20000024
 8009bc0:	0800ccec 	.word	0x0800ccec
 8009bc4:	0800cd03 	.word	0x0800cd03
 8009bc8:	abcd330e 	.word	0xabcd330e
 8009bcc:	e66d1234 	.word	0xe66d1234
 8009bd0:	0005deec 	.word	0x0005deec
 8009bd4:	5851f42d 	.word	0x5851f42d
 8009bd8:	4c957f2d 	.word	0x4c957f2d

08009bdc <siprintf>:
 8009bdc:	b40e      	push	{r1, r2, r3}
 8009bde:	b500      	push	{lr}
 8009be0:	b09c      	sub	sp, #112	; 0x70
 8009be2:	ab1d      	add	r3, sp, #116	; 0x74
 8009be4:	9002      	str	r0, [sp, #8]
 8009be6:	9006      	str	r0, [sp, #24]
 8009be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bec:	4809      	ldr	r0, [pc, #36]	; (8009c14 <siprintf+0x38>)
 8009bee:	9107      	str	r1, [sp, #28]
 8009bf0:	9104      	str	r1, [sp, #16]
 8009bf2:	4909      	ldr	r1, [pc, #36]	; (8009c18 <siprintf+0x3c>)
 8009bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bf8:	9105      	str	r1, [sp, #20]
 8009bfa:	6800      	ldr	r0, [r0, #0]
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	a902      	add	r1, sp, #8
 8009c00:	f000 f94a 	bl	8009e98 <_svfiprintf_r>
 8009c04:	9b02      	ldr	r3, [sp, #8]
 8009c06:	2200      	movs	r2, #0
 8009c08:	701a      	strb	r2, [r3, #0]
 8009c0a:	b01c      	add	sp, #112	; 0x70
 8009c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c10:	b003      	add	sp, #12
 8009c12:	4770      	bx	lr
 8009c14:	20000024 	.word	0x20000024
 8009c18:	ffff0208 	.word	0xffff0208

08009c1c <__assert_func>:
 8009c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c1e:	4614      	mov	r4, r2
 8009c20:	461a      	mov	r2, r3
 8009c22:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <__assert_func+0x2c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4605      	mov	r5, r0
 8009c28:	68d8      	ldr	r0, [r3, #12]
 8009c2a:	b14c      	cbz	r4, 8009c40 <__assert_func+0x24>
 8009c2c:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <__assert_func+0x30>)
 8009c2e:	9100      	str	r1, [sp, #0]
 8009c30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c34:	4906      	ldr	r1, [pc, #24]	; (8009c50 <__assert_func+0x34>)
 8009c36:	462b      	mov	r3, r5
 8009c38:	f000 f80e 	bl	8009c58 <fiprintf>
 8009c3c:	f000 fdea 	bl	800a814 <abort>
 8009c40:	4b04      	ldr	r3, [pc, #16]	; (8009c54 <__assert_func+0x38>)
 8009c42:	461c      	mov	r4, r3
 8009c44:	e7f3      	b.n	8009c2e <__assert_func+0x12>
 8009c46:	bf00      	nop
 8009c48:	20000024 	.word	0x20000024
 8009c4c:	0800cd62 	.word	0x0800cd62
 8009c50:	0800cd6f 	.word	0x0800cd6f
 8009c54:	0800cd9d 	.word	0x0800cd9d

08009c58 <fiprintf>:
 8009c58:	b40e      	push	{r1, r2, r3}
 8009c5a:	b503      	push	{r0, r1, lr}
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	ab03      	add	r3, sp, #12
 8009c60:	4805      	ldr	r0, [pc, #20]	; (8009c78 <fiprintf+0x20>)
 8009c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c66:	6800      	ldr	r0, [r0, #0]
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	f000 fa3f 	bl	800a0ec <_vfiprintf_r>
 8009c6e:	b002      	add	sp, #8
 8009c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c74:	b003      	add	sp, #12
 8009c76:	4770      	bx	lr
 8009c78:	20000024 	.word	0x20000024

08009c7c <malloc>:
 8009c7c:	4b02      	ldr	r3, [pc, #8]	; (8009c88 <malloc+0xc>)
 8009c7e:	4601      	mov	r1, r0
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	f000 b853 	b.w	8009d2c <_malloc_r>
 8009c86:	bf00      	nop
 8009c88:	20000024 	.word	0x20000024

08009c8c <_free_r>:
 8009c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c8e:	2900      	cmp	r1, #0
 8009c90:	d048      	beq.n	8009d24 <_free_r+0x98>
 8009c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c96:	9001      	str	r0, [sp, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c9e:	bfb8      	it	lt
 8009ca0:	18e4      	addlt	r4, r4, r3
 8009ca2:	f000 fff7 	bl	800ac94 <__malloc_lock>
 8009ca6:	4a20      	ldr	r2, [pc, #128]	; (8009d28 <_free_r+0x9c>)
 8009ca8:	9801      	ldr	r0, [sp, #4]
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	4615      	mov	r5, r2
 8009cae:	b933      	cbnz	r3, 8009cbe <_free_r+0x32>
 8009cb0:	6063      	str	r3, [r4, #4]
 8009cb2:	6014      	str	r4, [r2, #0]
 8009cb4:	b003      	add	sp, #12
 8009cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cba:	f000 bff1 	b.w	800aca0 <__malloc_unlock>
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	d90b      	bls.n	8009cda <_free_r+0x4e>
 8009cc2:	6821      	ldr	r1, [r4, #0]
 8009cc4:	1862      	adds	r2, r4, r1
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	bf04      	itt	eq
 8009cca:	681a      	ldreq	r2, [r3, #0]
 8009ccc:	685b      	ldreq	r3, [r3, #4]
 8009cce:	6063      	str	r3, [r4, #4]
 8009cd0:	bf04      	itt	eq
 8009cd2:	1852      	addeq	r2, r2, r1
 8009cd4:	6022      	streq	r2, [r4, #0]
 8009cd6:	602c      	str	r4, [r5, #0]
 8009cd8:	e7ec      	b.n	8009cb4 <_free_r+0x28>
 8009cda:	461a      	mov	r2, r3
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	b10b      	cbz	r3, 8009ce4 <_free_r+0x58>
 8009ce0:	42a3      	cmp	r3, r4
 8009ce2:	d9fa      	bls.n	8009cda <_free_r+0x4e>
 8009ce4:	6811      	ldr	r1, [r2, #0]
 8009ce6:	1855      	adds	r5, r2, r1
 8009ce8:	42a5      	cmp	r5, r4
 8009cea:	d10b      	bne.n	8009d04 <_free_r+0x78>
 8009cec:	6824      	ldr	r4, [r4, #0]
 8009cee:	4421      	add	r1, r4
 8009cf0:	1854      	adds	r4, r2, r1
 8009cf2:	42a3      	cmp	r3, r4
 8009cf4:	6011      	str	r1, [r2, #0]
 8009cf6:	d1dd      	bne.n	8009cb4 <_free_r+0x28>
 8009cf8:	681c      	ldr	r4, [r3, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	6053      	str	r3, [r2, #4]
 8009cfe:	4421      	add	r1, r4
 8009d00:	6011      	str	r1, [r2, #0]
 8009d02:	e7d7      	b.n	8009cb4 <_free_r+0x28>
 8009d04:	d902      	bls.n	8009d0c <_free_r+0x80>
 8009d06:	230c      	movs	r3, #12
 8009d08:	6003      	str	r3, [r0, #0]
 8009d0a:	e7d3      	b.n	8009cb4 <_free_r+0x28>
 8009d0c:	6825      	ldr	r5, [r4, #0]
 8009d0e:	1961      	adds	r1, r4, r5
 8009d10:	428b      	cmp	r3, r1
 8009d12:	bf04      	itt	eq
 8009d14:	6819      	ldreq	r1, [r3, #0]
 8009d16:	685b      	ldreq	r3, [r3, #4]
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	bf04      	itt	eq
 8009d1c:	1949      	addeq	r1, r1, r5
 8009d1e:	6021      	streq	r1, [r4, #0]
 8009d20:	6054      	str	r4, [r2, #4]
 8009d22:	e7c7      	b.n	8009cb4 <_free_r+0x28>
 8009d24:	b003      	add	sp, #12
 8009d26:	bd30      	pop	{r4, r5, pc}
 8009d28:	20004b58 	.word	0x20004b58

08009d2c <_malloc_r>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	1ccd      	adds	r5, r1, #3
 8009d30:	f025 0503 	bic.w	r5, r5, #3
 8009d34:	3508      	adds	r5, #8
 8009d36:	2d0c      	cmp	r5, #12
 8009d38:	bf38      	it	cc
 8009d3a:	250c      	movcc	r5, #12
 8009d3c:	2d00      	cmp	r5, #0
 8009d3e:	4606      	mov	r6, r0
 8009d40:	db01      	blt.n	8009d46 <_malloc_r+0x1a>
 8009d42:	42a9      	cmp	r1, r5
 8009d44:	d903      	bls.n	8009d4e <_malloc_r+0x22>
 8009d46:	230c      	movs	r3, #12
 8009d48:	6033      	str	r3, [r6, #0]
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4e:	f000 ffa1 	bl	800ac94 <__malloc_lock>
 8009d52:	4921      	ldr	r1, [pc, #132]	; (8009dd8 <_malloc_r+0xac>)
 8009d54:	680a      	ldr	r2, [r1, #0]
 8009d56:	4614      	mov	r4, r2
 8009d58:	b99c      	cbnz	r4, 8009d82 <_malloc_r+0x56>
 8009d5a:	4f20      	ldr	r7, [pc, #128]	; (8009ddc <_malloc_r+0xb0>)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	b923      	cbnz	r3, 8009d6a <_malloc_r+0x3e>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4630      	mov	r0, r6
 8009d64:	f000 fc86 	bl	800a674 <_sbrk_r>
 8009d68:	6038      	str	r0, [r7, #0]
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	f000 fc81 	bl	800a674 <_sbrk_r>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d123      	bne.n	8009dbe <_malloc_r+0x92>
 8009d76:	230c      	movs	r3, #12
 8009d78:	6033      	str	r3, [r6, #0]
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f000 ff90 	bl	800aca0 <__malloc_unlock>
 8009d80:	e7e3      	b.n	8009d4a <_malloc_r+0x1e>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	1b5b      	subs	r3, r3, r5
 8009d86:	d417      	bmi.n	8009db8 <_malloc_r+0x8c>
 8009d88:	2b0b      	cmp	r3, #11
 8009d8a:	d903      	bls.n	8009d94 <_malloc_r+0x68>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	441c      	add	r4, r3
 8009d90:	6025      	str	r5, [r4, #0]
 8009d92:	e004      	b.n	8009d9e <_malloc_r+0x72>
 8009d94:	6863      	ldr	r3, [r4, #4]
 8009d96:	42a2      	cmp	r2, r4
 8009d98:	bf0c      	ite	eq
 8009d9a:	600b      	streq	r3, [r1, #0]
 8009d9c:	6053      	strne	r3, [r2, #4]
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f000 ff7e 	bl	800aca0 <__malloc_unlock>
 8009da4:	f104 000b 	add.w	r0, r4, #11
 8009da8:	1d23      	adds	r3, r4, #4
 8009daa:	f020 0007 	bic.w	r0, r0, #7
 8009dae:	1ac2      	subs	r2, r0, r3
 8009db0:	d0cc      	beq.n	8009d4c <_malloc_r+0x20>
 8009db2:	1a1b      	subs	r3, r3, r0
 8009db4:	50a3      	str	r3, [r4, r2]
 8009db6:	e7c9      	b.n	8009d4c <_malloc_r+0x20>
 8009db8:	4622      	mov	r2, r4
 8009dba:	6864      	ldr	r4, [r4, #4]
 8009dbc:	e7cc      	b.n	8009d58 <_malloc_r+0x2c>
 8009dbe:	1cc4      	adds	r4, r0, #3
 8009dc0:	f024 0403 	bic.w	r4, r4, #3
 8009dc4:	42a0      	cmp	r0, r4
 8009dc6:	d0e3      	beq.n	8009d90 <_malloc_r+0x64>
 8009dc8:	1a21      	subs	r1, r4, r0
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f000 fc52 	bl	800a674 <_sbrk_r>
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d1dd      	bne.n	8009d90 <_malloc_r+0x64>
 8009dd4:	e7cf      	b.n	8009d76 <_malloc_r+0x4a>
 8009dd6:	bf00      	nop
 8009dd8:	20004b58 	.word	0x20004b58
 8009ddc:	20004b5c 	.word	0x20004b5c

08009de0 <__ssputs_r>:
 8009de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	688e      	ldr	r6, [r1, #8]
 8009de6:	429e      	cmp	r6, r3
 8009de8:	4682      	mov	sl, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	4690      	mov	r8, r2
 8009dee:	461f      	mov	r7, r3
 8009df0:	d838      	bhi.n	8009e64 <__ssputs_r+0x84>
 8009df2:	898a      	ldrh	r2, [r1, #12]
 8009df4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009df8:	d032      	beq.n	8009e60 <__ssputs_r+0x80>
 8009dfa:	6825      	ldr	r5, [r4, #0]
 8009dfc:	6909      	ldr	r1, [r1, #16]
 8009dfe:	eba5 0901 	sub.w	r9, r5, r1
 8009e02:	6965      	ldr	r5, [r4, #20]
 8009e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	444b      	add	r3, r9
 8009e10:	106d      	asrs	r5, r5, #1
 8009e12:	429d      	cmp	r5, r3
 8009e14:	bf38      	it	cc
 8009e16:	461d      	movcc	r5, r3
 8009e18:	0553      	lsls	r3, r2, #21
 8009e1a:	d531      	bpl.n	8009e80 <__ssputs_r+0xa0>
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7ff ff85 	bl	8009d2c <_malloc_r>
 8009e22:	4606      	mov	r6, r0
 8009e24:	b950      	cbnz	r0, 8009e3c <__ssputs_r+0x5c>
 8009e26:	230c      	movs	r3, #12
 8009e28:	f8ca 3000 	str.w	r3, [sl]
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3c:	6921      	ldr	r1, [r4, #16]
 8009e3e:	464a      	mov	r2, r9
 8009e40:	f7ff fe76 	bl	8009b30 <memcpy>
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	6126      	str	r6, [r4, #16]
 8009e52:	6165      	str	r5, [r4, #20]
 8009e54:	444e      	add	r6, r9
 8009e56:	eba5 0509 	sub.w	r5, r5, r9
 8009e5a:	6026      	str	r6, [r4, #0]
 8009e5c:	60a5      	str	r5, [r4, #8]
 8009e5e:	463e      	mov	r6, r7
 8009e60:	42be      	cmp	r6, r7
 8009e62:	d900      	bls.n	8009e66 <__ssputs_r+0x86>
 8009e64:	463e      	mov	r6, r7
 8009e66:	4632      	mov	r2, r6
 8009e68:	6820      	ldr	r0, [r4, #0]
 8009e6a:	4641      	mov	r1, r8
 8009e6c:	f000 fef8 	bl	800ac60 <memmove>
 8009e70:	68a3      	ldr	r3, [r4, #8]
 8009e72:	6822      	ldr	r2, [r4, #0]
 8009e74:	1b9b      	subs	r3, r3, r6
 8009e76:	4432      	add	r2, r6
 8009e78:	60a3      	str	r3, [r4, #8]
 8009e7a:	6022      	str	r2, [r4, #0]
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e7db      	b.n	8009e38 <__ssputs_r+0x58>
 8009e80:	462a      	mov	r2, r5
 8009e82:	f000 ff13 	bl	800acac <_realloc_r>
 8009e86:	4606      	mov	r6, r0
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d1e1      	bne.n	8009e50 <__ssputs_r+0x70>
 8009e8c:	6921      	ldr	r1, [r4, #16]
 8009e8e:	4650      	mov	r0, sl
 8009e90:	f7ff fefc 	bl	8009c8c <_free_r>
 8009e94:	e7c7      	b.n	8009e26 <__ssputs_r+0x46>
	...

08009e98 <_svfiprintf_r>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	4698      	mov	r8, r3
 8009e9e:	898b      	ldrh	r3, [r1, #12]
 8009ea0:	061b      	lsls	r3, r3, #24
 8009ea2:	b09d      	sub	sp, #116	; 0x74
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	460d      	mov	r5, r1
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	d50e      	bpl.n	8009eca <_svfiprintf_r+0x32>
 8009eac:	690b      	ldr	r3, [r1, #16]
 8009eae:	b963      	cbnz	r3, 8009eca <_svfiprintf_r+0x32>
 8009eb0:	2140      	movs	r1, #64	; 0x40
 8009eb2:	f7ff ff3b 	bl	8009d2c <_malloc_r>
 8009eb6:	6028      	str	r0, [r5, #0]
 8009eb8:	6128      	str	r0, [r5, #16]
 8009eba:	b920      	cbnz	r0, 8009ec6 <_svfiprintf_r+0x2e>
 8009ebc:	230c      	movs	r3, #12
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ec4:	e0d1      	b.n	800a06a <_svfiprintf_r+0x1d2>
 8009ec6:	2340      	movs	r3, #64	; 0x40
 8009ec8:	616b      	str	r3, [r5, #20]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ece:	2320      	movs	r3, #32
 8009ed0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ed8:	2330      	movs	r3, #48	; 0x30
 8009eda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a084 <_svfiprintf_r+0x1ec>
 8009ede:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ee2:	f04f 0901 	mov.w	r9, #1
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	469a      	mov	sl, r3
 8009eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eee:	b10a      	cbz	r2, 8009ef4 <_svfiprintf_r+0x5c>
 8009ef0:	2a25      	cmp	r2, #37	; 0x25
 8009ef2:	d1f9      	bne.n	8009ee8 <_svfiprintf_r+0x50>
 8009ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ef8:	d00b      	beq.n	8009f12 <_svfiprintf_r+0x7a>
 8009efa:	465b      	mov	r3, fp
 8009efc:	4622      	mov	r2, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	4638      	mov	r0, r7
 8009f02:	f7ff ff6d 	bl	8009de0 <__ssputs_r>
 8009f06:	3001      	adds	r0, #1
 8009f08:	f000 80aa 	beq.w	800a060 <_svfiprintf_r+0x1c8>
 8009f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f0e:	445a      	add	r2, fp
 8009f10:	9209      	str	r2, [sp, #36]	; 0x24
 8009f12:	f89a 3000 	ldrb.w	r3, [sl]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 80a2 	beq.w	800a060 <_svfiprintf_r+0x1c8>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f26:	f10a 0a01 	add.w	sl, sl, #1
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	9307      	str	r3, [sp, #28]
 8009f2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f32:	931a      	str	r3, [sp, #104]	; 0x68
 8009f34:	4654      	mov	r4, sl
 8009f36:	2205      	movs	r2, #5
 8009f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f3c:	4851      	ldr	r0, [pc, #324]	; (800a084 <_svfiprintf_r+0x1ec>)
 8009f3e:	f7f6 f97f 	bl	8000240 <memchr>
 8009f42:	9a04      	ldr	r2, [sp, #16]
 8009f44:	b9d8      	cbnz	r0, 8009f7e <_svfiprintf_r+0xe6>
 8009f46:	06d0      	lsls	r0, r2, #27
 8009f48:	bf44      	itt	mi
 8009f4a:	2320      	movmi	r3, #32
 8009f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f50:	0711      	lsls	r1, r2, #28
 8009f52:	bf44      	itt	mi
 8009f54:	232b      	movmi	r3, #43	; 0x2b
 8009f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f60:	d015      	beq.n	8009f8e <_svfiprintf_r+0xf6>
 8009f62:	9a07      	ldr	r2, [sp, #28]
 8009f64:	4654      	mov	r4, sl
 8009f66:	2000      	movs	r0, #0
 8009f68:	f04f 0c0a 	mov.w	ip, #10
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f72:	3b30      	subs	r3, #48	; 0x30
 8009f74:	2b09      	cmp	r3, #9
 8009f76:	d94e      	bls.n	800a016 <_svfiprintf_r+0x17e>
 8009f78:	b1b0      	cbz	r0, 8009fa8 <_svfiprintf_r+0x110>
 8009f7a:	9207      	str	r2, [sp, #28]
 8009f7c:	e014      	b.n	8009fa8 <_svfiprintf_r+0x110>
 8009f7e:	eba0 0308 	sub.w	r3, r0, r8
 8009f82:	fa09 f303 	lsl.w	r3, r9, r3
 8009f86:	4313      	orrs	r3, r2
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	46a2      	mov	sl, r4
 8009f8c:	e7d2      	b.n	8009f34 <_svfiprintf_r+0x9c>
 8009f8e:	9b03      	ldr	r3, [sp, #12]
 8009f90:	1d19      	adds	r1, r3, #4
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	9103      	str	r1, [sp, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	bfbb      	ittet	lt
 8009f9a:	425b      	neglt	r3, r3
 8009f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa0:	9307      	strge	r3, [sp, #28]
 8009fa2:	9307      	strlt	r3, [sp, #28]
 8009fa4:	bfb8      	it	lt
 8009fa6:	9204      	strlt	r2, [sp, #16]
 8009fa8:	7823      	ldrb	r3, [r4, #0]
 8009faa:	2b2e      	cmp	r3, #46	; 0x2e
 8009fac:	d10c      	bne.n	8009fc8 <_svfiprintf_r+0x130>
 8009fae:	7863      	ldrb	r3, [r4, #1]
 8009fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb2:	d135      	bne.n	800a020 <_svfiprintf_r+0x188>
 8009fb4:	9b03      	ldr	r3, [sp, #12]
 8009fb6:	1d1a      	adds	r2, r3, #4
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	9203      	str	r2, [sp, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bfb8      	it	lt
 8009fc0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009fc4:	3402      	adds	r4, #2
 8009fc6:	9305      	str	r3, [sp, #20]
 8009fc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a094 <_svfiprintf_r+0x1fc>
 8009fcc:	7821      	ldrb	r1, [r4, #0]
 8009fce:	2203      	movs	r2, #3
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	f7f6 f935 	bl	8000240 <memchr>
 8009fd6:	b140      	cbz	r0, 8009fea <_svfiprintf_r+0x152>
 8009fd8:	2340      	movs	r3, #64	; 0x40
 8009fda:	eba0 000a 	sub.w	r0, r0, sl
 8009fde:	fa03 f000 	lsl.w	r0, r3, r0
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	4303      	orrs	r3, r0
 8009fe6:	3401      	adds	r4, #1
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fee:	4826      	ldr	r0, [pc, #152]	; (800a088 <_svfiprintf_r+0x1f0>)
 8009ff0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ff4:	2206      	movs	r2, #6
 8009ff6:	f7f6 f923 	bl	8000240 <memchr>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d038      	beq.n	800a070 <_svfiprintf_r+0x1d8>
 8009ffe:	4b23      	ldr	r3, [pc, #140]	; (800a08c <_svfiprintf_r+0x1f4>)
 800a000:	bb1b      	cbnz	r3, 800a04a <_svfiprintf_r+0x1b2>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	3307      	adds	r3, #7
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	3308      	adds	r3, #8
 800a00c:	9303      	str	r3, [sp, #12]
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	4433      	add	r3, r6
 800a012:	9309      	str	r3, [sp, #36]	; 0x24
 800a014:	e767      	b.n	8009ee6 <_svfiprintf_r+0x4e>
 800a016:	fb0c 3202 	mla	r2, ip, r2, r3
 800a01a:	460c      	mov	r4, r1
 800a01c:	2001      	movs	r0, #1
 800a01e:	e7a5      	b.n	8009f6c <_svfiprintf_r+0xd4>
 800a020:	2300      	movs	r3, #0
 800a022:	3401      	adds	r4, #1
 800a024:	9305      	str	r3, [sp, #20]
 800a026:	4619      	mov	r1, r3
 800a028:	f04f 0c0a 	mov.w	ip, #10
 800a02c:	4620      	mov	r0, r4
 800a02e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a032:	3a30      	subs	r2, #48	; 0x30
 800a034:	2a09      	cmp	r2, #9
 800a036:	d903      	bls.n	800a040 <_svfiprintf_r+0x1a8>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0c5      	beq.n	8009fc8 <_svfiprintf_r+0x130>
 800a03c:	9105      	str	r1, [sp, #20]
 800a03e:	e7c3      	b.n	8009fc8 <_svfiprintf_r+0x130>
 800a040:	fb0c 2101 	mla	r1, ip, r1, r2
 800a044:	4604      	mov	r4, r0
 800a046:	2301      	movs	r3, #1
 800a048:	e7f0      	b.n	800a02c <_svfiprintf_r+0x194>
 800a04a:	ab03      	add	r3, sp, #12
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	462a      	mov	r2, r5
 800a050:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <_svfiprintf_r+0x1f8>)
 800a052:	a904      	add	r1, sp, #16
 800a054:	4638      	mov	r0, r7
 800a056:	f3af 8000 	nop.w
 800a05a:	1c42      	adds	r2, r0, #1
 800a05c:	4606      	mov	r6, r0
 800a05e:	d1d6      	bne.n	800a00e <_svfiprintf_r+0x176>
 800a060:	89ab      	ldrh	r3, [r5, #12]
 800a062:	065b      	lsls	r3, r3, #25
 800a064:	f53f af2c 	bmi.w	8009ec0 <_svfiprintf_r+0x28>
 800a068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a06a:	b01d      	add	sp, #116	; 0x74
 800a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a070:	ab03      	add	r3, sp, #12
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	462a      	mov	r2, r5
 800a076:	4b06      	ldr	r3, [pc, #24]	; (800a090 <_svfiprintf_r+0x1f8>)
 800a078:	a904      	add	r1, sp, #16
 800a07a:	4638      	mov	r0, r7
 800a07c:	f000 f9d4 	bl	800a428 <_printf_i>
 800a080:	e7eb      	b.n	800a05a <_svfiprintf_r+0x1c2>
 800a082:	bf00      	nop
 800a084:	0800cd9e 	.word	0x0800cd9e
 800a088:	0800cda8 	.word	0x0800cda8
 800a08c:	00000000 	.word	0x00000000
 800a090:	08009de1 	.word	0x08009de1
 800a094:	0800cda4 	.word	0x0800cda4

0800a098 <__sfputc_r>:
 800a098:	6893      	ldr	r3, [r2, #8]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	b410      	push	{r4}
 800a0a0:	6093      	str	r3, [r2, #8]
 800a0a2:	da08      	bge.n	800a0b6 <__sfputc_r+0x1e>
 800a0a4:	6994      	ldr	r4, [r2, #24]
 800a0a6:	42a3      	cmp	r3, r4
 800a0a8:	db01      	blt.n	800a0ae <__sfputc_r+0x16>
 800a0aa:	290a      	cmp	r1, #10
 800a0ac:	d103      	bne.n	800a0b6 <__sfputc_r+0x1e>
 800a0ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0b2:	f000 baef 	b.w	800a694 <__swbuf_r>
 800a0b6:	6813      	ldr	r3, [r2, #0]
 800a0b8:	1c58      	adds	r0, r3, #1
 800a0ba:	6010      	str	r0, [r2, #0]
 800a0bc:	7019      	strb	r1, [r3, #0]
 800a0be:	4608      	mov	r0, r1
 800a0c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <__sfputs_r>:
 800a0c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	460f      	mov	r7, r1
 800a0cc:	4614      	mov	r4, r2
 800a0ce:	18d5      	adds	r5, r2, r3
 800a0d0:	42ac      	cmp	r4, r5
 800a0d2:	d101      	bne.n	800a0d8 <__sfputs_r+0x12>
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	e007      	b.n	800a0e8 <__sfputs_r+0x22>
 800a0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0dc:	463a      	mov	r2, r7
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f7ff ffda 	bl	800a098 <__sfputc_r>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d1f3      	bne.n	800a0d0 <__sfputs_r+0xa>
 800a0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0ec <_vfiprintf_r>:
 800a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f0:	460d      	mov	r5, r1
 800a0f2:	b09d      	sub	sp, #116	; 0x74
 800a0f4:	4614      	mov	r4, r2
 800a0f6:	4698      	mov	r8, r3
 800a0f8:	4606      	mov	r6, r0
 800a0fa:	b118      	cbz	r0, 800a104 <_vfiprintf_r+0x18>
 800a0fc:	6983      	ldr	r3, [r0, #24]
 800a0fe:	b90b      	cbnz	r3, 800a104 <_vfiprintf_r+0x18>
 800a100:	f000 fcaa 	bl	800aa58 <__sinit>
 800a104:	4b89      	ldr	r3, [pc, #548]	; (800a32c <_vfiprintf_r+0x240>)
 800a106:	429d      	cmp	r5, r3
 800a108:	d11b      	bne.n	800a142 <_vfiprintf_r+0x56>
 800a10a:	6875      	ldr	r5, [r6, #4]
 800a10c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a10e:	07d9      	lsls	r1, r3, #31
 800a110:	d405      	bmi.n	800a11e <_vfiprintf_r+0x32>
 800a112:	89ab      	ldrh	r3, [r5, #12]
 800a114:	059a      	lsls	r2, r3, #22
 800a116:	d402      	bmi.n	800a11e <_vfiprintf_r+0x32>
 800a118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a11a:	f000 fd3b 	bl	800ab94 <__retarget_lock_acquire_recursive>
 800a11e:	89ab      	ldrh	r3, [r5, #12]
 800a120:	071b      	lsls	r3, r3, #28
 800a122:	d501      	bpl.n	800a128 <_vfiprintf_r+0x3c>
 800a124:	692b      	ldr	r3, [r5, #16]
 800a126:	b9eb      	cbnz	r3, 800a164 <_vfiprintf_r+0x78>
 800a128:	4629      	mov	r1, r5
 800a12a:	4630      	mov	r0, r6
 800a12c:	f000 fb04 	bl	800a738 <__swsetup_r>
 800a130:	b1c0      	cbz	r0, 800a164 <_vfiprintf_r+0x78>
 800a132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a134:	07dc      	lsls	r4, r3, #31
 800a136:	d50e      	bpl.n	800a156 <_vfiprintf_r+0x6a>
 800a138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a13c:	b01d      	add	sp, #116	; 0x74
 800a13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a142:	4b7b      	ldr	r3, [pc, #492]	; (800a330 <_vfiprintf_r+0x244>)
 800a144:	429d      	cmp	r5, r3
 800a146:	d101      	bne.n	800a14c <_vfiprintf_r+0x60>
 800a148:	68b5      	ldr	r5, [r6, #8]
 800a14a:	e7df      	b.n	800a10c <_vfiprintf_r+0x20>
 800a14c:	4b79      	ldr	r3, [pc, #484]	; (800a334 <_vfiprintf_r+0x248>)
 800a14e:	429d      	cmp	r5, r3
 800a150:	bf08      	it	eq
 800a152:	68f5      	ldreq	r5, [r6, #12]
 800a154:	e7da      	b.n	800a10c <_vfiprintf_r+0x20>
 800a156:	89ab      	ldrh	r3, [r5, #12]
 800a158:	0598      	lsls	r0, r3, #22
 800a15a:	d4ed      	bmi.n	800a138 <_vfiprintf_r+0x4c>
 800a15c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a15e:	f000 fd1a 	bl	800ab96 <__retarget_lock_release_recursive>
 800a162:	e7e9      	b.n	800a138 <_vfiprintf_r+0x4c>
 800a164:	2300      	movs	r3, #0
 800a166:	9309      	str	r3, [sp, #36]	; 0x24
 800a168:	2320      	movs	r3, #32
 800a16a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a16e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a172:	2330      	movs	r3, #48	; 0x30
 800a174:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a338 <_vfiprintf_r+0x24c>
 800a178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a17c:	f04f 0901 	mov.w	r9, #1
 800a180:	4623      	mov	r3, r4
 800a182:	469a      	mov	sl, r3
 800a184:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a188:	b10a      	cbz	r2, 800a18e <_vfiprintf_r+0xa2>
 800a18a:	2a25      	cmp	r2, #37	; 0x25
 800a18c:	d1f9      	bne.n	800a182 <_vfiprintf_r+0x96>
 800a18e:	ebba 0b04 	subs.w	fp, sl, r4
 800a192:	d00b      	beq.n	800a1ac <_vfiprintf_r+0xc0>
 800a194:	465b      	mov	r3, fp
 800a196:	4622      	mov	r2, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7ff ff93 	bl	800a0c6 <__sfputs_r>
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	f000 80aa 	beq.w	800a2fa <_vfiprintf_r+0x20e>
 800a1a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1a8:	445a      	add	r2, fp
 800a1aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 80a2 	beq.w	800a2fa <_vfiprintf_r+0x20e>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1c0:	f10a 0a01 	add.w	sl, sl, #1
 800a1c4:	9304      	str	r3, [sp, #16]
 800a1c6:	9307      	str	r3, [sp, #28]
 800a1c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a1ce:	4654      	mov	r4, sl
 800a1d0:	2205      	movs	r2, #5
 800a1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d6:	4858      	ldr	r0, [pc, #352]	; (800a338 <_vfiprintf_r+0x24c>)
 800a1d8:	f7f6 f832 	bl	8000240 <memchr>
 800a1dc:	9a04      	ldr	r2, [sp, #16]
 800a1de:	b9d8      	cbnz	r0, 800a218 <_vfiprintf_r+0x12c>
 800a1e0:	06d1      	lsls	r1, r2, #27
 800a1e2:	bf44      	itt	mi
 800a1e4:	2320      	movmi	r3, #32
 800a1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ea:	0713      	lsls	r3, r2, #28
 800a1ec:	bf44      	itt	mi
 800a1ee:	232b      	movmi	r3, #43	; 0x2b
 800a1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1fa:	d015      	beq.n	800a228 <_vfiprintf_r+0x13c>
 800a1fc:	9a07      	ldr	r2, [sp, #28]
 800a1fe:	4654      	mov	r4, sl
 800a200:	2000      	movs	r0, #0
 800a202:	f04f 0c0a 	mov.w	ip, #10
 800a206:	4621      	mov	r1, r4
 800a208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a20c:	3b30      	subs	r3, #48	; 0x30
 800a20e:	2b09      	cmp	r3, #9
 800a210:	d94e      	bls.n	800a2b0 <_vfiprintf_r+0x1c4>
 800a212:	b1b0      	cbz	r0, 800a242 <_vfiprintf_r+0x156>
 800a214:	9207      	str	r2, [sp, #28]
 800a216:	e014      	b.n	800a242 <_vfiprintf_r+0x156>
 800a218:	eba0 0308 	sub.w	r3, r0, r8
 800a21c:	fa09 f303 	lsl.w	r3, r9, r3
 800a220:	4313      	orrs	r3, r2
 800a222:	9304      	str	r3, [sp, #16]
 800a224:	46a2      	mov	sl, r4
 800a226:	e7d2      	b.n	800a1ce <_vfiprintf_r+0xe2>
 800a228:	9b03      	ldr	r3, [sp, #12]
 800a22a:	1d19      	adds	r1, r3, #4
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	9103      	str	r1, [sp, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	bfbb      	ittet	lt
 800a234:	425b      	neglt	r3, r3
 800a236:	f042 0202 	orrlt.w	r2, r2, #2
 800a23a:	9307      	strge	r3, [sp, #28]
 800a23c:	9307      	strlt	r3, [sp, #28]
 800a23e:	bfb8      	it	lt
 800a240:	9204      	strlt	r2, [sp, #16]
 800a242:	7823      	ldrb	r3, [r4, #0]
 800a244:	2b2e      	cmp	r3, #46	; 0x2e
 800a246:	d10c      	bne.n	800a262 <_vfiprintf_r+0x176>
 800a248:	7863      	ldrb	r3, [r4, #1]
 800a24a:	2b2a      	cmp	r3, #42	; 0x2a
 800a24c:	d135      	bne.n	800a2ba <_vfiprintf_r+0x1ce>
 800a24e:	9b03      	ldr	r3, [sp, #12]
 800a250:	1d1a      	adds	r2, r3, #4
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	9203      	str	r2, [sp, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	bfb8      	it	lt
 800a25a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a25e:	3402      	adds	r4, #2
 800a260:	9305      	str	r3, [sp, #20]
 800a262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a348 <_vfiprintf_r+0x25c>
 800a266:	7821      	ldrb	r1, [r4, #0]
 800a268:	2203      	movs	r2, #3
 800a26a:	4650      	mov	r0, sl
 800a26c:	f7f5 ffe8 	bl	8000240 <memchr>
 800a270:	b140      	cbz	r0, 800a284 <_vfiprintf_r+0x198>
 800a272:	2340      	movs	r3, #64	; 0x40
 800a274:	eba0 000a 	sub.w	r0, r0, sl
 800a278:	fa03 f000 	lsl.w	r0, r3, r0
 800a27c:	9b04      	ldr	r3, [sp, #16]
 800a27e:	4303      	orrs	r3, r0
 800a280:	3401      	adds	r4, #1
 800a282:	9304      	str	r3, [sp, #16]
 800a284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a288:	482c      	ldr	r0, [pc, #176]	; (800a33c <_vfiprintf_r+0x250>)
 800a28a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a28e:	2206      	movs	r2, #6
 800a290:	f7f5 ffd6 	bl	8000240 <memchr>
 800a294:	2800      	cmp	r0, #0
 800a296:	d03f      	beq.n	800a318 <_vfiprintf_r+0x22c>
 800a298:	4b29      	ldr	r3, [pc, #164]	; (800a340 <_vfiprintf_r+0x254>)
 800a29a:	bb1b      	cbnz	r3, 800a2e4 <_vfiprintf_r+0x1f8>
 800a29c:	9b03      	ldr	r3, [sp, #12]
 800a29e:	3307      	adds	r3, #7
 800a2a0:	f023 0307 	bic.w	r3, r3, #7
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	9303      	str	r3, [sp, #12]
 800a2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2aa:	443b      	add	r3, r7
 800a2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ae:	e767      	b.n	800a180 <_vfiprintf_r+0x94>
 800a2b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	2001      	movs	r0, #1
 800a2b8:	e7a5      	b.n	800a206 <_vfiprintf_r+0x11a>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	3401      	adds	r4, #1
 800a2be:	9305      	str	r3, [sp, #20]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	f04f 0c0a 	mov.w	ip, #10
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2cc:	3a30      	subs	r2, #48	; 0x30
 800a2ce:	2a09      	cmp	r2, #9
 800a2d0:	d903      	bls.n	800a2da <_vfiprintf_r+0x1ee>
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0c5      	beq.n	800a262 <_vfiprintf_r+0x176>
 800a2d6:	9105      	str	r1, [sp, #20]
 800a2d8:	e7c3      	b.n	800a262 <_vfiprintf_r+0x176>
 800a2da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2de:	4604      	mov	r4, r0
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e7f0      	b.n	800a2c6 <_vfiprintf_r+0x1da>
 800a2e4:	ab03      	add	r3, sp, #12
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	462a      	mov	r2, r5
 800a2ea:	4b16      	ldr	r3, [pc, #88]	; (800a344 <_vfiprintf_r+0x258>)
 800a2ec:	a904      	add	r1, sp, #16
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f3af 8000 	nop.w
 800a2f4:	4607      	mov	r7, r0
 800a2f6:	1c78      	adds	r0, r7, #1
 800a2f8:	d1d6      	bne.n	800a2a8 <_vfiprintf_r+0x1bc>
 800a2fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2fc:	07d9      	lsls	r1, r3, #31
 800a2fe:	d405      	bmi.n	800a30c <_vfiprintf_r+0x220>
 800a300:	89ab      	ldrh	r3, [r5, #12]
 800a302:	059a      	lsls	r2, r3, #22
 800a304:	d402      	bmi.n	800a30c <_vfiprintf_r+0x220>
 800a306:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a308:	f000 fc45 	bl	800ab96 <__retarget_lock_release_recursive>
 800a30c:	89ab      	ldrh	r3, [r5, #12]
 800a30e:	065b      	lsls	r3, r3, #25
 800a310:	f53f af12 	bmi.w	800a138 <_vfiprintf_r+0x4c>
 800a314:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a316:	e711      	b.n	800a13c <_vfiprintf_r+0x50>
 800a318:	ab03      	add	r3, sp, #12
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	462a      	mov	r2, r5
 800a31e:	4b09      	ldr	r3, [pc, #36]	; (800a344 <_vfiprintf_r+0x258>)
 800a320:	a904      	add	r1, sp, #16
 800a322:	4630      	mov	r0, r6
 800a324:	f000 f880 	bl	800a428 <_printf_i>
 800a328:	e7e4      	b.n	800a2f4 <_vfiprintf_r+0x208>
 800a32a:	bf00      	nop
 800a32c:	0800cdf4 	.word	0x0800cdf4
 800a330:	0800ce14 	.word	0x0800ce14
 800a334:	0800cdd4 	.word	0x0800cdd4
 800a338:	0800cd9e 	.word	0x0800cd9e
 800a33c:	0800cda8 	.word	0x0800cda8
 800a340:	00000000 	.word	0x00000000
 800a344:	0800a0c7 	.word	0x0800a0c7
 800a348:	0800cda4 	.word	0x0800cda4

0800a34c <_printf_common>:
 800a34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a350:	4616      	mov	r6, r2
 800a352:	4699      	mov	r9, r3
 800a354:	688a      	ldr	r2, [r1, #8]
 800a356:	690b      	ldr	r3, [r1, #16]
 800a358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a35c:	4293      	cmp	r3, r2
 800a35e:	bfb8      	it	lt
 800a360:	4613      	movlt	r3, r2
 800a362:	6033      	str	r3, [r6, #0]
 800a364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a368:	4607      	mov	r7, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	b10a      	cbz	r2, 800a372 <_printf_common+0x26>
 800a36e:	3301      	adds	r3, #1
 800a370:	6033      	str	r3, [r6, #0]
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	0699      	lsls	r1, r3, #26
 800a376:	bf42      	ittt	mi
 800a378:	6833      	ldrmi	r3, [r6, #0]
 800a37a:	3302      	addmi	r3, #2
 800a37c:	6033      	strmi	r3, [r6, #0]
 800a37e:	6825      	ldr	r5, [r4, #0]
 800a380:	f015 0506 	ands.w	r5, r5, #6
 800a384:	d106      	bne.n	800a394 <_printf_common+0x48>
 800a386:	f104 0a19 	add.w	sl, r4, #25
 800a38a:	68e3      	ldr	r3, [r4, #12]
 800a38c:	6832      	ldr	r2, [r6, #0]
 800a38e:	1a9b      	subs	r3, r3, r2
 800a390:	42ab      	cmp	r3, r5
 800a392:	dc26      	bgt.n	800a3e2 <_printf_common+0x96>
 800a394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a398:	1e13      	subs	r3, r2, #0
 800a39a:	6822      	ldr	r2, [r4, #0]
 800a39c:	bf18      	it	ne
 800a39e:	2301      	movne	r3, #1
 800a3a0:	0692      	lsls	r2, r2, #26
 800a3a2:	d42b      	bmi.n	800a3fc <_printf_common+0xb0>
 800a3a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	47c0      	blx	r8
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	d01e      	beq.n	800a3f0 <_printf_common+0xa4>
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	68e5      	ldr	r5, [r4, #12]
 800a3b6:	6832      	ldr	r2, [r6, #0]
 800a3b8:	f003 0306 	and.w	r3, r3, #6
 800a3bc:	2b04      	cmp	r3, #4
 800a3be:	bf08      	it	eq
 800a3c0:	1aad      	subeq	r5, r5, r2
 800a3c2:	68a3      	ldr	r3, [r4, #8]
 800a3c4:	6922      	ldr	r2, [r4, #16]
 800a3c6:	bf0c      	ite	eq
 800a3c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3cc:	2500      	movne	r5, #0
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	bfc4      	itt	gt
 800a3d2:	1a9b      	subgt	r3, r3, r2
 800a3d4:	18ed      	addgt	r5, r5, r3
 800a3d6:	2600      	movs	r6, #0
 800a3d8:	341a      	adds	r4, #26
 800a3da:	42b5      	cmp	r5, r6
 800a3dc:	d11a      	bne.n	800a414 <_printf_common+0xc8>
 800a3de:	2000      	movs	r0, #0
 800a3e0:	e008      	b.n	800a3f4 <_printf_common+0xa8>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	4652      	mov	r2, sl
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	47c0      	blx	r8
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	d103      	bne.n	800a3f8 <_printf_common+0xac>
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f8:	3501      	adds	r5, #1
 800a3fa:	e7c6      	b.n	800a38a <_printf_common+0x3e>
 800a3fc:	18e1      	adds	r1, r4, r3
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	2030      	movs	r0, #48	; 0x30
 800a402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a406:	4422      	add	r2, r4
 800a408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a40c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a410:	3302      	adds	r3, #2
 800a412:	e7c7      	b.n	800a3a4 <_printf_common+0x58>
 800a414:	2301      	movs	r3, #1
 800a416:	4622      	mov	r2, r4
 800a418:	4649      	mov	r1, r9
 800a41a:	4638      	mov	r0, r7
 800a41c:	47c0      	blx	r8
 800a41e:	3001      	adds	r0, #1
 800a420:	d0e6      	beq.n	800a3f0 <_printf_common+0xa4>
 800a422:	3601      	adds	r6, #1
 800a424:	e7d9      	b.n	800a3da <_printf_common+0x8e>
	...

0800a428 <_printf_i>:
 800a428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a42c:	460c      	mov	r4, r1
 800a42e:	4691      	mov	r9, r2
 800a430:	7e27      	ldrb	r7, [r4, #24]
 800a432:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a434:	2f78      	cmp	r7, #120	; 0x78
 800a436:	4680      	mov	r8, r0
 800a438:	469a      	mov	sl, r3
 800a43a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a43e:	d807      	bhi.n	800a450 <_printf_i+0x28>
 800a440:	2f62      	cmp	r7, #98	; 0x62
 800a442:	d80a      	bhi.n	800a45a <_printf_i+0x32>
 800a444:	2f00      	cmp	r7, #0
 800a446:	f000 80d8 	beq.w	800a5fa <_printf_i+0x1d2>
 800a44a:	2f58      	cmp	r7, #88	; 0x58
 800a44c:	f000 80a3 	beq.w	800a596 <_printf_i+0x16e>
 800a450:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a458:	e03a      	b.n	800a4d0 <_printf_i+0xa8>
 800a45a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a45e:	2b15      	cmp	r3, #21
 800a460:	d8f6      	bhi.n	800a450 <_printf_i+0x28>
 800a462:	a001      	add	r0, pc, #4	; (adr r0, 800a468 <_printf_i+0x40>)
 800a464:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a468:	0800a4c1 	.word	0x0800a4c1
 800a46c:	0800a4d5 	.word	0x0800a4d5
 800a470:	0800a451 	.word	0x0800a451
 800a474:	0800a451 	.word	0x0800a451
 800a478:	0800a451 	.word	0x0800a451
 800a47c:	0800a451 	.word	0x0800a451
 800a480:	0800a4d5 	.word	0x0800a4d5
 800a484:	0800a451 	.word	0x0800a451
 800a488:	0800a451 	.word	0x0800a451
 800a48c:	0800a451 	.word	0x0800a451
 800a490:	0800a451 	.word	0x0800a451
 800a494:	0800a5e1 	.word	0x0800a5e1
 800a498:	0800a505 	.word	0x0800a505
 800a49c:	0800a5c3 	.word	0x0800a5c3
 800a4a0:	0800a451 	.word	0x0800a451
 800a4a4:	0800a451 	.word	0x0800a451
 800a4a8:	0800a603 	.word	0x0800a603
 800a4ac:	0800a451 	.word	0x0800a451
 800a4b0:	0800a505 	.word	0x0800a505
 800a4b4:	0800a451 	.word	0x0800a451
 800a4b8:	0800a451 	.word	0x0800a451
 800a4bc:	0800a5cb 	.word	0x0800a5cb
 800a4c0:	680b      	ldr	r3, [r1, #0]
 800a4c2:	1d1a      	adds	r2, r3, #4
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	600a      	str	r2, [r1, #0]
 800a4c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e0a3      	b.n	800a61c <_printf_i+0x1f4>
 800a4d4:	6825      	ldr	r5, [r4, #0]
 800a4d6:	6808      	ldr	r0, [r1, #0]
 800a4d8:	062e      	lsls	r6, r5, #24
 800a4da:	f100 0304 	add.w	r3, r0, #4
 800a4de:	d50a      	bpl.n	800a4f6 <_printf_i+0xce>
 800a4e0:	6805      	ldr	r5, [r0, #0]
 800a4e2:	600b      	str	r3, [r1, #0]
 800a4e4:	2d00      	cmp	r5, #0
 800a4e6:	da03      	bge.n	800a4f0 <_printf_i+0xc8>
 800a4e8:	232d      	movs	r3, #45	; 0x2d
 800a4ea:	426d      	negs	r5, r5
 800a4ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4f0:	485e      	ldr	r0, [pc, #376]	; (800a66c <_printf_i+0x244>)
 800a4f2:	230a      	movs	r3, #10
 800a4f4:	e019      	b.n	800a52a <_printf_i+0x102>
 800a4f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a4fa:	6805      	ldr	r5, [r0, #0]
 800a4fc:	600b      	str	r3, [r1, #0]
 800a4fe:	bf18      	it	ne
 800a500:	b22d      	sxthne	r5, r5
 800a502:	e7ef      	b.n	800a4e4 <_printf_i+0xbc>
 800a504:	680b      	ldr	r3, [r1, #0]
 800a506:	6825      	ldr	r5, [r4, #0]
 800a508:	1d18      	adds	r0, r3, #4
 800a50a:	6008      	str	r0, [r1, #0]
 800a50c:	0628      	lsls	r0, r5, #24
 800a50e:	d501      	bpl.n	800a514 <_printf_i+0xec>
 800a510:	681d      	ldr	r5, [r3, #0]
 800a512:	e002      	b.n	800a51a <_printf_i+0xf2>
 800a514:	0669      	lsls	r1, r5, #25
 800a516:	d5fb      	bpl.n	800a510 <_printf_i+0xe8>
 800a518:	881d      	ldrh	r5, [r3, #0]
 800a51a:	4854      	ldr	r0, [pc, #336]	; (800a66c <_printf_i+0x244>)
 800a51c:	2f6f      	cmp	r7, #111	; 0x6f
 800a51e:	bf0c      	ite	eq
 800a520:	2308      	moveq	r3, #8
 800a522:	230a      	movne	r3, #10
 800a524:	2100      	movs	r1, #0
 800a526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a52a:	6866      	ldr	r6, [r4, #4]
 800a52c:	60a6      	str	r6, [r4, #8]
 800a52e:	2e00      	cmp	r6, #0
 800a530:	bfa2      	ittt	ge
 800a532:	6821      	ldrge	r1, [r4, #0]
 800a534:	f021 0104 	bicge.w	r1, r1, #4
 800a538:	6021      	strge	r1, [r4, #0]
 800a53a:	b90d      	cbnz	r5, 800a540 <_printf_i+0x118>
 800a53c:	2e00      	cmp	r6, #0
 800a53e:	d04d      	beq.n	800a5dc <_printf_i+0x1b4>
 800a540:	4616      	mov	r6, r2
 800a542:	fbb5 f1f3 	udiv	r1, r5, r3
 800a546:	fb03 5711 	mls	r7, r3, r1, r5
 800a54a:	5dc7      	ldrb	r7, [r0, r7]
 800a54c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a550:	462f      	mov	r7, r5
 800a552:	42bb      	cmp	r3, r7
 800a554:	460d      	mov	r5, r1
 800a556:	d9f4      	bls.n	800a542 <_printf_i+0x11a>
 800a558:	2b08      	cmp	r3, #8
 800a55a:	d10b      	bne.n	800a574 <_printf_i+0x14c>
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	07df      	lsls	r7, r3, #31
 800a560:	d508      	bpl.n	800a574 <_printf_i+0x14c>
 800a562:	6923      	ldr	r3, [r4, #16]
 800a564:	6861      	ldr	r1, [r4, #4]
 800a566:	4299      	cmp	r1, r3
 800a568:	bfde      	ittt	le
 800a56a:	2330      	movle	r3, #48	; 0x30
 800a56c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a570:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a574:	1b92      	subs	r2, r2, r6
 800a576:	6122      	str	r2, [r4, #16]
 800a578:	f8cd a000 	str.w	sl, [sp]
 800a57c:	464b      	mov	r3, r9
 800a57e:	aa03      	add	r2, sp, #12
 800a580:	4621      	mov	r1, r4
 800a582:	4640      	mov	r0, r8
 800a584:	f7ff fee2 	bl	800a34c <_printf_common>
 800a588:	3001      	adds	r0, #1
 800a58a:	d14c      	bne.n	800a626 <_printf_i+0x1fe>
 800a58c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a590:	b004      	add	sp, #16
 800a592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a596:	4835      	ldr	r0, [pc, #212]	; (800a66c <_printf_i+0x244>)
 800a598:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	680e      	ldr	r6, [r1, #0]
 800a5a0:	061f      	lsls	r7, r3, #24
 800a5a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a5a6:	600e      	str	r6, [r1, #0]
 800a5a8:	d514      	bpl.n	800a5d4 <_printf_i+0x1ac>
 800a5aa:	07d9      	lsls	r1, r3, #31
 800a5ac:	bf44      	itt	mi
 800a5ae:	f043 0320 	orrmi.w	r3, r3, #32
 800a5b2:	6023      	strmi	r3, [r4, #0]
 800a5b4:	b91d      	cbnz	r5, 800a5be <_printf_i+0x196>
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	f023 0320 	bic.w	r3, r3, #32
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	2310      	movs	r3, #16
 800a5c0:	e7b0      	b.n	800a524 <_printf_i+0xfc>
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	f043 0320 	orr.w	r3, r3, #32
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	2378      	movs	r3, #120	; 0x78
 800a5cc:	4828      	ldr	r0, [pc, #160]	; (800a670 <_printf_i+0x248>)
 800a5ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5d2:	e7e3      	b.n	800a59c <_printf_i+0x174>
 800a5d4:	065e      	lsls	r6, r3, #25
 800a5d6:	bf48      	it	mi
 800a5d8:	b2ad      	uxthmi	r5, r5
 800a5da:	e7e6      	b.n	800a5aa <_printf_i+0x182>
 800a5dc:	4616      	mov	r6, r2
 800a5de:	e7bb      	b.n	800a558 <_printf_i+0x130>
 800a5e0:	680b      	ldr	r3, [r1, #0]
 800a5e2:	6826      	ldr	r6, [r4, #0]
 800a5e4:	6960      	ldr	r0, [r4, #20]
 800a5e6:	1d1d      	adds	r5, r3, #4
 800a5e8:	600d      	str	r5, [r1, #0]
 800a5ea:	0635      	lsls	r5, r6, #24
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	d501      	bpl.n	800a5f4 <_printf_i+0x1cc>
 800a5f0:	6018      	str	r0, [r3, #0]
 800a5f2:	e002      	b.n	800a5fa <_printf_i+0x1d2>
 800a5f4:	0671      	lsls	r1, r6, #25
 800a5f6:	d5fb      	bpl.n	800a5f0 <_printf_i+0x1c8>
 800a5f8:	8018      	strh	r0, [r3, #0]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	6123      	str	r3, [r4, #16]
 800a5fe:	4616      	mov	r6, r2
 800a600:	e7ba      	b.n	800a578 <_printf_i+0x150>
 800a602:	680b      	ldr	r3, [r1, #0]
 800a604:	1d1a      	adds	r2, r3, #4
 800a606:	600a      	str	r2, [r1, #0]
 800a608:	681e      	ldr	r6, [r3, #0]
 800a60a:	6862      	ldr	r2, [r4, #4]
 800a60c:	2100      	movs	r1, #0
 800a60e:	4630      	mov	r0, r6
 800a610:	f7f5 fe16 	bl	8000240 <memchr>
 800a614:	b108      	cbz	r0, 800a61a <_printf_i+0x1f2>
 800a616:	1b80      	subs	r0, r0, r6
 800a618:	6060      	str	r0, [r4, #4]
 800a61a:	6863      	ldr	r3, [r4, #4]
 800a61c:	6123      	str	r3, [r4, #16]
 800a61e:	2300      	movs	r3, #0
 800a620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a624:	e7a8      	b.n	800a578 <_printf_i+0x150>
 800a626:	6923      	ldr	r3, [r4, #16]
 800a628:	4632      	mov	r2, r6
 800a62a:	4649      	mov	r1, r9
 800a62c:	4640      	mov	r0, r8
 800a62e:	47d0      	blx	sl
 800a630:	3001      	adds	r0, #1
 800a632:	d0ab      	beq.n	800a58c <_printf_i+0x164>
 800a634:	6823      	ldr	r3, [r4, #0]
 800a636:	079b      	lsls	r3, r3, #30
 800a638:	d413      	bmi.n	800a662 <_printf_i+0x23a>
 800a63a:	68e0      	ldr	r0, [r4, #12]
 800a63c:	9b03      	ldr	r3, [sp, #12]
 800a63e:	4298      	cmp	r0, r3
 800a640:	bfb8      	it	lt
 800a642:	4618      	movlt	r0, r3
 800a644:	e7a4      	b.n	800a590 <_printf_i+0x168>
 800a646:	2301      	movs	r3, #1
 800a648:	4632      	mov	r2, r6
 800a64a:	4649      	mov	r1, r9
 800a64c:	4640      	mov	r0, r8
 800a64e:	47d0      	blx	sl
 800a650:	3001      	adds	r0, #1
 800a652:	d09b      	beq.n	800a58c <_printf_i+0x164>
 800a654:	3501      	adds	r5, #1
 800a656:	68e3      	ldr	r3, [r4, #12]
 800a658:	9903      	ldr	r1, [sp, #12]
 800a65a:	1a5b      	subs	r3, r3, r1
 800a65c:	42ab      	cmp	r3, r5
 800a65e:	dcf2      	bgt.n	800a646 <_printf_i+0x21e>
 800a660:	e7eb      	b.n	800a63a <_printf_i+0x212>
 800a662:	2500      	movs	r5, #0
 800a664:	f104 0619 	add.w	r6, r4, #25
 800a668:	e7f5      	b.n	800a656 <_printf_i+0x22e>
 800a66a:	bf00      	nop
 800a66c:	0800cdaf 	.word	0x0800cdaf
 800a670:	0800cdc0 	.word	0x0800cdc0

0800a674 <_sbrk_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4d06      	ldr	r5, [pc, #24]	; (800a690 <_sbrk_r+0x1c>)
 800a678:	2300      	movs	r3, #0
 800a67a:	4604      	mov	r4, r0
 800a67c:	4608      	mov	r0, r1
 800a67e:	602b      	str	r3, [r5, #0]
 800a680:	f7f6 fde6 	bl	8001250 <_sbrk>
 800a684:	1c43      	adds	r3, r0, #1
 800a686:	d102      	bne.n	800a68e <_sbrk_r+0x1a>
 800a688:	682b      	ldr	r3, [r5, #0]
 800a68a:	b103      	cbz	r3, 800a68e <_sbrk_r+0x1a>
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	bd38      	pop	{r3, r4, r5, pc}
 800a690:	20004d54 	.word	0x20004d54

0800a694 <__swbuf_r>:
 800a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a696:	460e      	mov	r6, r1
 800a698:	4614      	mov	r4, r2
 800a69a:	4605      	mov	r5, r0
 800a69c:	b118      	cbz	r0, 800a6a6 <__swbuf_r+0x12>
 800a69e:	6983      	ldr	r3, [r0, #24]
 800a6a0:	b90b      	cbnz	r3, 800a6a6 <__swbuf_r+0x12>
 800a6a2:	f000 f9d9 	bl	800aa58 <__sinit>
 800a6a6:	4b21      	ldr	r3, [pc, #132]	; (800a72c <__swbuf_r+0x98>)
 800a6a8:	429c      	cmp	r4, r3
 800a6aa:	d12b      	bne.n	800a704 <__swbuf_r+0x70>
 800a6ac:	686c      	ldr	r4, [r5, #4]
 800a6ae:	69a3      	ldr	r3, [r4, #24]
 800a6b0:	60a3      	str	r3, [r4, #8]
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	071a      	lsls	r2, r3, #28
 800a6b6:	d52f      	bpl.n	800a718 <__swbuf_r+0x84>
 800a6b8:	6923      	ldr	r3, [r4, #16]
 800a6ba:	b36b      	cbz	r3, 800a718 <__swbuf_r+0x84>
 800a6bc:	6923      	ldr	r3, [r4, #16]
 800a6be:	6820      	ldr	r0, [r4, #0]
 800a6c0:	1ac0      	subs	r0, r0, r3
 800a6c2:	6963      	ldr	r3, [r4, #20]
 800a6c4:	b2f6      	uxtb	r6, r6
 800a6c6:	4283      	cmp	r3, r0
 800a6c8:	4637      	mov	r7, r6
 800a6ca:	dc04      	bgt.n	800a6d6 <__swbuf_r+0x42>
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f000 f92e 	bl	800a930 <_fflush_r>
 800a6d4:	bb30      	cbnz	r0, 800a724 <__swbuf_r+0x90>
 800a6d6:	68a3      	ldr	r3, [r4, #8]
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	60a3      	str	r3, [r4, #8]
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	1c5a      	adds	r2, r3, #1
 800a6e0:	6022      	str	r2, [r4, #0]
 800a6e2:	701e      	strb	r6, [r3, #0]
 800a6e4:	6963      	ldr	r3, [r4, #20]
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	4283      	cmp	r3, r0
 800a6ea:	d004      	beq.n	800a6f6 <__swbuf_r+0x62>
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	07db      	lsls	r3, r3, #31
 800a6f0:	d506      	bpl.n	800a700 <__swbuf_r+0x6c>
 800a6f2:	2e0a      	cmp	r6, #10
 800a6f4:	d104      	bne.n	800a700 <__swbuf_r+0x6c>
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	f000 f919 	bl	800a930 <_fflush_r>
 800a6fe:	b988      	cbnz	r0, 800a724 <__swbuf_r+0x90>
 800a700:	4638      	mov	r0, r7
 800a702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a704:	4b0a      	ldr	r3, [pc, #40]	; (800a730 <__swbuf_r+0x9c>)
 800a706:	429c      	cmp	r4, r3
 800a708:	d101      	bne.n	800a70e <__swbuf_r+0x7a>
 800a70a:	68ac      	ldr	r4, [r5, #8]
 800a70c:	e7cf      	b.n	800a6ae <__swbuf_r+0x1a>
 800a70e:	4b09      	ldr	r3, [pc, #36]	; (800a734 <__swbuf_r+0xa0>)
 800a710:	429c      	cmp	r4, r3
 800a712:	bf08      	it	eq
 800a714:	68ec      	ldreq	r4, [r5, #12]
 800a716:	e7ca      	b.n	800a6ae <__swbuf_r+0x1a>
 800a718:	4621      	mov	r1, r4
 800a71a:	4628      	mov	r0, r5
 800a71c:	f000 f80c 	bl	800a738 <__swsetup_r>
 800a720:	2800      	cmp	r0, #0
 800a722:	d0cb      	beq.n	800a6bc <__swbuf_r+0x28>
 800a724:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a728:	e7ea      	b.n	800a700 <__swbuf_r+0x6c>
 800a72a:	bf00      	nop
 800a72c:	0800cdf4 	.word	0x0800cdf4
 800a730:	0800ce14 	.word	0x0800ce14
 800a734:	0800cdd4 	.word	0x0800cdd4

0800a738 <__swsetup_r>:
 800a738:	4b32      	ldr	r3, [pc, #200]	; (800a804 <__swsetup_r+0xcc>)
 800a73a:	b570      	push	{r4, r5, r6, lr}
 800a73c:	681d      	ldr	r5, [r3, #0]
 800a73e:	4606      	mov	r6, r0
 800a740:	460c      	mov	r4, r1
 800a742:	b125      	cbz	r5, 800a74e <__swsetup_r+0x16>
 800a744:	69ab      	ldr	r3, [r5, #24]
 800a746:	b913      	cbnz	r3, 800a74e <__swsetup_r+0x16>
 800a748:	4628      	mov	r0, r5
 800a74a:	f000 f985 	bl	800aa58 <__sinit>
 800a74e:	4b2e      	ldr	r3, [pc, #184]	; (800a808 <__swsetup_r+0xd0>)
 800a750:	429c      	cmp	r4, r3
 800a752:	d10f      	bne.n	800a774 <__swsetup_r+0x3c>
 800a754:	686c      	ldr	r4, [r5, #4]
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a75c:	0719      	lsls	r1, r3, #28
 800a75e:	d42c      	bmi.n	800a7ba <__swsetup_r+0x82>
 800a760:	06dd      	lsls	r5, r3, #27
 800a762:	d411      	bmi.n	800a788 <__swsetup_r+0x50>
 800a764:	2309      	movs	r3, #9
 800a766:	6033      	str	r3, [r6, #0]
 800a768:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a76c:	81a3      	strh	r3, [r4, #12]
 800a76e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a772:	e03e      	b.n	800a7f2 <__swsetup_r+0xba>
 800a774:	4b25      	ldr	r3, [pc, #148]	; (800a80c <__swsetup_r+0xd4>)
 800a776:	429c      	cmp	r4, r3
 800a778:	d101      	bne.n	800a77e <__swsetup_r+0x46>
 800a77a:	68ac      	ldr	r4, [r5, #8]
 800a77c:	e7eb      	b.n	800a756 <__swsetup_r+0x1e>
 800a77e:	4b24      	ldr	r3, [pc, #144]	; (800a810 <__swsetup_r+0xd8>)
 800a780:	429c      	cmp	r4, r3
 800a782:	bf08      	it	eq
 800a784:	68ec      	ldreq	r4, [r5, #12]
 800a786:	e7e6      	b.n	800a756 <__swsetup_r+0x1e>
 800a788:	0758      	lsls	r0, r3, #29
 800a78a:	d512      	bpl.n	800a7b2 <__swsetup_r+0x7a>
 800a78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a78e:	b141      	cbz	r1, 800a7a2 <__swsetup_r+0x6a>
 800a790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a794:	4299      	cmp	r1, r3
 800a796:	d002      	beq.n	800a79e <__swsetup_r+0x66>
 800a798:	4630      	mov	r0, r6
 800a79a:	f7ff fa77 	bl	8009c8c <_free_r>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	6363      	str	r3, [r4, #52]	; 0x34
 800a7a2:	89a3      	ldrh	r3, [r4, #12]
 800a7a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7a8:	81a3      	strh	r3, [r4, #12]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	6063      	str	r3, [r4, #4]
 800a7ae:	6923      	ldr	r3, [r4, #16]
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	f043 0308 	orr.w	r3, r3, #8
 800a7b8:	81a3      	strh	r3, [r4, #12]
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	b94b      	cbnz	r3, 800a7d2 <__swsetup_r+0x9a>
 800a7be:	89a3      	ldrh	r3, [r4, #12]
 800a7c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7c8:	d003      	beq.n	800a7d2 <__swsetup_r+0x9a>
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f000 fa07 	bl	800abe0 <__smakebuf_r>
 800a7d2:	89a0      	ldrh	r0, [r4, #12]
 800a7d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7d8:	f010 0301 	ands.w	r3, r0, #1
 800a7dc:	d00a      	beq.n	800a7f4 <__swsetup_r+0xbc>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60a3      	str	r3, [r4, #8]
 800a7e2:	6963      	ldr	r3, [r4, #20]
 800a7e4:	425b      	negs	r3, r3
 800a7e6:	61a3      	str	r3, [r4, #24]
 800a7e8:	6923      	ldr	r3, [r4, #16]
 800a7ea:	b943      	cbnz	r3, 800a7fe <__swsetup_r+0xc6>
 800a7ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7f0:	d1ba      	bne.n	800a768 <__swsetup_r+0x30>
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	0781      	lsls	r1, r0, #30
 800a7f6:	bf58      	it	pl
 800a7f8:	6963      	ldrpl	r3, [r4, #20]
 800a7fa:	60a3      	str	r3, [r4, #8]
 800a7fc:	e7f4      	b.n	800a7e8 <__swsetup_r+0xb0>
 800a7fe:	2000      	movs	r0, #0
 800a800:	e7f7      	b.n	800a7f2 <__swsetup_r+0xba>
 800a802:	bf00      	nop
 800a804:	20000024 	.word	0x20000024
 800a808:	0800cdf4 	.word	0x0800cdf4
 800a80c:	0800ce14 	.word	0x0800ce14
 800a810:	0800cdd4 	.word	0x0800cdd4

0800a814 <abort>:
 800a814:	b508      	push	{r3, lr}
 800a816:	2006      	movs	r0, #6
 800a818:	f000 fa96 	bl	800ad48 <raise>
 800a81c:	2001      	movs	r0, #1
 800a81e:	f7f6 fca0 	bl	8001162 <_exit>
	...

0800a824 <__sflush_r>:
 800a824:	898a      	ldrh	r2, [r1, #12]
 800a826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a82a:	4605      	mov	r5, r0
 800a82c:	0710      	lsls	r0, r2, #28
 800a82e:	460c      	mov	r4, r1
 800a830:	d458      	bmi.n	800a8e4 <__sflush_r+0xc0>
 800a832:	684b      	ldr	r3, [r1, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	dc05      	bgt.n	800a844 <__sflush_r+0x20>
 800a838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	dc02      	bgt.n	800a844 <__sflush_r+0x20>
 800a83e:	2000      	movs	r0, #0
 800a840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a846:	2e00      	cmp	r6, #0
 800a848:	d0f9      	beq.n	800a83e <__sflush_r+0x1a>
 800a84a:	2300      	movs	r3, #0
 800a84c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a850:	682f      	ldr	r7, [r5, #0]
 800a852:	602b      	str	r3, [r5, #0]
 800a854:	d032      	beq.n	800a8bc <__sflush_r+0x98>
 800a856:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	075a      	lsls	r2, r3, #29
 800a85c:	d505      	bpl.n	800a86a <__sflush_r+0x46>
 800a85e:	6863      	ldr	r3, [r4, #4]
 800a860:	1ac0      	subs	r0, r0, r3
 800a862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a864:	b10b      	cbz	r3, 800a86a <__sflush_r+0x46>
 800a866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a868:	1ac0      	subs	r0, r0, r3
 800a86a:	2300      	movs	r3, #0
 800a86c:	4602      	mov	r2, r0
 800a86e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a870:	6a21      	ldr	r1, [r4, #32]
 800a872:	4628      	mov	r0, r5
 800a874:	47b0      	blx	r6
 800a876:	1c43      	adds	r3, r0, #1
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	d106      	bne.n	800a88a <__sflush_r+0x66>
 800a87c:	6829      	ldr	r1, [r5, #0]
 800a87e:	291d      	cmp	r1, #29
 800a880:	d82c      	bhi.n	800a8dc <__sflush_r+0xb8>
 800a882:	4a2a      	ldr	r2, [pc, #168]	; (800a92c <__sflush_r+0x108>)
 800a884:	40ca      	lsrs	r2, r1
 800a886:	07d6      	lsls	r6, r2, #31
 800a888:	d528      	bpl.n	800a8dc <__sflush_r+0xb8>
 800a88a:	2200      	movs	r2, #0
 800a88c:	6062      	str	r2, [r4, #4]
 800a88e:	04d9      	lsls	r1, r3, #19
 800a890:	6922      	ldr	r2, [r4, #16]
 800a892:	6022      	str	r2, [r4, #0]
 800a894:	d504      	bpl.n	800a8a0 <__sflush_r+0x7c>
 800a896:	1c42      	adds	r2, r0, #1
 800a898:	d101      	bne.n	800a89e <__sflush_r+0x7a>
 800a89a:	682b      	ldr	r3, [r5, #0]
 800a89c:	b903      	cbnz	r3, 800a8a0 <__sflush_r+0x7c>
 800a89e:	6560      	str	r0, [r4, #84]	; 0x54
 800a8a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8a2:	602f      	str	r7, [r5, #0]
 800a8a4:	2900      	cmp	r1, #0
 800a8a6:	d0ca      	beq.n	800a83e <__sflush_r+0x1a>
 800a8a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8ac:	4299      	cmp	r1, r3
 800a8ae:	d002      	beq.n	800a8b6 <__sflush_r+0x92>
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	f7ff f9eb 	bl	8009c8c <_free_r>
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	6360      	str	r0, [r4, #52]	; 0x34
 800a8ba:	e7c1      	b.n	800a840 <__sflush_r+0x1c>
 800a8bc:	6a21      	ldr	r1, [r4, #32]
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	47b0      	blx	r6
 800a8c4:	1c41      	adds	r1, r0, #1
 800a8c6:	d1c7      	bne.n	800a858 <__sflush_r+0x34>
 800a8c8:	682b      	ldr	r3, [r5, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d0c4      	beq.n	800a858 <__sflush_r+0x34>
 800a8ce:	2b1d      	cmp	r3, #29
 800a8d0:	d001      	beq.n	800a8d6 <__sflush_r+0xb2>
 800a8d2:	2b16      	cmp	r3, #22
 800a8d4:	d101      	bne.n	800a8da <__sflush_r+0xb6>
 800a8d6:	602f      	str	r7, [r5, #0]
 800a8d8:	e7b1      	b.n	800a83e <__sflush_r+0x1a>
 800a8da:	89a3      	ldrh	r3, [r4, #12]
 800a8dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e0:	81a3      	strh	r3, [r4, #12]
 800a8e2:	e7ad      	b.n	800a840 <__sflush_r+0x1c>
 800a8e4:	690f      	ldr	r7, [r1, #16]
 800a8e6:	2f00      	cmp	r7, #0
 800a8e8:	d0a9      	beq.n	800a83e <__sflush_r+0x1a>
 800a8ea:	0793      	lsls	r3, r2, #30
 800a8ec:	680e      	ldr	r6, [r1, #0]
 800a8ee:	bf08      	it	eq
 800a8f0:	694b      	ldreq	r3, [r1, #20]
 800a8f2:	600f      	str	r7, [r1, #0]
 800a8f4:	bf18      	it	ne
 800a8f6:	2300      	movne	r3, #0
 800a8f8:	eba6 0807 	sub.w	r8, r6, r7
 800a8fc:	608b      	str	r3, [r1, #8]
 800a8fe:	f1b8 0f00 	cmp.w	r8, #0
 800a902:	dd9c      	ble.n	800a83e <__sflush_r+0x1a>
 800a904:	6a21      	ldr	r1, [r4, #32]
 800a906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a908:	4643      	mov	r3, r8
 800a90a:	463a      	mov	r2, r7
 800a90c:	4628      	mov	r0, r5
 800a90e:	47b0      	blx	r6
 800a910:	2800      	cmp	r0, #0
 800a912:	dc06      	bgt.n	800a922 <__sflush_r+0xfe>
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a91a:	81a3      	strh	r3, [r4, #12]
 800a91c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a920:	e78e      	b.n	800a840 <__sflush_r+0x1c>
 800a922:	4407      	add	r7, r0
 800a924:	eba8 0800 	sub.w	r8, r8, r0
 800a928:	e7e9      	b.n	800a8fe <__sflush_r+0xda>
 800a92a:	bf00      	nop
 800a92c:	20400001 	.word	0x20400001

0800a930 <_fflush_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	690b      	ldr	r3, [r1, #16]
 800a934:	4605      	mov	r5, r0
 800a936:	460c      	mov	r4, r1
 800a938:	b913      	cbnz	r3, 800a940 <_fflush_r+0x10>
 800a93a:	2500      	movs	r5, #0
 800a93c:	4628      	mov	r0, r5
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	b118      	cbz	r0, 800a94a <_fflush_r+0x1a>
 800a942:	6983      	ldr	r3, [r0, #24]
 800a944:	b90b      	cbnz	r3, 800a94a <_fflush_r+0x1a>
 800a946:	f000 f887 	bl	800aa58 <__sinit>
 800a94a:	4b14      	ldr	r3, [pc, #80]	; (800a99c <_fflush_r+0x6c>)
 800a94c:	429c      	cmp	r4, r3
 800a94e:	d11b      	bne.n	800a988 <_fflush_r+0x58>
 800a950:	686c      	ldr	r4, [r5, #4]
 800a952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0ef      	beq.n	800a93a <_fflush_r+0xa>
 800a95a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a95c:	07d0      	lsls	r0, r2, #31
 800a95e:	d404      	bmi.n	800a96a <_fflush_r+0x3a>
 800a960:	0599      	lsls	r1, r3, #22
 800a962:	d402      	bmi.n	800a96a <_fflush_r+0x3a>
 800a964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a966:	f000 f915 	bl	800ab94 <__retarget_lock_acquire_recursive>
 800a96a:	4628      	mov	r0, r5
 800a96c:	4621      	mov	r1, r4
 800a96e:	f7ff ff59 	bl	800a824 <__sflush_r>
 800a972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a974:	07da      	lsls	r2, r3, #31
 800a976:	4605      	mov	r5, r0
 800a978:	d4e0      	bmi.n	800a93c <_fflush_r+0xc>
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	059b      	lsls	r3, r3, #22
 800a97e:	d4dd      	bmi.n	800a93c <_fflush_r+0xc>
 800a980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a982:	f000 f908 	bl	800ab96 <__retarget_lock_release_recursive>
 800a986:	e7d9      	b.n	800a93c <_fflush_r+0xc>
 800a988:	4b05      	ldr	r3, [pc, #20]	; (800a9a0 <_fflush_r+0x70>)
 800a98a:	429c      	cmp	r4, r3
 800a98c:	d101      	bne.n	800a992 <_fflush_r+0x62>
 800a98e:	68ac      	ldr	r4, [r5, #8]
 800a990:	e7df      	b.n	800a952 <_fflush_r+0x22>
 800a992:	4b04      	ldr	r3, [pc, #16]	; (800a9a4 <_fflush_r+0x74>)
 800a994:	429c      	cmp	r4, r3
 800a996:	bf08      	it	eq
 800a998:	68ec      	ldreq	r4, [r5, #12]
 800a99a:	e7da      	b.n	800a952 <_fflush_r+0x22>
 800a99c:	0800cdf4 	.word	0x0800cdf4
 800a9a0:	0800ce14 	.word	0x0800ce14
 800a9a4:	0800cdd4 	.word	0x0800cdd4

0800a9a8 <std>:
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	b510      	push	{r4, lr}
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a9b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9b6:	6083      	str	r3, [r0, #8]
 800a9b8:	8181      	strh	r1, [r0, #12]
 800a9ba:	6643      	str	r3, [r0, #100]	; 0x64
 800a9bc:	81c2      	strh	r2, [r0, #14]
 800a9be:	6183      	str	r3, [r0, #24]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	2208      	movs	r2, #8
 800a9c4:	305c      	adds	r0, #92	; 0x5c
 800a9c6:	f7ff f8c1 	bl	8009b4c <memset>
 800a9ca:	4b05      	ldr	r3, [pc, #20]	; (800a9e0 <std+0x38>)
 800a9cc:	6263      	str	r3, [r4, #36]	; 0x24
 800a9ce:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <std+0x3c>)
 800a9d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9d2:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <std+0x40>)
 800a9d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9d6:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <std+0x44>)
 800a9d8:	6224      	str	r4, [r4, #32]
 800a9da:	6323      	str	r3, [r4, #48]	; 0x30
 800a9dc:	bd10      	pop	{r4, pc}
 800a9de:	bf00      	nop
 800a9e0:	0800ad81 	.word	0x0800ad81
 800a9e4:	0800ada3 	.word	0x0800ada3
 800a9e8:	0800addb 	.word	0x0800addb
 800a9ec:	0800adff 	.word	0x0800adff

0800a9f0 <_cleanup_r>:
 800a9f0:	4901      	ldr	r1, [pc, #4]	; (800a9f8 <_cleanup_r+0x8>)
 800a9f2:	f000 b8af 	b.w	800ab54 <_fwalk_reent>
 800a9f6:	bf00      	nop
 800a9f8:	0800a931 	.word	0x0800a931

0800a9fc <__sfmoreglue>:
 800a9fc:	b570      	push	{r4, r5, r6, lr}
 800a9fe:	1e4a      	subs	r2, r1, #1
 800aa00:	2568      	movs	r5, #104	; 0x68
 800aa02:	4355      	muls	r5, r2
 800aa04:	460e      	mov	r6, r1
 800aa06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa0a:	f7ff f98f 	bl	8009d2c <_malloc_r>
 800aa0e:	4604      	mov	r4, r0
 800aa10:	b140      	cbz	r0, 800aa24 <__sfmoreglue+0x28>
 800aa12:	2100      	movs	r1, #0
 800aa14:	e9c0 1600 	strd	r1, r6, [r0]
 800aa18:	300c      	adds	r0, #12
 800aa1a:	60a0      	str	r0, [r4, #8]
 800aa1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa20:	f7ff f894 	bl	8009b4c <memset>
 800aa24:	4620      	mov	r0, r4
 800aa26:	bd70      	pop	{r4, r5, r6, pc}

0800aa28 <__sfp_lock_acquire>:
 800aa28:	4801      	ldr	r0, [pc, #4]	; (800aa30 <__sfp_lock_acquire+0x8>)
 800aa2a:	f000 b8b3 	b.w	800ab94 <__retarget_lock_acquire_recursive>
 800aa2e:	bf00      	nop
 800aa30:	20004d50 	.word	0x20004d50

0800aa34 <__sfp_lock_release>:
 800aa34:	4801      	ldr	r0, [pc, #4]	; (800aa3c <__sfp_lock_release+0x8>)
 800aa36:	f000 b8ae 	b.w	800ab96 <__retarget_lock_release_recursive>
 800aa3a:	bf00      	nop
 800aa3c:	20004d50 	.word	0x20004d50

0800aa40 <__sinit_lock_acquire>:
 800aa40:	4801      	ldr	r0, [pc, #4]	; (800aa48 <__sinit_lock_acquire+0x8>)
 800aa42:	f000 b8a7 	b.w	800ab94 <__retarget_lock_acquire_recursive>
 800aa46:	bf00      	nop
 800aa48:	20004d4b 	.word	0x20004d4b

0800aa4c <__sinit_lock_release>:
 800aa4c:	4801      	ldr	r0, [pc, #4]	; (800aa54 <__sinit_lock_release+0x8>)
 800aa4e:	f000 b8a2 	b.w	800ab96 <__retarget_lock_release_recursive>
 800aa52:	bf00      	nop
 800aa54:	20004d4b 	.word	0x20004d4b

0800aa58 <__sinit>:
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	f7ff fff0 	bl	800aa40 <__sinit_lock_acquire>
 800aa60:	69a3      	ldr	r3, [r4, #24]
 800aa62:	b11b      	cbz	r3, 800aa6c <__sinit+0x14>
 800aa64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa68:	f7ff bff0 	b.w	800aa4c <__sinit_lock_release>
 800aa6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa70:	6523      	str	r3, [r4, #80]	; 0x50
 800aa72:	4b13      	ldr	r3, [pc, #76]	; (800aac0 <__sinit+0x68>)
 800aa74:	4a13      	ldr	r2, [pc, #76]	; (800aac4 <__sinit+0x6c>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa7a:	42a3      	cmp	r3, r4
 800aa7c:	bf04      	itt	eq
 800aa7e:	2301      	moveq	r3, #1
 800aa80:	61a3      	streq	r3, [r4, #24]
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 f820 	bl	800aac8 <__sfp>
 800aa88:	6060      	str	r0, [r4, #4]
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f000 f81c 	bl	800aac8 <__sfp>
 800aa90:	60a0      	str	r0, [r4, #8]
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 f818 	bl	800aac8 <__sfp>
 800aa98:	2200      	movs	r2, #0
 800aa9a:	60e0      	str	r0, [r4, #12]
 800aa9c:	2104      	movs	r1, #4
 800aa9e:	6860      	ldr	r0, [r4, #4]
 800aaa0:	f7ff ff82 	bl	800a9a8 <std>
 800aaa4:	68a0      	ldr	r0, [r4, #8]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	2109      	movs	r1, #9
 800aaaa:	f7ff ff7d 	bl	800a9a8 <std>
 800aaae:	68e0      	ldr	r0, [r4, #12]
 800aab0:	2202      	movs	r2, #2
 800aab2:	2112      	movs	r1, #18
 800aab4:	f7ff ff78 	bl	800a9a8 <std>
 800aab8:	2301      	movs	r3, #1
 800aaba:	61a3      	str	r3, [r4, #24]
 800aabc:	e7d2      	b.n	800aa64 <__sinit+0xc>
 800aabe:	bf00      	nop
 800aac0:	0800cce8 	.word	0x0800cce8
 800aac4:	0800a9f1 	.word	0x0800a9f1

0800aac8 <__sfp>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	4607      	mov	r7, r0
 800aacc:	f7ff ffac 	bl	800aa28 <__sfp_lock_acquire>
 800aad0:	4b1e      	ldr	r3, [pc, #120]	; (800ab4c <__sfp+0x84>)
 800aad2:	681e      	ldr	r6, [r3, #0]
 800aad4:	69b3      	ldr	r3, [r6, #24]
 800aad6:	b913      	cbnz	r3, 800aade <__sfp+0x16>
 800aad8:	4630      	mov	r0, r6
 800aada:	f7ff ffbd 	bl	800aa58 <__sinit>
 800aade:	3648      	adds	r6, #72	; 0x48
 800aae0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aae4:	3b01      	subs	r3, #1
 800aae6:	d503      	bpl.n	800aaf0 <__sfp+0x28>
 800aae8:	6833      	ldr	r3, [r6, #0]
 800aaea:	b30b      	cbz	r3, 800ab30 <__sfp+0x68>
 800aaec:	6836      	ldr	r6, [r6, #0]
 800aaee:	e7f7      	b.n	800aae0 <__sfp+0x18>
 800aaf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aaf4:	b9d5      	cbnz	r5, 800ab2c <__sfp+0x64>
 800aaf6:	4b16      	ldr	r3, [pc, #88]	; (800ab50 <__sfp+0x88>)
 800aaf8:	60e3      	str	r3, [r4, #12]
 800aafa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aafe:	6665      	str	r5, [r4, #100]	; 0x64
 800ab00:	f000 f847 	bl	800ab92 <__retarget_lock_init_recursive>
 800ab04:	f7ff ff96 	bl	800aa34 <__sfp_lock_release>
 800ab08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab10:	6025      	str	r5, [r4, #0]
 800ab12:	61a5      	str	r5, [r4, #24]
 800ab14:	2208      	movs	r2, #8
 800ab16:	4629      	mov	r1, r5
 800ab18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab1c:	f7ff f816 	bl	8009b4c <memset>
 800ab20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab28:	4620      	mov	r0, r4
 800ab2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab2c:	3468      	adds	r4, #104	; 0x68
 800ab2e:	e7d9      	b.n	800aae4 <__sfp+0x1c>
 800ab30:	2104      	movs	r1, #4
 800ab32:	4638      	mov	r0, r7
 800ab34:	f7ff ff62 	bl	800a9fc <__sfmoreglue>
 800ab38:	4604      	mov	r4, r0
 800ab3a:	6030      	str	r0, [r6, #0]
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d1d5      	bne.n	800aaec <__sfp+0x24>
 800ab40:	f7ff ff78 	bl	800aa34 <__sfp_lock_release>
 800ab44:	230c      	movs	r3, #12
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	e7ee      	b.n	800ab28 <__sfp+0x60>
 800ab4a:	bf00      	nop
 800ab4c:	0800cce8 	.word	0x0800cce8
 800ab50:	ffff0001 	.word	0xffff0001

0800ab54 <_fwalk_reent>:
 800ab54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab58:	4606      	mov	r6, r0
 800ab5a:	4688      	mov	r8, r1
 800ab5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab60:	2700      	movs	r7, #0
 800ab62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab66:	f1b9 0901 	subs.w	r9, r9, #1
 800ab6a:	d505      	bpl.n	800ab78 <_fwalk_reent+0x24>
 800ab6c:	6824      	ldr	r4, [r4, #0]
 800ab6e:	2c00      	cmp	r4, #0
 800ab70:	d1f7      	bne.n	800ab62 <_fwalk_reent+0xe>
 800ab72:	4638      	mov	r0, r7
 800ab74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab78:	89ab      	ldrh	r3, [r5, #12]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d907      	bls.n	800ab8e <_fwalk_reent+0x3a>
 800ab7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab82:	3301      	adds	r3, #1
 800ab84:	d003      	beq.n	800ab8e <_fwalk_reent+0x3a>
 800ab86:	4629      	mov	r1, r5
 800ab88:	4630      	mov	r0, r6
 800ab8a:	47c0      	blx	r8
 800ab8c:	4307      	orrs	r7, r0
 800ab8e:	3568      	adds	r5, #104	; 0x68
 800ab90:	e7e9      	b.n	800ab66 <_fwalk_reent+0x12>

0800ab92 <__retarget_lock_init_recursive>:
 800ab92:	4770      	bx	lr

0800ab94 <__retarget_lock_acquire_recursive>:
 800ab94:	4770      	bx	lr

0800ab96 <__retarget_lock_release_recursive>:
 800ab96:	4770      	bx	lr

0800ab98 <__swhatbuf_r>:
 800ab98:	b570      	push	{r4, r5, r6, lr}
 800ab9a:	460e      	mov	r6, r1
 800ab9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba0:	2900      	cmp	r1, #0
 800aba2:	b096      	sub	sp, #88	; 0x58
 800aba4:	4614      	mov	r4, r2
 800aba6:	461d      	mov	r5, r3
 800aba8:	da07      	bge.n	800abba <__swhatbuf_r+0x22>
 800abaa:	2300      	movs	r3, #0
 800abac:	602b      	str	r3, [r5, #0]
 800abae:	89b3      	ldrh	r3, [r6, #12]
 800abb0:	061a      	lsls	r2, r3, #24
 800abb2:	d410      	bmi.n	800abd6 <__swhatbuf_r+0x3e>
 800abb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abb8:	e00e      	b.n	800abd8 <__swhatbuf_r+0x40>
 800abba:	466a      	mov	r2, sp
 800abbc:	f000 f946 	bl	800ae4c <_fstat_r>
 800abc0:	2800      	cmp	r0, #0
 800abc2:	dbf2      	blt.n	800abaa <__swhatbuf_r+0x12>
 800abc4:	9a01      	ldr	r2, [sp, #4]
 800abc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abce:	425a      	negs	r2, r3
 800abd0:	415a      	adcs	r2, r3
 800abd2:	602a      	str	r2, [r5, #0]
 800abd4:	e7ee      	b.n	800abb4 <__swhatbuf_r+0x1c>
 800abd6:	2340      	movs	r3, #64	; 0x40
 800abd8:	2000      	movs	r0, #0
 800abda:	6023      	str	r3, [r4, #0]
 800abdc:	b016      	add	sp, #88	; 0x58
 800abde:	bd70      	pop	{r4, r5, r6, pc}

0800abe0 <__smakebuf_r>:
 800abe0:	898b      	ldrh	r3, [r1, #12]
 800abe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abe4:	079d      	lsls	r5, r3, #30
 800abe6:	4606      	mov	r6, r0
 800abe8:	460c      	mov	r4, r1
 800abea:	d507      	bpl.n	800abfc <__smakebuf_r+0x1c>
 800abec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	6123      	str	r3, [r4, #16]
 800abf4:	2301      	movs	r3, #1
 800abf6:	6163      	str	r3, [r4, #20]
 800abf8:	b002      	add	sp, #8
 800abfa:	bd70      	pop	{r4, r5, r6, pc}
 800abfc:	ab01      	add	r3, sp, #4
 800abfe:	466a      	mov	r2, sp
 800ac00:	f7ff ffca 	bl	800ab98 <__swhatbuf_r>
 800ac04:	9900      	ldr	r1, [sp, #0]
 800ac06:	4605      	mov	r5, r0
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f7ff f88f 	bl	8009d2c <_malloc_r>
 800ac0e:	b948      	cbnz	r0, 800ac24 <__smakebuf_r+0x44>
 800ac10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac14:	059a      	lsls	r2, r3, #22
 800ac16:	d4ef      	bmi.n	800abf8 <__smakebuf_r+0x18>
 800ac18:	f023 0303 	bic.w	r3, r3, #3
 800ac1c:	f043 0302 	orr.w	r3, r3, #2
 800ac20:	81a3      	strh	r3, [r4, #12]
 800ac22:	e7e3      	b.n	800abec <__smakebuf_r+0xc>
 800ac24:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <__smakebuf_r+0x7c>)
 800ac26:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	6020      	str	r0, [r4, #0]
 800ac2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac30:	81a3      	strh	r3, [r4, #12]
 800ac32:	9b00      	ldr	r3, [sp, #0]
 800ac34:	6163      	str	r3, [r4, #20]
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	6120      	str	r0, [r4, #16]
 800ac3a:	b15b      	cbz	r3, 800ac54 <__smakebuf_r+0x74>
 800ac3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac40:	4630      	mov	r0, r6
 800ac42:	f000 f915 	bl	800ae70 <_isatty_r>
 800ac46:	b128      	cbz	r0, 800ac54 <__smakebuf_r+0x74>
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	f023 0303 	bic.w	r3, r3, #3
 800ac4e:	f043 0301 	orr.w	r3, r3, #1
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	89a0      	ldrh	r0, [r4, #12]
 800ac56:	4305      	orrs	r5, r0
 800ac58:	81a5      	strh	r5, [r4, #12]
 800ac5a:	e7cd      	b.n	800abf8 <__smakebuf_r+0x18>
 800ac5c:	0800a9f1 	.word	0x0800a9f1

0800ac60 <memmove>:
 800ac60:	4288      	cmp	r0, r1
 800ac62:	b510      	push	{r4, lr}
 800ac64:	eb01 0402 	add.w	r4, r1, r2
 800ac68:	d902      	bls.n	800ac70 <memmove+0x10>
 800ac6a:	4284      	cmp	r4, r0
 800ac6c:	4623      	mov	r3, r4
 800ac6e:	d807      	bhi.n	800ac80 <memmove+0x20>
 800ac70:	1e43      	subs	r3, r0, #1
 800ac72:	42a1      	cmp	r1, r4
 800ac74:	d008      	beq.n	800ac88 <memmove+0x28>
 800ac76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac7e:	e7f8      	b.n	800ac72 <memmove+0x12>
 800ac80:	4402      	add	r2, r0
 800ac82:	4601      	mov	r1, r0
 800ac84:	428a      	cmp	r2, r1
 800ac86:	d100      	bne.n	800ac8a <memmove+0x2a>
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac92:	e7f7      	b.n	800ac84 <memmove+0x24>

0800ac94 <__malloc_lock>:
 800ac94:	4801      	ldr	r0, [pc, #4]	; (800ac9c <__malloc_lock+0x8>)
 800ac96:	f7ff bf7d 	b.w	800ab94 <__retarget_lock_acquire_recursive>
 800ac9a:	bf00      	nop
 800ac9c:	20004d4c 	.word	0x20004d4c

0800aca0 <__malloc_unlock>:
 800aca0:	4801      	ldr	r0, [pc, #4]	; (800aca8 <__malloc_unlock+0x8>)
 800aca2:	f7ff bf78 	b.w	800ab96 <__retarget_lock_release_recursive>
 800aca6:	bf00      	nop
 800aca8:	20004d4c 	.word	0x20004d4c

0800acac <_realloc_r>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	4607      	mov	r7, r0
 800acb0:	4614      	mov	r4, r2
 800acb2:	460e      	mov	r6, r1
 800acb4:	b921      	cbnz	r1, 800acc0 <_realloc_r+0x14>
 800acb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800acba:	4611      	mov	r1, r2
 800acbc:	f7ff b836 	b.w	8009d2c <_malloc_r>
 800acc0:	b922      	cbnz	r2, 800accc <_realloc_r+0x20>
 800acc2:	f7fe ffe3 	bl	8009c8c <_free_r>
 800acc6:	4625      	mov	r5, r4
 800acc8:	4628      	mov	r0, r5
 800acca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800accc:	f000 f8f2 	bl	800aeb4 <_malloc_usable_size_r>
 800acd0:	42a0      	cmp	r0, r4
 800acd2:	d20f      	bcs.n	800acf4 <_realloc_r+0x48>
 800acd4:	4621      	mov	r1, r4
 800acd6:	4638      	mov	r0, r7
 800acd8:	f7ff f828 	bl	8009d2c <_malloc_r>
 800acdc:	4605      	mov	r5, r0
 800acde:	2800      	cmp	r0, #0
 800ace0:	d0f2      	beq.n	800acc8 <_realloc_r+0x1c>
 800ace2:	4631      	mov	r1, r6
 800ace4:	4622      	mov	r2, r4
 800ace6:	f7fe ff23 	bl	8009b30 <memcpy>
 800acea:	4631      	mov	r1, r6
 800acec:	4638      	mov	r0, r7
 800acee:	f7fe ffcd 	bl	8009c8c <_free_r>
 800acf2:	e7e9      	b.n	800acc8 <_realloc_r+0x1c>
 800acf4:	4635      	mov	r5, r6
 800acf6:	e7e7      	b.n	800acc8 <_realloc_r+0x1c>

0800acf8 <_raise_r>:
 800acf8:	291f      	cmp	r1, #31
 800acfa:	b538      	push	{r3, r4, r5, lr}
 800acfc:	4604      	mov	r4, r0
 800acfe:	460d      	mov	r5, r1
 800ad00:	d904      	bls.n	800ad0c <_raise_r+0x14>
 800ad02:	2316      	movs	r3, #22
 800ad04:	6003      	str	r3, [r0, #0]
 800ad06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad0e:	b112      	cbz	r2, 800ad16 <_raise_r+0x1e>
 800ad10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad14:	b94b      	cbnz	r3, 800ad2a <_raise_r+0x32>
 800ad16:	4620      	mov	r0, r4
 800ad18:	f000 f830 	bl	800ad7c <_getpid_r>
 800ad1c:	462a      	mov	r2, r5
 800ad1e:	4601      	mov	r1, r0
 800ad20:	4620      	mov	r0, r4
 800ad22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad26:	f000 b817 	b.w	800ad58 <_kill_r>
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d00a      	beq.n	800ad44 <_raise_r+0x4c>
 800ad2e:	1c59      	adds	r1, r3, #1
 800ad30:	d103      	bne.n	800ad3a <_raise_r+0x42>
 800ad32:	2316      	movs	r3, #22
 800ad34:	6003      	str	r3, [r0, #0]
 800ad36:	2001      	movs	r0, #1
 800ad38:	e7e7      	b.n	800ad0a <_raise_r+0x12>
 800ad3a:	2400      	movs	r4, #0
 800ad3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad40:	4628      	mov	r0, r5
 800ad42:	4798      	blx	r3
 800ad44:	2000      	movs	r0, #0
 800ad46:	e7e0      	b.n	800ad0a <_raise_r+0x12>

0800ad48 <raise>:
 800ad48:	4b02      	ldr	r3, [pc, #8]	; (800ad54 <raise+0xc>)
 800ad4a:	4601      	mov	r1, r0
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	f7ff bfd3 	b.w	800acf8 <_raise_r>
 800ad52:	bf00      	nop
 800ad54:	20000024 	.word	0x20000024

0800ad58 <_kill_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d07      	ldr	r5, [pc, #28]	; (800ad78 <_kill_r+0x20>)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4604      	mov	r4, r0
 800ad60:	4608      	mov	r0, r1
 800ad62:	4611      	mov	r1, r2
 800ad64:	602b      	str	r3, [r5, #0]
 800ad66:	f7f6 f9ec 	bl	8001142 <_kill>
 800ad6a:	1c43      	adds	r3, r0, #1
 800ad6c:	d102      	bne.n	800ad74 <_kill_r+0x1c>
 800ad6e:	682b      	ldr	r3, [r5, #0]
 800ad70:	b103      	cbz	r3, 800ad74 <_kill_r+0x1c>
 800ad72:	6023      	str	r3, [r4, #0]
 800ad74:	bd38      	pop	{r3, r4, r5, pc}
 800ad76:	bf00      	nop
 800ad78:	20004d54 	.word	0x20004d54

0800ad7c <_getpid_r>:
 800ad7c:	f7f6 b9d9 	b.w	8001132 <_getpid>

0800ad80 <__sread>:
 800ad80:	b510      	push	{r4, lr}
 800ad82:	460c      	mov	r4, r1
 800ad84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad88:	f000 f89c 	bl	800aec4 <_read_r>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	bfab      	itete	ge
 800ad90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad92:	89a3      	ldrhlt	r3, [r4, #12]
 800ad94:	181b      	addge	r3, r3, r0
 800ad96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad9a:	bfac      	ite	ge
 800ad9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad9e:	81a3      	strhlt	r3, [r4, #12]
 800ada0:	bd10      	pop	{r4, pc}

0800ada2 <__swrite>:
 800ada2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada6:	461f      	mov	r7, r3
 800ada8:	898b      	ldrh	r3, [r1, #12]
 800adaa:	05db      	lsls	r3, r3, #23
 800adac:	4605      	mov	r5, r0
 800adae:	460c      	mov	r4, r1
 800adb0:	4616      	mov	r6, r2
 800adb2:	d505      	bpl.n	800adc0 <__swrite+0x1e>
 800adb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb8:	2302      	movs	r3, #2
 800adba:	2200      	movs	r2, #0
 800adbc:	f000 f868 	bl	800ae90 <_lseek_r>
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adca:	81a3      	strh	r3, [r4, #12]
 800adcc:	4632      	mov	r2, r6
 800adce:	463b      	mov	r3, r7
 800add0:	4628      	mov	r0, r5
 800add2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800add6:	f000 b817 	b.w	800ae08 <_write_r>

0800adda <__sseek>:
 800adda:	b510      	push	{r4, lr}
 800addc:	460c      	mov	r4, r1
 800adde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade2:	f000 f855 	bl	800ae90 <_lseek_r>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	bf15      	itete	ne
 800adec:	6560      	strne	r0, [r4, #84]	; 0x54
 800adee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adf6:	81a3      	strheq	r3, [r4, #12]
 800adf8:	bf18      	it	ne
 800adfa:	81a3      	strhne	r3, [r4, #12]
 800adfc:	bd10      	pop	{r4, pc}

0800adfe <__sclose>:
 800adfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae02:	f000 b813 	b.w	800ae2c <_close_r>
	...

0800ae08 <_write_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d07      	ldr	r5, [pc, #28]	; (800ae28 <_write_r+0x20>)
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	4608      	mov	r0, r1
 800ae10:	4611      	mov	r1, r2
 800ae12:	2200      	movs	r2, #0
 800ae14:	602a      	str	r2, [r5, #0]
 800ae16:	461a      	mov	r2, r3
 800ae18:	f7f6 f9ca 	bl	80011b0 <_write>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_write_r+0x1e>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_write_r+0x1e>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	20004d54 	.word	0x20004d54

0800ae2c <_close_r>:
 800ae2c:	b538      	push	{r3, r4, r5, lr}
 800ae2e:	4d06      	ldr	r5, [pc, #24]	; (800ae48 <_close_r+0x1c>)
 800ae30:	2300      	movs	r3, #0
 800ae32:	4604      	mov	r4, r0
 800ae34:	4608      	mov	r0, r1
 800ae36:	602b      	str	r3, [r5, #0]
 800ae38:	f7f6 f9d6 	bl	80011e8 <_close>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d102      	bne.n	800ae46 <_close_r+0x1a>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	b103      	cbz	r3, 800ae46 <_close_r+0x1a>
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	20004d54 	.word	0x20004d54

0800ae4c <_fstat_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d07      	ldr	r5, [pc, #28]	; (800ae6c <_fstat_r+0x20>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4604      	mov	r4, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	4611      	mov	r1, r2
 800ae58:	602b      	str	r3, [r5, #0]
 800ae5a:	f7f6 f9d1 	bl	8001200 <_fstat>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d102      	bne.n	800ae68 <_fstat_r+0x1c>
 800ae62:	682b      	ldr	r3, [r5, #0]
 800ae64:	b103      	cbz	r3, 800ae68 <_fstat_r+0x1c>
 800ae66:	6023      	str	r3, [r4, #0]
 800ae68:	bd38      	pop	{r3, r4, r5, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20004d54 	.word	0x20004d54

0800ae70 <_isatty_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d06      	ldr	r5, [pc, #24]	; (800ae8c <_isatty_r+0x1c>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	f7f6 f9d0 	bl	8001220 <_isatty>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_isatty_r+0x1a>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_isatty_r+0x1a>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	20004d54 	.word	0x20004d54

0800ae90 <_lseek_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d07      	ldr	r5, [pc, #28]	; (800aeb0 <_lseek_r+0x20>)
 800ae94:	4604      	mov	r4, r0
 800ae96:	4608      	mov	r0, r1
 800ae98:	4611      	mov	r1, r2
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	602a      	str	r2, [r5, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f7f6 f9c9 	bl	8001236 <_lseek>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_lseek_r+0x1e>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_lseek_r+0x1e>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	20004d54 	.word	0x20004d54

0800aeb4 <_malloc_usable_size_r>:
 800aeb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeb8:	1f18      	subs	r0, r3, #4
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	bfbc      	itt	lt
 800aebe:	580b      	ldrlt	r3, [r1, r0]
 800aec0:	18c0      	addlt	r0, r0, r3
 800aec2:	4770      	bx	lr

0800aec4 <_read_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d07      	ldr	r5, [pc, #28]	; (800aee4 <_read_r+0x20>)
 800aec8:	4604      	mov	r4, r0
 800aeca:	4608      	mov	r0, r1
 800aecc:	4611      	mov	r1, r2
 800aece:	2200      	movs	r2, #0
 800aed0:	602a      	str	r2, [r5, #0]
 800aed2:	461a      	mov	r2, r3
 800aed4:	f7f6 f94f 	bl	8001176 <_read>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_read_r+0x1e>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_read_r+0x1e>
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	20004d54 	.word	0x20004d54

0800aee8 <_init>:
 800aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeea:	bf00      	nop
 800aeec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeee:	bc08      	pop	{r3}
 800aef0:	469e      	mov	lr, r3
 800aef2:	4770      	bx	lr

0800aef4 <_fini>:
 800aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef6:	bf00      	nop
 800aef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefa:	bc08      	pop	{r3}
 800aefc:	469e      	mov	lr, r3
 800aefe:	4770      	bx	lr
